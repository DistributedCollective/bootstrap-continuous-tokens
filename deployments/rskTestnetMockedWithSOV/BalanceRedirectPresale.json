{
  "address": "0x88C76c7C2096Ca197F9A3F35AACbF5540AD1123D",
  "abi": [
    {
      "constant": true,
      "inputs": [],
      "name": "hasInitialized",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "PPM",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_kernel",
          "type": "address"
        },
        {
          "name": "_controller",
          "type": "address"
        },
        {
          "name": "_marketMaker",
          "type": "address"
        },
        {
          "name": "_bondedToken",
          "type": "address"
        },
        {
          "name": "_reserve",
          "type": "address"
        },
        {
          "name": "_beneficiary",
          "type": "address"
        },
        {
          "name": "_erc20ContribToken",
          "type": "address"
        },
        {
          "name": "_period",
          "type": "uint64"
        },
        {
          "name": "_exchangeRate",
          "type": "uint256"
        },
        {
          "name": "_mintingForBeneficiaryPct",
          "type": "uint256"
        },
        {
          "name": "_openDate",
          "type": "uint64"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "marketMaker",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "name": "contributors",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_script",
          "type": "bytes"
        }
      ],
      "name": "getEVMScriptExecutor",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_period",
          "type": "uint64"
        }
      ],
      "name": "setPeriod",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getRecoveryVault",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "beneficiary",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "exchangeRate",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "",
          "type": "address"
        },
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "refund",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "close",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_date",
          "type": "uint64"
        }
      ],
      "name": "setOpenDate",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "contributionToken",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "mintingForBeneficiaryPct",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "OPEN_ROLE",
      "outputs": [
        {
          "name": "",
          "type": "bytes32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "contributorsCounter",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "REDUCE_BENEFICIARY_PCT_ROLE",
      "outputs": [
        {
          "name": "",
          "type": "bytes32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "token",
          "type": "address"
        }
      ],
      "name": "allowRecoverability",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "appId",
      "outputs": [
        {
          "name": "",
          "type": "bytes32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_contributor",
          "type": "address"
        },
        {
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "contribute",
      "outputs": [],
      "payable": true,
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getInitializationBlock",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "totalSold",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "contributionToTokens",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "transferToVault",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_sender",
          "type": "address"
        },
        {
          "name": "_role",
          "type": "bytes32"
        },
        {
          "name": "_params",
          "type": "uint256[]"
        }
      ],
      "name": "canPerform",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "CONTRIBUTE_ROLE",
      "outputs": [
        {
          "name": "",
          "type": "bytes32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getEVMScriptRegistry",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_pct",
          "type": "uint64"
        }
      ],
      "name": "reduceBeneficiaryPct",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "state",
      "outputs": [
        {
          "name": "",
          "type": "uint8"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "isClosed",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "totalRaised",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "reserve",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "kernel",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "isPetrified",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "bondedToken",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "openDate",
      "outputs": [
        {
          "name": "",
          "type": "uint64"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "period",
      "outputs": [
        {
          "name": "",
          "type": "uint64"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "controller",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "open",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "date",
          "type": "uint64"
        }
      ],
      "name": "SetOpenDate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "pct",
          "type": "uint256"
        }
      ],
      "name": "ReduceBeneficiatyPct",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "Close",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "contributor",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "value",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Contribute",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "executor",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "script",
          "type": "bytes"
        },
        {
          "indexed": false,
          "name": "input",
          "type": "bytes"
        },
        {
          "indexed": false,
          "name": "returnData",
          "type": "bytes"
        }
      ],
      "name": "ScriptResult",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "vault",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "RecoverToVault",
      "type": "event"
    }
  ],
  "transactionHash": "0xf0bb577c0d8c5e0ce3229d83e4fd5fa59a65d8fd73cb8ab41dd9b5daad59e5d1",
  "receipt": {
    "to": null,
    "from": "0x4D1A9fD1E1e67E83Ffe72Bdd769088d689993E4B",
    "contractAddress": "0x88C76c7C2096Ca197F9A3F35AACbF5540AD1123D",
    "transactionIndex": 3,
    "gasUsed": "3666196",
    "logsBloom": "0x
    "blockHash": "0xd943a81d75f78c648836d05550fff9f67394396a8019b1603d30adaf43924703",
    "transactionHash": "0xf0bb577c0d8c5e0ce3229d83e4fd5fa59a65d8fd73cb8ab41dd9b5daad59e5d1",
    "logs": [],
    "blockNumber": 2283681,
    "cumulativeGasUsed": "4135966",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "59374ad4749d81208e78b237aaa210a3",
  "metadata": "{\"compiler\":{\"version\":\"0.4.24+commit.e67f0147\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":true,\"inputs\":[],\"name\":\"hasInitialized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PPM\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_kernel\",\"type\":\"address\"},{\"name\":\"_controller\",\"type\":\"address\"},{\"name\":\"_marketMaker\",\"type\":\"address\"},{\"name\":\"_bondedToken\",\"type\":\"address\"},{\"name\":\"_reserve\",\"type\":\"address\"},{\"name\":\"_beneficiary\",\"type\":\"address\"},{\"name\":\"_erc20ContribToken\",\"type\":\"address\"},{\"name\":\"_period\",\"type\":\"uint64\"},{\"name\":\"_exchangeRate\",\"type\":\"uint256\"},{\"name\":\"_mintingForBeneficiaryPct\",\"type\":\"uint256\"},{\"name\":\"_openDate\",\"type\":\"uint64\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"marketMaker\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"contributors\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_script\",\"type\":\"bytes\"}],\"name\":\"getEVMScriptExecutor\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_period\",\"type\":\"uint64\"}],\"name\":\"setPeriod\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRecoveryVault\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"beneficiary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"exchangeRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"refund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"close\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_date\",\"type\":\"uint64\"}],\"name\":\"setOpenDate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contributionToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mintingForBeneficiaryPct\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"OPEN_ROLE\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contributorsCounter\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"REDUCE_BENEFICIARY_PCT_ROLE\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"}],\"name\":\"allowRecoverability\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"appId\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contributor\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"contribute\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getInitializationBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"contributionToTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"transferToVault\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"},{\"name\":\"_role\",\"type\":\"bytes32\"},{\"name\":\"_params\",\"type\":\"uint256[]\"}],\"name\":\"canPerform\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CONTRIBUTE_ROLE\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getEVMScriptRegistry\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_pct\",\"type\":\"uint64\"}],\"name\":\"reduceBeneficiaryPct\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"state\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isClosed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"reserve\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"kernel\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isPetrified\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"bondedToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"openDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"period\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"open\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"date\",\"type\":\"uint64\"}],\"name\":\"SetOpenDate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"pct\",\"type\":\"uint256\"}],\"name\":\"ReduceBeneficiatyPct\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Close\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"contributor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Contribute\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"executor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"script\",\"type\":\"bytes\"},{\"indexed\":false,\"name\":\"input\",\"type\":\"bytes\"},{\"indexed\":false,\"name\":\"returnData\",\"type\":\"bytes\"}],\"name\":\"ScriptResult\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"vault\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RecoverToVault\",\"type\":\"event\"}],\"devdoc\":{\"methods\":{\"allowRecoverability(address)\":{\"details\":\"By default deriving from AragonApp makes it recoverable\",\"params\":{\"token\":\"Token address that would be recovered\"},\"return\":\"bool whether the app allows the recovery\"},\"canPerform(address,bytes32,uint256[])\":{\"details\":\"Check whether an action can be performed by a sender for a particular role on this app\",\"params\":{\"_params\":\"Permission params for the role\",\"_role\":\"Role on this app\",\"_sender\":\"Sender of the call\"},\"return\":\"Boolean indicating whether the sender has the permissions to perform the action.        Always returns false if the app hasn't been initialized yet.\"},\"contribute(address,uint256)\":{\"params\":{\"_contributor\":\"The address of the contributor\",\"_value\":\"The amount of contribution token to be spent\"}},\"contributionToTokens(uint256)\":{\"params\":{\"_value\":\"The amount of contribution tokens to be used in that computation\"}},\"getInitializationBlock()\":{\"return\":\"Block number in which the contract was initialized\"},\"getRecoveryVault()\":{\"details\":\"Get the recovery vault for the app\",\"return\":\"Recovery vault address for the app\"},\"hasInitialized()\":{\"return\":\"Whether the contract has been initialized by the time of the current block\"},\"initialize(address,address,address,address,address,address,address,uint64,uint256,uint256,uint64)\":{\"params\":{\"_beneficiary\":\"The address of the beneficiary [to whom a percentage of the raised funds is be to be sent]\",\"_bondedToken\":\"The address of the bonded token\",\"_controller\":\"The address of the controller contract\",\"_erc20ContribToken\":\"The address of the token to be used to contribute\",\"_exchangeRate\":\"The exchangeRate [= 1/price] at which [bonded] tokens are to be purchased for that presale [in PPM]\",\"_marketMaker\":\"The address of the market maker contract\",\"_openDate\":\"The date upon which that presale is to be open [ignored if 0]\",\"_period\":\"The period within which to accept contribution for that presale\",\"_reserve\":\"The address of the reserve [pool] contract\"}},\"reduceBeneficiaryPct(uint64)\":{\"params\":{\"_pct\":\"New percentage to be set\"}},\"setOpenDate(uint64)\":{\"params\":{\"_date\":\"New date to be set\"}},\"setPeriod(uint64)\":{\"params\":{\"_period\":\"New duration to be set\"}},\"transferToVault(address)\":{\"params\":{\"_token\":\"Token balance to be sent to recovery vault.\"}}}},\"userdoc\":{\"methods\":{\"close()\":{\"notice\":\"Close presale and open trading\"},\"contribute(address,uint256)\":{\"notice\":\"Contribute to the presale up to `@tokenAmount(self.erc20ContribToken(): address, _value)`\"},\"contributionToTokens(uint256)\":{\"notice\":\"Computes the amount of [bonded] tokens that would be purchased for `@tokenAmount(self.contributionToken(): address, _value)`\"},\"initialize(address,address,address,address,address,address,address,uint64,uint256,uint256,uint64)\":{\"notice\":\"Initialize presale\"},\"open()\":{\"notice\":\"Open presale [enabling users to contribute]\"},\"reduceBeneficiaryPct(uint64)\":{\"notice\":\"Reduce pre-minting for beneficiary percentage to `_pct`\"},\"refund(address,uint256)\":{\"notice\":\"Does nothing. Interface compliance.\"},\"setOpenDate(uint64)\":{\"notice\":\"Set presale open date\"},\"setPeriod(uint64)\":{\"notice\":\"Set presale duration\"},\"state()\":{\"notice\":\"Returns the current state of that presale\"},\"transferToVault(address)\":{\"notice\":\"Send funds to recovery Vault. This contract should never receive funds,        but in case it does, this function allows one to recover them.\"}}}},\"settings\":{\"compilationTarget\":{\"contracts/BalanceRedirectPresale.sol\":\"BalanceRedirectPresale\"},\"evmVersion\":\"byzantium\",\"libraries\":{\"__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@ablack/fundraising-shared-interfaces/contracts/IAragonFundraisingController.sol\":{\"content\":\"pragma solidity 0.4.24;\\n\\n\\ncontract IAragonFundraisingController {\\n    function openTrading() external;\\n    function updateTappedAmount(address _token) external;\\n    function collateralsToBeClaimed(address _collateral) public view returns (uint256);\\n    function balanceOf(address _who, address _token) public view returns (uint256);\\n}\\n\",\"keccak256\":\"0x0cb702ca7fcfbf63f1b34ccad6f60780b416feb6062646d643dd8147cd66bdf0\"},\"@ablack/fundraising-shared-interfaces/contracts/IPresale.sol\":{\"content\":\"pragma solidity 0.4.24;\\n\\n\\ncontract IPresale {\\n    function open() external;\\n    function close() external;\\n    function contribute(address _contributor, uint256 _value) external payable;\\n    function refund(address _contributor, uint256 _vestedPurchaseId) external;\\n    function contributionToTokens(uint256 _value) public view returns (uint256);\\n    function contributionToken() public view returns (address);\\n }\",\"keccak256\":\"0xedab988d1fb194cd99733ea8312356d8c58e8d07815fc144fe8f5d08a09bc23e\"},\"@aragon/os/contracts/acl/ACLSyntaxSugar.sol\":{\"content\":\"/*\\n * SPDX-License-Identitifer:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\n\\ncontract ACLSyntaxSugar {\\n    function arr() internal pure returns (uint256[]) {\\n        return new uint256[](0);\\n    }\\n\\n    function arr(bytes32 _a) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a));\\n    }\\n\\n    function arr(bytes32 _a, bytes32 _b) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a), uint256(_b));\\n    }\\n\\n    function arr(address _a) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a));\\n    }\\n\\n    function arr(address _a, address _b) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a), uint256(_b));\\n    }\\n\\n    function arr(address _a, uint256 _b, uint256 _c) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a), _b, _c);\\n    }\\n\\n    function arr(address _a, uint256 _b, uint256 _c, uint256 _d) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a), _b, _c, _d);\\n    }\\n\\n    function arr(address _a, uint256 _b) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a), uint256(_b));\\n    }\\n\\n    function arr(address _a, address _b, uint256 _c, uint256 _d, uint256 _e) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a), uint256(_b), _c, _d, _e);\\n    }\\n\\n    function arr(address _a, address _b, address _c) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a), uint256(_b), uint256(_c));\\n    }\\n\\n    function arr(address _a, address _b, uint256 _c) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a), uint256(_b), uint256(_c));\\n    }\\n\\n    function arr(uint256 _a) internal pure returns (uint256[] r) {\\n        r = new uint256[](1);\\n        r[0] = _a;\\n    }\\n\\n    function arr(uint256 _a, uint256 _b) internal pure returns (uint256[] r) {\\n        r = new uint256[](2);\\n        r[0] = _a;\\n        r[1] = _b;\\n    }\\n\\n    function arr(uint256 _a, uint256 _b, uint256 _c) internal pure returns (uint256[] r) {\\n        r = new uint256[](3);\\n        r[0] = _a;\\n        r[1] = _b;\\n        r[2] = _c;\\n    }\\n\\n    function arr(uint256 _a, uint256 _b, uint256 _c, uint256 _d) internal pure returns (uint256[] r) {\\n        r = new uint256[](4);\\n        r[0] = _a;\\n        r[1] = _b;\\n        r[2] = _c;\\n        r[3] = _d;\\n    }\\n\\n    function arr(uint256 _a, uint256 _b, uint256 _c, uint256 _d, uint256 _e) internal pure returns (uint256[] r) {\\n        r = new uint256[](5);\\n        r[0] = _a;\\n        r[1] = _b;\\n        r[2] = _c;\\n        r[3] = _d;\\n        r[4] = _e;\\n    }\\n}\\n\\n\\ncontract ACLHelpers {\\n    function decodeParamOp(uint256 _x) internal pure returns (uint8 b) {\\n        return uint8(_x >> (8 * 30));\\n    }\\n\\n    function decodeParamId(uint256 _x) internal pure returns (uint8 b) {\\n        return uint8(_x >> (8 * 31));\\n    }\\n\\n    function decodeParamsList(uint256 _x) internal pure returns (uint32 a, uint32 b, uint32 c) {\\n        a = uint32(_x);\\n        b = uint32(_x >> (8 * 4));\\n        c = uint32(_x >> (8 * 8));\\n    }\\n}\\n\",\"keccak256\":\"0x519915c14576b679b5ed5767d6b21b44a13aa7ae2fe7b33664ca364fafc33e00\"},\"@aragon/os/contracts/acl/IACL.sol\":{\"content\":\"/*\\n * SPDX-License-Identitifer:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\n\\ninterface IACL {\\n    function initialize(address permissionsCreator) external;\\n\\n    // TODO: this should be external\\n    // See https://github.com/ethereum/solidity/issues/4832\\n    function hasPermission(address who, address where, bytes32 what, bytes how) public view returns (bool);\\n}\\n\",\"keccak256\":\"0xe3492bc29d2482e65d2e39c96487b5388f6181f6bcdc6fe6329b8206b84c0cf1\"},\"@aragon/os/contracts/apps/AppStorage.sol\":{\"content\":\"/*\\n * SPDX-License-Identitifer:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\nimport \\\"../common/UnstructuredStorage.sol\\\";\\nimport \\\"../kernel/IKernel.sol\\\";\\n\\n\\ncontract AppStorage {\\n    using UnstructuredStorage for bytes32;\\n\\n    /* Hardcoded constants to save gas\\n    bytes32 internal constant KERNEL_POSITION = keccak256(\\\"aragonOS.appStorage.kernel\\\");\\n    bytes32 internal constant APP_ID_POSITION = keccak256(\\\"aragonOS.appStorage.appId\\\");\\n    */\\n    bytes32 internal constant KERNEL_POSITION = 0x4172f0f7d2289153072b0a6ca36959e0cbe2efc3afe50fc81636caa96338137b;\\n    bytes32 internal constant APP_ID_POSITION = 0xd625496217aa6a3453eecb9c3489dc5a53e6c67b444329ea2b2cbc9ff547639b;\\n\\n    function kernel() public view returns (IKernel) {\\n        return IKernel(KERNEL_POSITION.getStorageAddress());\\n    }\\n\\n    function appId() public view returns (bytes32) {\\n        return APP_ID_POSITION.getStorageBytes32();\\n    }\\n\\n    function setKernel(IKernel _kernel) internal {\\n        KERNEL_POSITION.setStorageAddress(address(_kernel));\\n    }\\n\\n    function setAppId(bytes32 _appId) internal {\\n        APP_ID_POSITION.setStorageBytes32(_appId);\\n    }\\n}\\n\",\"keccak256\":\"0xb1c8eb71d1bdfe1241cc1714b280b46bbfc5bcb1e8499d42c24d3f5f5e8130f1\"},\"@aragon/os/contracts/apps/AragonApp.sol\":{\"content\":\"/*\\n * SPDX-License-Identitifer:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\nimport \\\"./AppStorage.sol\\\";\\nimport \\\"../acl/ACLSyntaxSugar.sol\\\";\\nimport \\\"../common/Autopetrified.sol\\\";\\nimport \\\"../common/ConversionHelpers.sol\\\";\\nimport \\\"../common/ReentrancyGuard.sol\\\";\\nimport \\\"../common/VaultRecoverable.sol\\\";\\nimport \\\"../evmscript/EVMScriptRunner.sol\\\";\\n\\n\\n// Contracts inheriting from AragonApp are, by default, immediately petrified upon deployment so\\n// that they can never be initialized.\\n// Unless overriden, this behaviour enforces those contracts to be usable only behind an AppProxy.\\n// ReentrancyGuard, EVMScriptRunner, and ACLSyntaxSugar are not directly used by this contract, but\\n// are included so that they are automatically usable by subclassing contracts\\ncontract AragonApp is AppStorage, Autopetrified, VaultRecoverable, ReentrancyGuard, EVMScriptRunner, ACLSyntaxSugar {\\n    string private constant ERROR_AUTH_FAILED = \\\"APP_AUTH_FAILED\\\";\\n\\n    modifier auth(bytes32 _role) {\\n        require(canPerform(msg.sender, _role, new uint256[](0)), ERROR_AUTH_FAILED);\\n        _;\\n    }\\n\\n    modifier authP(bytes32 _role, uint256[] _params) {\\n        require(canPerform(msg.sender, _role, _params), ERROR_AUTH_FAILED);\\n        _;\\n    }\\n\\n    /**\\n    * @dev Check whether an action can be performed by a sender for a particular role on this app\\n    * @param _sender Sender of the call\\n    * @param _role Role on this app\\n    * @param _params Permission params for the role\\n    * @return Boolean indicating whether the sender has the permissions to perform the action.\\n    *         Always returns false if the app hasn't been initialized yet.\\n    */\\n    function canPerform(address _sender, bytes32 _role, uint256[] _params) public view returns (bool) {\\n        if (!hasInitialized()) {\\n            return false;\\n        }\\n\\n        IKernel linkedKernel = kernel();\\n        if (address(linkedKernel) == address(0)) {\\n            return false;\\n        }\\n\\n        return linkedKernel.hasPermission(\\n            _sender,\\n            address(this),\\n            _role,\\n            ConversionHelpers.dangerouslyCastUintArrayToBytes(_params)\\n        );\\n    }\\n\\n    /**\\n    * @dev Get the recovery vault for the app\\n    * @return Recovery vault address for the app\\n    */\\n    function getRecoveryVault() public view returns (address) {\\n        // Funds recovery via a vault is only available when used with a kernel\\n        return kernel().getRecoveryVault(); // if kernel is not set, it will revert\\n    }\\n}\\n\",\"keccak256\":\"0xba456000d65bea8d9d82e9f1789086c3777df68fe364f8f397973b6d579f3a2a\"},\"@aragon/os/contracts/apps/UnsafeAragonApp.sol\":{\"content\":\"/*\\n * SPDX-License-Identitifer:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\nimport \\\"../common/UnstructuredStorage.sol\\\";\\nimport \\\"./AragonApp.sol\\\";\\n\\n\\n// Using UnsafeAragonApp means you'll be playing with \\ud83d\\udd25.\\n// A number of safe defaults are provided with AragonApp, to help you avoid dangerous situations\\n// and mistakes with how your contract's developed as well as how it's deployed.\\n// UnsafeAragonApp turns off these safety features to give you greater control over your contract.\\n// In particular, it allows you to:\\n//   - Use deployed base contracts as apps directly, without a proxy\\ncontract UnsafeAragonApp is AragonApp {\\n    using UnstructuredStorage for bytes32;\\n\\n    constructor() public {\\n        // Removes auto petrifying; simulates a delete at INITIALIZATION_BLOCK_POSITION\\n        INITIALIZATION_BLOCK_POSITION.setStorageUint256(0);\\n    }\\n}\\n\",\"keccak256\":\"0x98851d0df29e73568f63a0585faa504e92106e4665776a26545d609e09a7215a\"},\"@aragon/os/contracts/common/Autopetrified.sol\":{\"content\":\"/*\\n * SPDX-License-Identitifer:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\nimport \\\"./Petrifiable.sol\\\";\\n\\n\\ncontract Autopetrified is Petrifiable {\\n    constructor() public {\\n        // Immediately petrify base (non-proxy) instances of inherited contracts on deploy.\\n        // This renders them uninitializable (and unusable without a proxy).\\n        petrify();\\n    }\\n}\\n\",\"keccak256\":\"0x216e6ecbdcf45d90e8846ab2773072bd82180558a7dcf0c5425ed13b0188c5f3\"},\"@aragon/os/contracts/common/ConversionHelpers.sol\":{\"content\":\"pragma solidity ^0.4.24;\\n\\n\\nlibrary ConversionHelpers {\\n    string private constant ERROR_IMPROPER_LENGTH = \\\"CONVERSION_IMPROPER_LENGTH\\\";\\n\\n    function dangerouslyCastUintArrayToBytes(uint256[] memory _input) internal pure returns (bytes memory output) {\\n        // Force cast the uint256[] into a bytes array, by overwriting its length\\n        // Note that the bytes array doesn't need to be initialized as we immediately overwrite it\\n        // with the input and a new length. The input becomes invalid from this point forward.\\n        uint256 byteLength = _input.length * 32;\\n        assembly {\\n            output := _input\\n            mstore(output, byteLength)\\n        }\\n    }\\n\\n    function dangerouslyCastBytesToUintArray(bytes memory _input) internal pure returns (uint256[] memory output) {\\n        // Force cast the bytes array into a uint256[], by overwriting its length\\n        // Note that the uint256[] doesn't need to be initialized as we immediately overwrite it\\n        // with the input and a new length. The input becomes invalid from this point forward.\\n        uint256 intsLength = _input.length / 32;\\n        require(_input.length == intsLength * 32, ERROR_IMPROPER_LENGTH);\\n\\n        assembly {\\n            output := _input\\n            mstore(output, intsLength)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9872383d458352f5c68fa5afd1fc84ab6b172cbee33359cfa57655b8eda92416\"},\"@aragon/os/contracts/common/EtherTokenConstant.sol\":{\"content\":\"/*\\n * SPDX-License-Identitifer:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\n\\n// aragonOS and aragon-apps rely on address(0) to denote native ETH, in\\n// contracts where both tokens and ETH are accepted\\ncontract EtherTokenConstant {\\n    address internal constant ETH = address(0);\\n}\\n\",\"keccak256\":\"0xb18d16ad5127519251d9759349bf0ce1e5cfc861a776c5297b91a625c84d0363\"},\"@aragon/os/contracts/common/IVaultRecoverable.sol\":{\"content\":\"/*\\n * SPDX-License-Identitifer:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\n\\ninterface IVaultRecoverable {\\n    event RecoverToVault(address indexed vault, address indexed token, uint256 amount);\\n\\n    function transferToVault(address token) external;\\n\\n    function allowRecoverability(address token) external view returns (bool);\\n    function getRecoveryVault() external view returns (address);\\n}\\n\",\"keccak256\":\"0xd7cb66ee5d01be69a6abab04583cc86755bf63c2f1fd03b519a876162f52b323\"},\"@aragon/os/contracts/common/Initializable.sol\":{\"content\":\"/*\\n * SPDX-License-Identitifer:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\nimport \\\"./TimeHelpers.sol\\\";\\nimport \\\"./UnstructuredStorage.sol\\\";\\n\\n\\ncontract Initializable is TimeHelpers {\\n    using UnstructuredStorage for bytes32;\\n\\n    // keccak256(\\\"aragonOS.initializable.initializationBlock\\\")\\n    bytes32 internal constant INITIALIZATION_BLOCK_POSITION = 0xebb05b386a8d34882b8711d156f463690983dc47815980fb82aeeff1aa43579e;\\n\\n    string private constant ERROR_ALREADY_INITIALIZED = \\\"INIT_ALREADY_INITIALIZED\\\";\\n    string private constant ERROR_NOT_INITIALIZED = \\\"INIT_NOT_INITIALIZED\\\";\\n\\n    modifier onlyInit {\\n        require(getInitializationBlock() == 0, ERROR_ALREADY_INITIALIZED);\\n        _;\\n    }\\n\\n    modifier isInitialized {\\n        require(hasInitialized(), ERROR_NOT_INITIALIZED);\\n        _;\\n    }\\n\\n    /**\\n    * @return Block number in which the contract was initialized\\n    */\\n    function getInitializationBlock() public view returns (uint256) {\\n        return INITIALIZATION_BLOCK_POSITION.getStorageUint256();\\n    }\\n\\n    /**\\n    * @return Whether the contract has been initialized by the time of the current block\\n    */\\n    function hasInitialized() public view returns (bool) {\\n        uint256 initializationBlock = getInitializationBlock();\\n        return initializationBlock != 0 && getBlockNumber() >= initializationBlock;\\n    }\\n\\n    /**\\n    * @dev Function to be called by top level contract after initialization has finished.\\n    */\\n    function initialized() internal onlyInit {\\n        INITIALIZATION_BLOCK_POSITION.setStorageUint256(getBlockNumber());\\n    }\\n\\n    /**\\n    * @dev Function to be called by top level contract after initialization to enable the contract\\n    *      at a future block number rather than immediately.\\n    */\\n    function initializedAt(uint256 _blockNumber) internal onlyInit {\\n        INITIALIZATION_BLOCK_POSITION.setStorageUint256(_blockNumber);\\n    }\\n}\\n\",\"keccak256\":\"0xc559fdbee1c0ee18b6f2f866c28ed6eb96859b2c88f75867ca11f25ebd00b090\"},\"@aragon/os/contracts/common/IsContract.sol\":{\"content\":\"/*\\n * SPDX-License-Identitifer:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\n\\ncontract IsContract {\\n    /*\\n    * NOTE: this should NEVER be used for authentication\\n    * (see pitfalls: https://github.com/fergarrui/ethereum-security/tree/master/contracts/extcodesize).\\n    *\\n    * This is only intended to be used as a sanity check that an address is actually a contract,\\n    * RATHER THAN an address not being a contract.\\n    */\\n    function isContract(address _target) internal view returns (bool) {\\n        if (_target == address(0)) {\\n            return false;\\n        }\\n\\n        uint256 size;\\n        assembly { size := extcodesize(_target) }\\n        return size > 0;\\n    }\\n}\\n\",\"keccak256\":\"0xb76e263e3532883fe32dfe4b1447eb487a570e121c5cce01cee604dd9e44a075\"},\"@aragon/os/contracts/common/Petrifiable.sol\":{\"content\":\"/*\\n * SPDX-License-Identitifer:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\nimport \\\"./Initializable.sol\\\";\\n\\n\\ncontract Petrifiable is Initializable {\\n    // Use block UINT256_MAX (which should be never) as the initializable date\\n    uint256 internal constant PETRIFIED_BLOCK = uint256(-1);\\n\\n    function isPetrified() public view returns (bool) {\\n        return getInitializationBlock() == PETRIFIED_BLOCK;\\n    }\\n\\n    /**\\n    * @dev Function to be called by top level contract to prevent being initialized.\\n    *      Useful for freezing base contracts when they're used behind proxies.\\n    */\\n    function petrify() internal onlyInit {\\n        initializedAt(PETRIFIED_BLOCK);\\n    }\\n}\\n\",\"keccak256\":\"0xb69f9d6de8ff6f2a084aca2e0228c9008a8776482a70bcab16f46a693ec77be6\"},\"@aragon/os/contracts/common/ReentrancyGuard.sol\":{\"content\":\"/*\\n * SPDX-License-Identitifer:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\nimport \\\"../common/UnstructuredStorage.sol\\\";\\n\\n\\ncontract ReentrancyGuard {\\n    using UnstructuredStorage for bytes32;\\n\\n    /* Hardcoded constants to save gas\\n    bytes32 internal constant REENTRANCY_MUTEX_POSITION = keccak256(\\\"aragonOS.reentrancyGuard.mutex\\\");\\n    */\\n    bytes32 private constant REENTRANCY_MUTEX_POSITION = 0xe855346402235fdd185c890e68d2c4ecad599b88587635ee285bce2fda58dacb;\\n\\n    string private constant ERROR_REENTRANT = \\\"REENTRANCY_REENTRANT_CALL\\\";\\n\\n    modifier nonReentrant() {\\n        // Ensure mutex is unlocked\\n        require(!REENTRANCY_MUTEX_POSITION.getStorageBool(), ERROR_REENTRANT);\\n\\n        // Lock mutex before function call\\n        REENTRANCY_MUTEX_POSITION.setStorageBool(true);\\n\\n        // Perform function call\\n        _;\\n\\n        // Unlock mutex after function call\\n        REENTRANCY_MUTEX_POSITION.setStorageBool(false);\\n    }\\n}\\n\",\"keccak256\":\"0x2b2014de57620aedded6365e742e17b9a23492d754e48dfeefa56f7e5bcf5645\"},\"@aragon/os/contracts/common/SafeERC20.sol\":{\"content\":\"// Inspired by AdEx (https://github.com/AdExNetwork/adex-protocol-eth/blob/b9df617829661a7518ee10f4cb6c4108659dd6d5/contracts/libs/SafeERC20.sol)\\n// and 0x (https://github.com/0xProject/0x-monorepo/blob/737d1dc54d72872e24abce5a1dbe1b66d35fa21a/contracts/protocol/contracts/protocol/AssetProxy/ERC20Proxy.sol#L143)\\n\\npragma solidity ^0.4.24;\\n\\nimport \\\"../lib/token/ERC20.sol\\\";\\n\\n\\nlibrary SafeERC20 {\\n    // Before 0.5, solidity has a mismatch between `address.transfer()` and `token.transfer()`:\\n    // https://github.com/ethereum/solidity/issues/3544\\n    bytes4 private constant TRANSFER_SELECTOR = 0xa9059cbb;\\n\\n    string private constant ERROR_TOKEN_BALANCE_REVERTED = \\\"SAFE_ERC_20_BALANCE_REVERTED\\\";\\n    string private constant ERROR_TOKEN_ALLOWANCE_REVERTED = \\\"SAFE_ERC_20_ALLOWANCE_REVERTED\\\";\\n\\n    function invokeAndCheckSuccess(address _addr, bytes memory _calldata)\\n        private\\n        returns (bool)\\n    {\\n        bool ret;\\n        assembly {\\n            let ptr := mload(0x40)    // free memory pointer\\n\\n            let success := call(\\n                gas,                  // forward all gas\\n                _addr,                // address\\n                0,                    // no value\\n                add(_calldata, 0x20), // calldata start\\n                mload(_calldata),     // calldata length\\n                ptr,                  // write output over free memory\\n                0x20                  // uint256 return\\n            )\\n\\n            if gt(success, 0) {\\n                // Check number of bytes returned from last function call\\n                switch returndatasize\\n\\n                // No bytes returned: assume success\\n                case 0 {\\n                    ret := 1\\n                }\\n\\n                // 32 bytes returned: check if non-zero\\n                case 0x20 {\\n                    // Only return success if returned data was true\\n                    // Already have output in ptr\\n                    ret := eq(mload(ptr), 1)\\n                }\\n\\n                // Not sure what was returned: don't mark as success\\n                default { }\\n            }\\n        }\\n        return ret;\\n    }\\n\\n    function staticInvoke(address _addr, bytes memory _calldata)\\n        private\\n        view\\n        returns (bool, uint256)\\n    {\\n        bool success;\\n        uint256 ret;\\n        assembly {\\n            let ptr := mload(0x40)    // free memory pointer\\n\\n            success := staticcall(\\n                gas,                  // forward all gas\\n                _addr,                // address\\n                add(_calldata, 0x20), // calldata start\\n                mload(_calldata),     // calldata length\\n                ptr,                  // write output over free memory\\n                0x20                  // uint256 return\\n            )\\n\\n            if gt(success, 0) {\\n                ret := mload(ptr)\\n            }\\n        }\\n        return (success, ret);\\n    }\\n\\n    /**\\n    * @dev Same as a standards-compliant ERC20.transfer() that never reverts (returns false).\\n    *      Note that this makes an external call to the token.\\n    */\\n    function safeTransfer(ERC20 _token, address _to, uint256 _amount) internal returns (bool) {\\n        bytes memory transferCallData = abi.encodeWithSelector(\\n            TRANSFER_SELECTOR,\\n            _to,\\n            _amount\\n        );\\n        return invokeAndCheckSuccess(_token, transferCallData);\\n    }\\n\\n    /**\\n    * @dev Same as a standards-compliant ERC20.transferFrom() that never reverts (returns false).\\n    *      Note that this makes an external call to the token.\\n    */\\n    function safeTransferFrom(ERC20 _token, address _from, address _to, uint256 _amount) internal returns (bool) {\\n        bytes memory transferFromCallData = abi.encodeWithSelector(\\n            _token.transferFrom.selector,\\n            _from,\\n            _to,\\n            _amount\\n        );\\n        return invokeAndCheckSuccess(_token, transferFromCallData);\\n    }\\n\\n    /**\\n    * @dev Same as a standards-compliant ERC20.approve() that never reverts (returns false).\\n    *      Note that this makes an external call to the token.\\n    */\\n    function safeApprove(ERC20 _token, address _spender, uint256 _amount) internal returns (bool) {\\n        bytes memory approveCallData = abi.encodeWithSelector(\\n            _token.approve.selector,\\n            _spender,\\n            _amount\\n        );\\n        return invokeAndCheckSuccess(_token, approveCallData);\\n    }\\n\\n    /**\\n    * @dev Static call into ERC20.balanceOf().\\n    * Reverts if the call fails for some reason (should never fail).\\n    */\\n    function staticBalanceOf(ERC20 _token, address _owner) internal view returns (uint256) {\\n        bytes memory balanceOfCallData = abi.encodeWithSelector(\\n            _token.balanceOf.selector,\\n            _owner\\n        );\\n\\n        (bool success, uint256 tokenBalance) = staticInvoke(_token, balanceOfCallData);\\n        require(success, ERROR_TOKEN_BALANCE_REVERTED);\\n\\n        return tokenBalance;\\n    }\\n\\n    /**\\n    * @dev Static call into ERC20.allowance().\\n    * Reverts if the call fails for some reason (should never fail).\\n    */\\n    function staticAllowance(ERC20 _token, address _owner, address _spender) internal view returns (uint256) {\\n        bytes memory allowanceCallData = abi.encodeWithSelector(\\n            _token.allowance.selector,\\n            _owner,\\n            _spender\\n        );\\n\\n        (bool success, uint256 allowance) = staticInvoke(_token, allowanceCallData);\\n        require(success, ERROR_TOKEN_ALLOWANCE_REVERTED);\\n\\n        return allowance;\\n    }\\n}\\n\",\"keccak256\":\"0xc0cb682f6cd36e8414a9e6b3b0aca7280f500e2acbeeaa19282d69b7f3fd7a1c\"},\"@aragon/os/contracts/common/TimeHelpers.sol\":{\"content\":\"/*\\n * SPDX-License-Identitifer:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\nimport \\\"./Uint256Helpers.sol\\\";\\n\\n\\ncontract TimeHelpers {\\n    using Uint256Helpers for uint256;\\n\\n    /**\\n    * @dev Returns the current block number.\\n    *      Using a function rather than `block.number` allows us to easily mock the block number in\\n    *      tests.\\n    */\\n    function getBlockNumber() internal view returns (uint256) {\\n        return block.number;\\n    }\\n\\n    /**\\n    * @dev Returns the current block number, converted to uint64.\\n    *      Using a function rather than `block.number` allows us to easily mock the block number in\\n    *      tests.\\n    */\\n    function getBlockNumber64() internal view returns (uint64) {\\n        return getBlockNumber().toUint64();\\n    }\\n\\n    /**\\n    * @dev Returns the current timestamp.\\n    *      Using a function rather than `block.timestamp` allows us to easily mock it in\\n    *      tests.\\n    */\\n    function getTimestamp() internal view returns (uint256) {\\n        return block.timestamp; // solium-disable-line security/no-block-members\\n    }\\n\\n    /**\\n    * @dev Returns the current timestamp, converted to uint64.\\n    *      Using a function rather than `block.timestamp` allows us to easily mock it in\\n    *      tests.\\n    */\\n    function getTimestamp64() internal view returns (uint64) {\\n        return getTimestamp().toUint64();\\n    }\\n}\\n\",\"keccak256\":\"0x95b785dc4319f6ce5255c9adf5e68a469a0f837f7b02e01b6bc974b4921d4024\"},\"@aragon/os/contracts/common/Uint256Helpers.sol\":{\"content\":\"pragma solidity ^0.4.24;\\n\\n\\nlibrary Uint256Helpers {\\n    uint256 private constant MAX_UINT64 = uint64(-1);\\n\\n    string private constant ERROR_NUMBER_TOO_BIG = \\\"UINT64_NUMBER_TOO_BIG\\\";\\n\\n    function toUint64(uint256 a) internal pure returns (uint64) {\\n        require(a <= MAX_UINT64, ERROR_NUMBER_TOO_BIG);\\n        return uint64(a);\\n    }\\n}\\n\",\"keccak256\":\"0x83033025a3f4402be3b7bcc9a23ce96ae4fadc7f251da8f139d73a13a3400b0c\"},\"@aragon/os/contracts/common/UnstructuredStorage.sol\":{\"content\":\"/*\\n * SPDX-License-Identitifer:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\n\\nlibrary UnstructuredStorage {\\n    function getStorageBool(bytes32 position) internal view returns (bool data) {\\n        assembly { data := sload(position) }\\n    }\\n\\n    function getStorageAddress(bytes32 position) internal view returns (address data) {\\n        assembly { data := sload(position) }\\n    }\\n\\n    function getStorageBytes32(bytes32 position) internal view returns (bytes32 data) {\\n        assembly { data := sload(position) }\\n    }\\n\\n    function getStorageUint256(bytes32 position) internal view returns (uint256 data) {\\n        assembly { data := sload(position) }\\n    }\\n\\n    function setStorageBool(bytes32 position, bool data) internal {\\n        assembly { sstore(position, data) }\\n    }\\n\\n    function setStorageAddress(bytes32 position, address data) internal {\\n        assembly { sstore(position, data) }\\n    }\\n\\n    function setStorageBytes32(bytes32 position, bytes32 data) internal {\\n        assembly { sstore(position, data) }\\n    }\\n\\n    function setStorageUint256(bytes32 position, uint256 data) internal {\\n        assembly { sstore(position, data) }\\n    }\\n}\\n\",\"keccak256\":\"0xe0d627fc7a7716409389f34cfe49366ba7871309d3a73262ec9608ef73e47591\"},\"@aragon/os/contracts/common/VaultRecoverable.sol\":{\"content\":\"/*\\n * SPDX-License-Identitifer:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\nimport \\\"../lib/token/ERC20.sol\\\";\\nimport \\\"./EtherTokenConstant.sol\\\";\\nimport \\\"./IsContract.sol\\\";\\nimport \\\"./IVaultRecoverable.sol\\\";\\nimport \\\"./SafeERC20.sol\\\";\\n\\n\\ncontract VaultRecoverable is IVaultRecoverable, EtherTokenConstant, IsContract {\\n    using SafeERC20 for ERC20;\\n\\n    string private constant ERROR_DISALLOWED = \\\"RECOVER_DISALLOWED\\\";\\n    string private constant ERROR_VAULT_NOT_CONTRACT = \\\"RECOVER_VAULT_NOT_CONTRACT\\\";\\n    string private constant ERROR_TOKEN_TRANSFER_FAILED = \\\"RECOVER_TOKEN_TRANSFER_FAILED\\\";\\n\\n    /**\\n     * @notice Send funds to recovery Vault. This contract should never receive funds,\\n     *         but in case it does, this function allows one to recover them.\\n     * @param _token Token balance to be sent to recovery vault.\\n     */\\n    function transferToVault(address _token) external {\\n        require(allowRecoverability(_token), ERROR_DISALLOWED);\\n        address vault = getRecoveryVault();\\n        require(isContract(vault), ERROR_VAULT_NOT_CONTRACT);\\n\\n        uint256 balance;\\n        if (_token == ETH) {\\n            balance = address(this).balance;\\n            vault.transfer(balance);\\n        } else {\\n            ERC20 token = ERC20(_token);\\n            balance = token.staticBalanceOf(this);\\n            require(token.safeTransfer(vault, balance), ERROR_TOKEN_TRANSFER_FAILED);\\n        }\\n\\n        emit RecoverToVault(vault, _token, balance);\\n    }\\n\\n    /**\\n    * @dev By default deriving from AragonApp makes it recoverable\\n    * @param token Token address that would be recovered\\n    * @return bool whether the app allows the recovery\\n    */\\n    function allowRecoverability(address token) public view returns (bool) {\\n        return true;\\n    }\\n\\n    // Cast non-implemented interface to be public so we can use it internally\\n    function getRecoveryVault() public view returns (address);\\n}\\n\",\"keccak256\":\"0x4f4de2c27ea7df731ad7d9babc37965a805282fed16b422f46a35d9d2ef931a1\"},\"@aragon/os/contracts/evmscript/EVMScriptRunner.sol\":{\"content\":\"/*\\n * SPDX-License-Identitifer:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\nimport \\\"./IEVMScriptExecutor.sol\\\";\\nimport \\\"./IEVMScriptRegistry.sol\\\";\\n\\nimport \\\"../apps/AppStorage.sol\\\";\\nimport \\\"../kernel/KernelConstants.sol\\\";\\nimport \\\"../common/Initializable.sol\\\";\\n\\n\\ncontract EVMScriptRunner is AppStorage, Initializable, EVMScriptRegistryConstants, KernelNamespaceConstants {\\n    string private constant ERROR_EXECUTOR_UNAVAILABLE = \\\"EVMRUN_EXECUTOR_UNAVAILABLE\\\";\\n    string private constant ERROR_PROTECTED_STATE_MODIFIED = \\\"EVMRUN_PROTECTED_STATE_MODIFIED\\\";\\n\\n    /* This is manually crafted in assembly\\n    string private constant ERROR_EXECUTOR_INVALID_RETURN = \\\"EVMRUN_EXECUTOR_INVALID_RETURN\\\";\\n    */\\n\\n    event ScriptResult(address indexed executor, bytes script, bytes input, bytes returnData);\\n\\n    function getEVMScriptExecutor(bytes _script) public view returns (IEVMScriptExecutor) {\\n        return IEVMScriptExecutor(getEVMScriptRegistry().getScriptExecutor(_script));\\n    }\\n\\n    function getEVMScriptRegistry() public view returns (IEVMScriptRegistry) {\\n        address registryAddr = kernel().getApp(KERNEL_APP_ADDR_NAMESPACE, EVMSCRIPT_REGISTRY_APP_ID);\\n        return IEVMScriptRegistry(registryAddr);\\n    }\\n\\n    function runScript(bytes _script, bytes _input, address[] _blacklist)\\n        internal\\n        isInitialized\\n        protectState\\n        returns (bytes)\\n    {\\n        IEVMScriptExecutor executor = getEVMScriptExecutor(_script);\\n        require(address(executor) != address(0), ERROR_EXECUTOR_UNAVAILABLE);\\n\\n        bytes4 sig = executor.execScript.selector;\\n        bytes memory data = abi.encodeWithSelector(sig, _script, _input, _blacklist);\\n\\n        bytes memory output;\\n        assembly {\\n            let success := delegatecall(\\n                gas,                // forward all gas\\n                executor,           // address\\n                add(data, 0x20),    // calldata start\\n                mload(data),        // calldata length\\n                0,                  // don't write output (we'll handle this ourselves)\\n                0                   // don't write output\\n            )\\n\\n            output := mload(0x40) // free mem ptr get\\n\\n            switch success\\n            case 0 {\\n                // If the call errored, forward its full error data\\n                returndatacopy(output, 0, returndatasize)\\n                revert(output, returndatasize)\\n            }\\n            default {\\n                switch gt(returndatasize, 0x3f)\\n                case 0 {\\n                    // Need at least 0x40 bytes returned for properly ABI-encoded bytes values,\\n                    // revert with \\\"EVMRUN_EXECUTOR_INVALID_RETURN\\\"\\n                    // See remix: doing a `revert(\\\"EVMRUN_EXECUTOR_INVALID_RETURN\\\")` always results in\\n                    // this memory layout\\n                    mstore(output, 0x08c379a000000000000000000000000000000000000000000000000000000000)         // error identifier\\n                    mstore(add(output, 0x04), 0x0000000000000000000000000000000000000000000000000000000000000020) // starting offset\\n                    mstore(add(output, 0x24), 0x000000000000000000000000000000000000000000000000000000000000001e) // reason length\\n                    mstore(add(output, 0x44), 0x45564d52554e5f4558454355544f525f494e56414c49445f52455455524e0000) // reason\\n\\n                    revert(output, 100) // 100 = 4 + 3 * 32 (error identifier + 3 words for the ABI encoded error)\\n                }\\n                default {\\n                    // Copy result\\n                    //\\n                    // Needs to perform an ABI decode for the expected `bytes` return type of\\n                    // `executor.execScript()` as solidity will automatically ABI encode the returned bytes as:\\n                    //    [ position of the first dynamic length return value = 0x20 (32 bytes) ]\\n                    //    [ output length (32 bytes) ]\\n                    //    [ output content (N bytes) ]\\n                    //\\n                    // Perform the ABI decode by ignoring the first 32 bytes of the return data\\n                    let copysize := sub(returndatasize, 0x20)\\n                    returndatacopy(output, 0x20, copysize)\\n\\n                    mstore(0x40, add(output, copysize)) // free mem ptr set\\n                }\\n            }\\n        }\\n\\n        emit ScriptResult(address(executor), _script, _input, output);\\n\\n        return output;\\n    }\\n\\n    modifier protectState {\\n        address preKernel = address(kernel());\\n        bytes32 preAppId = appId();\\n        _; // exec\\n        require(address(kernel()) == preKernel, ERROR_PROTECTED_STATE_MODIFIED);\\n        require(appId() == preAppId, ERROR_PROTECTED_STATE_MODIFIED);\\n    }\\n}\\n\",\"keccak256\":\"0xcb6b5f7d2610321882cdc86819f1a51341c33b510fff7c60936ac7d7a015d7be\"},\"@aragon/os/contracts/evmscript/IEVMScriptExecutor.sol\":{\"content\":\"/*\\n * SPDX-License-Identitifer:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\n\\ninterface IEVMScriptExecutor {\\n    function execScript(bytes script, bytes input, address[] blacklist) external returns (bytes);\\n    function executorType() external pure returns (bytes32);\\n}\\n\",\"keccak256\":\"0x9cab64cd2f10148d4e20433ecd11679e69be1fbde112892c48db94f92e48c571\"},\"@aragon/os/contracts/evmscript/IEVMScriptRegistry.sol\":{\"content\":\"/*\\n * SPDX-License-Identitifer:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\nimport \\\"./IEVMScriptExecutor.sol\\\";\\n\\n\\ncontract EVMScriptRegistryConstants {\\n    /* Hardcoded constants to save gas\\n    bytes32 internal constant EVMSCRIPT_REGISTRY_APP_ID = apmNamehash(\\\"evmreg\\\");\\n    */\\n    bytes32 internal constant EVMSCRIPT_REGISTRY_APP_ID = 0xddbcfd564f642ab5627cf68b9b7d374fb4f8a36e941a75d89c87998cef03bd61;\\n}\\n\\n\\ninterface IEVMScriptRegistry {\\n    function addScriptExecutor(IEVMScriptExecutor executor) external returns (uint id);\\n    function disableScriptExecutor(uint256 executorId) external;\\n\\n    // TODO: this should be external\\n    // See https://github.com/ethereum/solidity/issues/4832\\n    function getScriptExecutor(bytes script) public view returns (IEVMScriptExecutor);\\n}\\n\",\"keccak256\":\"0x00d98507ec160cb7cc814cc9bdebd01a414353636d6045720fe6d1592277694b\"},\"@aragon/os/contracts/kernel/IKernel.sol\":{\"content\":\"/*\\n * SPDX-License-Identitifer:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\nimport \\\"../acl/IACL.sol\\\";\\nimport \\\"../common/IVaultRecoverable.sol\\\";\\n\\n\\ninterface IKernelEvents {\\n    event SetApp(bytes32 indexed namespace, bytes32 indexed appId, address app);\\n}\\n\\n\\n// This should be an interface, but interfaces can't inherit yet :(\\ncontract IKernel is IKernelEvents, IVaultRecoverable {\\n    function acl() public view returns (IACL);\\n    function hasPermission(address who, address where, bytes32 what, bytes how) public view returns (bool);\\n\\n    function setApp(bytes32 namespace, bytes32 appId, address app) public;\\n    function getApp(bytes32 namespace, bytes32 appId) public view returns (address);\\n}\\n\",\"keccak256\":\"0xd02b98282ccd271b0caa86f2c249986f1619dcf41811f5dadce520b32610b68e\"},\"@aragon/os/contracts/kernel/KernelConstants.sol\":{\"content\":\"/*\\n * SPDX-License-Identitifer:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\n\\ncontract KernelAppIds {\\n    /* Hardcoded constants to save gas\\n    bytes32 internal constant KERNEL_CORE_APP_ID = apmNamehash(\\\"kernel\\\");\\n    bytes32 internal constant KERNEL_DEFAULT_ACL_APP_ID = apmNamehash(\\\"acl\\\");\\n    bytes32 internal constant KERNEL_DEFAULT_VAULT_APP_ID = apmNamehash(\\\"vault\\\");\\n    */\\n    bytes32 internal constant KERNEL_CORE_APP_ID = 0x3b4bf6bf3ad5000ecf0f989d5befde585c6860fea3e574a4fab4c49d1c177d9c;\\n    bytes32 internal constant KERNEL_DEFAULT_ACL_APP_ID = 0xe3262375f45a6e2026b7e7b18c2b807434f2508fe1a2a3dfb493c7df8f4aad6a;\\n    bytes32 internal constant KERNEL_DEFAULT_VAULT_APP_ID = 0x7e852e0fcfce6551c13800f1e7476f982525c2b5277ba14b24339c68416336d1;\\n}\\n\\n\\ncontract KernelNamespaceConstants {\\n    /* Hardcoded constants to save gas\\n    bytes32 internal constant KERNEL_CORE_NAMESPACE = keccak256(\\\"core\\\");\\n    bytes32 internal constant KERNEL_APP_BASES_NAMESPACE = keccak256(\\\"base\\\");\\n    bytes32 internal constant KERNEL_APP_ADDR_NAMESPACE = keccak256(\\\"app\\\");\\n    */\\n    bytes32 internal constant KERNEL_CORE_NAMESPACE = 0xc681a85306374a5ab27f0bbc385296a54bcd314a1948b6cf61c4ea1bc44bb9f8;\\n    bytes32 internal constant KERNEL_APP_BASES_NAMESPACE = 0xf1f3eb40f5bc1ad1344716ced8b8a0431d840b5783aea1fd01786bc26f35ac0f;\\n    bytes32 internal constant KERNEL_APP_ADDR_NAMESPACE = 0xd6f028ca0e8edb4a8c9757ca4fdccab25fa1e0317da1188108f7d2dee14902fb;\\n}\\n\",\"keccak256\":\"0x95e46be2becfb4c8952880909cd32adf5dcfa8c2e0fdf4ae054bbf83ef7f53cd\"},\"@aragon/os/contracts/lib/math/SafeMath.sol\":{\"content\":\"// See https://github.com/OpenZeppelin/openzeppelin-solidity/blob/d51e38758e1d985661534534d5c61e27bece5042/contracts/math/SafeMath.sol\\n// Adapted to use pragma ^0.4.24 and satisfy our linter rules\\n\\npragma solidity ^0.4.24;\\n\\n\\n/**\\n * @title SafeMath\\n * @dev Math operations with safety checks that revert on error\\n */\\nlibrary SafeMath {\\n    string private constant ERROR_ADD_OVERFLOW = \\\"MATH_ADD_OVERFLOW\\\";\\n    string private constant ERROR_SUB_UNDERFLOW = \\\"MATH_SUB_UNDERFLOW\\\";\\n    string private constant ERROR_MUL_OVERFLOW = \\\"MATH_MUL_OVERFLOW\\\";\\n    string private constant ERROR_DIV_ZERO = \\\"MATH_DIV_ZERO\\\";\\n\\n    /**\\n    * @dev Multiplies two numbers, reverts on overflow.\\n    */\\n    function mul(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\\n        if (_a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = _a * _b;\\n        require(c / _a == _b, ERROR_MUL_OVERFLOW);\\n\\n        return c;\\n    }\\n\\n    /**\\n    * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\\n    */\\n    function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n        require(_b > 0, ERROR_DIV_ZERO); // Solidity only automatically asserts when dividing by 0\\n        uint256 c = _a / _b;\\n        // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n    * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\\n    */\\n    function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n        require(_b <= _a, ERROR_SUB_UNDERFLOW);\\n        uint256 c = _a - _b;\\n\\n        return c;\\n    }\\n\\n    /**\\n    * @dev Adds two numbers, reverts on overflow.\\n    */\\n    function add(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n        uint256 c = _a + _b;\\n        require(c >= _a, ERROR_ADD_OVERFLOW);\\n\\n        return c;\\n    }\\n\\n    /**\\n    * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\\n    * reverts when dividing by zero.\\n    */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b != 0, ERROR_DIV_ZERO);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x2e11c8dcead82c452ef452f4dbced40e20ae105fa4145d920dac6e077b31d846\"},\"@aragon/os/contracts/lib/math/SafeMath64.sol\":{\"content\":\"// See https://github.com/OpenZeppelin/openzeppelin-solidity/blob/d51e38758e1d985661534534d5c61e27bece5042/contracts/math/SafeMath.sol\\n// Adapted for uint64, pragma ^0.4.24, and satisfying our linter rules\\n// Also optimized the mul() implementation, see https://github.com/aragon/aragonOS/pull/417\\n\\npragma solidity ^0.4.24;\\n\\n\\n/**\\n * @title SafeMath64\\n * @dev Math operations for uint64 with safety checks that revert on error\\n */\\nlibrary SafeMath64 {\\n    string private constant ERROR_ADD_OVERFLOW = \\\"MATH64_ADD_OVERFLOW\\\";\\n    string private constant ERROR_SUB_UNDERFLOW = \\\"MATH64_SUB_UNDERFLOW\\\";\\n    string private constant ERROR_MUL_OVERFLOW = \\\"MATH64_MUL_OVERFLOW\\\";\\n    string private constant ERROR_DIV_ZERO = \\\"MATH64_DIV_ZERO\\\";\\n\\n    /**\\n    * @dev Multiplies two numbers, reverts on overflow.\\n    */\\n    function mul(uint64 _a, uint64 _b) internal pure returns (uint64) {\\n        uint256 c = uint256(_a) * uint256(_b);\\n        require(c < 0x010000000000000000, ERROR_MUL_OVERFLOW); // 2**64 (less gas this way)\\n\\n        return uint64(c);\\n    }\\n\\n    /**\\n    * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\\n    */\\n    function div(uint64 _a, uint64 _b) internal pure returns (uint64) {\\n        require(_b > 0, ERROR_DIV_ZERO); // Solidity only automatically asserts when dividing by 0\\n        uint64 c = _a / _b;\\n        // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n    * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\\n    */\\n    function sub(uint64 _a, uint64 _b) internal pure returns (uint64) {\\n        require(_b <= _a, ERROR_SUB_UNDERFLOW);\\n        uint64 c = _a - _b;\\n\\n        return c;\\n    }\\n\\n    /**\\n    * @dev Adds two numbers, reverts on overflow.\\n    */\\n    function add(uint64 _a, uint64 _b) internal pure returns (uint64) {\\n        uint64 c = _a + _b;\\n        require(c >= _a, ERROR_ADD_OVERFLOW);\\n\\n        return c;\\n    }\\n\\n    /**\\n    * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\\n    * reverts when dividing by zero.\\n    */\\n    function mod(uint64 a, uint64 b) internal pure returns (uint64) {\\n        require(b != 0, ERROR_DIV_ZERO);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x34f18573e7b2180645c67faaff60ebc713ab22c697606d3b3ce4fe0e745955f4\"},\"@aragon/os/contracts/lib/token/ERC20.sol\":{\"content\":\"// See https://github.com/OpenZeppelin/openzeppelin-solidity/blob/a9f910d34f0ab33a1ae5e714f69f9596a02b4d91/contracts/token/ERC20/ERC20.sol\\n\\npragma solidity ^0.4.24;\\n\\n\\n/**\\n * @title ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ncontract ERC20 {\\n    function totalSupply() public view returns (uint256);\\n\\n    function balanceOf(address _who) public view returns (uint256);\\n\\n    function allowance(address _owner, address _spender)\\n        public view returns (uint256);\\n\\n    function transfer(address _to, uint256 _value) public returns (bool);\\n\\n    function approve(address _spender, uint256 _value)\\n        public returns (bool);\\n\\n    function transferFrom(address _from, address _to, uint256 _value)\\n        public returns (bool);\\n\\n    event Transfer(\\n        address indexed from,\\n        address indexed to,\\n        uint256 value\\n    );\\n\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n}\\n\",\"keccak256\":\"0xa2e319fde92f9e70912f09bf6e99bbf8b9b798961d54ffcba59d347d37bde1b7\"},\"contracts/BalanceRedirectPresale.sol\":{\"content\":\"pragma solidity 0.4.24;\\n\\nimport \\\"@aragon/os/contracts/apps/UnsafeAragonApp.sol\\\";\\nimport \\\"@aragon/os/contracts/common/IsContract.sol\\\";\\nimport \\\"@aragon/os/contracts/common/SafeERC20.sol\\\";\\nimport \\\"@aragon/os/contracts/lib/math/SafeMath.sol\\\";\\nimport \\\"@aragon/os/contracts/lib/math/SafeMath64.sol\\\";\\nimport \\\"@aragon/os/contracts/lib/token/ERC20.sol\\\";\\nimport \\\"./ContinuousToken.sol\\\";\\nimport \\\"@ablack/fundraising-shared-interfaces/contracts/IAragonFundraisingController.sol\\\";\\n\\nimport \\\"@ablack/fundraising-shared-interfaces/contracts/IPresale.sol\\\";\\n\\nimport \\\"./lib/IMarketMaker.sol\\\";\\n\\ncontract BalanceRedirectPresale is IsContract, UnsafeAragonApp, IPresale {\\n    using SafeERC20 for ERC20;\\n    using SafeMath for uint256;\\n    using SafeMath64 for uint64;\\n\\n    /**\\n    Hardcoded constants to save gas\\n    bytes32 public constant OPEN_ROLE                   = keccak256(\\\"OPEN_ROLE\\\");\\n    bytes32 public constant REDUCE_BENEFICIARY_PCT_ROLE = keccak256(\\\"REDUCE_BENEFICIARY_PCT_ROLE\\\");\\n    bytes32 public constant CONTRIBUTE_ROLE             = keccak256(\\\"CONTRIBUTE_ROLE\\\");\\n    */\\n    bytes32 public constant OPEN_ROLE = 0xefa06053e2ca99a43c97c4a4f3d8a394ee3323a8ff237e625fba09fe30ceb0a4;\\n    bytes32 public constant REDUCE_BENEFICIARY_PCT_ROLE =\\n        0x2738f3f227143b7fbb9720e93e2e5b36d7a15966e130b49f1582c6432d949aa9;\\n    bytes32 public constant CONTRIBUTE_ROLE = 0x9ccaca4edf2127f20c425fdd86af1ba178b9e5bee280cd70d88ac5f6874c4f07;\\n\\n    uint256 public constant PPM = 1000000; // 0% = 0 * 10 ** 4; 1% = 1 * 10 ** 4; 100% = 100 * 10 ** 4\\n\\n    string private constant ERROR_CONTRACT_IS_EOA = \\\"PRESALE_CONTRACT_IS_EOA\\\";\\n    string private constant ERROR_INVALID_BENEFICIARY = \\\"PRESALE_INVALID_BENEFICIARY\\\";\\n    string private constant ERROR_INVALID_CONTRIBUTE_TOKEN = \\\"PRESALE_INVALID_CONTRIBUTE_TOKEN\\\";\\n    string private constant ERROR_INVALID_EXCHANGE_RATE = \\\"PRESALE_INVALID_EXCHANGE_RATE\\\";\\n    string private constant ERROR_INVALID_OPEN_DATE = \\\"PRESALE_INVALID_OPEN_DATE\\\";\\n    string private constant ERROR_TIME_PERIOD_ZERO = \\\"PRESALE_TIME_PERIOD_ZERO\\\";\\n    string private constant ERROR_INVALID_TIME_PERIOD = \\\"PRESALE_INVALID_TIME_PERIOD\\\";\\n    string private constant ERROR_INVALID_PCT = \\\"PRESALE_INVALID_PCT\\\";\\n    string private constant ERROR_INVALID_STATE = \\\"PRESALE_INVALID_STATE\\\";\\n    string private constant ERROR_INVALID_CONTRIBUTE_VALUE = \\\"PRESALE_INVALID_CONTRIBUTE_VALUE\\\";\\n    string private constant ERROR_INSUFFICIENT_BALANCE = \\\"PRESALE_INSUFFICIENT_BALANCE\\\";\\n    string private constant ERROR_INSUFFICIENT_ALLOWANCE = \\\"PRESALE_INSUFFICIENT_ALLOWANCE\\\";\\n    string private constant ERROR_TOKEN_TRANSFER_REVERTED = \\\"PRESALE_TOKEN_TRANSFER_REVERTED\\\";\\n    string private constant ERROR_NO_REFUNDS = \\\"PRESALE_NO_REFUNDS\\\";\\n\\n    enum State {\\n        Pending, // presale is idle and pending to be started\\n        Funding, // presale has started and contributors can purchase tokens\\n        Finished, // presale period is over, but it hasn't been closed yet\\n        Closed // presale has been closed and trading has been open\\n    }\\n\\n    IAragonFundraisingController public controller;\\n    IMarketMaker public marketMaker;\\n    ContinuousToken public bondedToken;\\n    address public reserve;\\n    address public beneficiary;\\n    ERC20 internal erc20ContribToken;\\n\\n    uint64 public period;\\n    uint256 public exchangeRate;\\n    uint256 public mintingForBeneficiaryPct;\\n    uint64 public openDate;\\n\\n    bool public isClosed;\\n    uint256 public totalRaised;\\n    uint256 public totalSold;\\n\\n    //total contributors\\n    uint256 public contributorsCounter;\\n    //total amount of tokens sent by each contributor\\n    mapping(address => uint256) public contributors;\\n\\n    event SetOpenDate(uint64 date);\\n    event ReduceBeneficiatyPct(uint256 pct);\\n    event Close();\\n    event Contribute(address indexed contributor, uint256 value, uint256 amount);\\n\\n    /***** external function *****/\\n\\n    /**\\n     * @notice Initialize presale\\n     * @param _controller               The address of the controller contract\\n     * @param _marketMaker              The address of the market maker contract\\n     * @param _bondedToken              The address of the bonded token\\n     * @param _reserve                  The address of the reserve [pool] contract\\n     * @param _beneficiary              The address of the beneficiary [to whom a percentage of the raised funds is be to be sent]\\n     * @param _erc20ContribToken        The address of the token to be used to contribute\\n     * @param _period                   The period within which to accept contribution for that presale\\n     * @param _exchangeRate             The exchangeRate [= 1/price] at which [bonded] tokens are to be purchased for that presale [in PPM]\\n     * @param _openDate                 The date upon which that presale is to be open [ignored if 0]\\n     */\\n    function initialize(\\n        IKernel _kernel,\\n        IAragonFundraisingController _controller,\\n        IMarketMaker _marketMaker,\\n        ContinuousToken _bondedToken,\\n        address _reserve,\\n        address _beneficiary,\\n        ERC20 _erc20ContribToken,\\n        uint64 _period,\\n        uint256 _exchangeRate,\\n        uint256 _mintingForBeneficiaryPct,\\n        uint64 _openDate\\n    ) external onlyInit {\\n        require(isContract(_controller), ERROR_CONTRACT_IS_EOA);\\n        require(isContract(_marketMaker), ERROR_CONTRACT_IS_EOA);\\n        require(isContract(_bondedToken), ERROR_CONTRACT_IS_EOA);\\n        require(isContract(_reserve), ERROR_CONTRACT_IS_EOA);\\n        require(_beneficiary != address(0), ERROR_INVALID_BENEFICIARY);\\n        require(isContract(_erc20ContribToken), ERROR_INVALID_CONTRIBUTE_TOKEN);\\n        require(_exchangeRate > 0, ERROR_INVALID_EXCHANGE_RATE);\\n        require(_mintingForBeneficiaryPct < PPM, ERROR_INVALID_PCT);\\n\\n        initialized();\\n\\n        controller = _controller;\\n        marketMaker = _marketMaker;\\n        bondedToken = _bondedToken;\\n        reserve = _reserve;\\n        beneficiary = _beneficiary;\\n        erc20ContribToken = _erc20ContribToken;\\n        exchangeRate = _exchangeRate;\\n        mintingForBeneficiaryPct = _mintingForBeneficiaryPct;\\n\\n        setKernel(_kernel);\\n\\n        _setPeriod(_period);\\n\\n        if (_openDate != 0) {\\n            _setOpenDate(_openDate);\\n        }\\n    }\\n\\n    /**\\n     * @notice Set presale open date\\n     * @param _date New date to be set\\n     */\\n    function setOpenDate(uint64 _date) external auth(OPEN_ROLE) {\\n        _setOpenDate(_date);\\n    }\\n\\n    /**\\n     * @notice Set presale duration\\n     * @param _period New duration to be set\\n     */\\n    function setPeriod(uint64 _period) external auth(OPEN_ROLE) {\\n        _setPeriod(_period);\\n    }\\n\\n    /**\\n     * @notice Reduce pre-minting for beneficiary percentage to `_pct`\\n     * @param _pct New percentage to be set\\n     */\\n    function reduceBeneficiaryPct(uint64 _pct) external auth(REDUCE_BENEFICIARY_PCT_ROLE) {\\n        require(_pct < mintingForBeneficiaryPct, ERROR_INVALID_PCT);\\n\\n        mintingForBeneficiaryPct = _pct;\\n\\n        emit ReduceBeneficiatyPct(_pct);\\n    }\\n\\n    /**\\n     * @notice Open presale [enabling users to contribute]\\n     */\\n    function open() external auth(OPEN_ROLE) {\\n        _setOpenDate(getTimestamp64());\\n    }\\n\\n    /**\\n     * @notice Contribute to the presale up to `@tokenAmount(self.erc20ContribToken(): address, _value)`\\n     * @param _contributor The address of the contributor\\n     * @param _value       The amount of contribution token to be spent\\n     */\\n    function contribute(address _contributor, uint256 _value) external payable nonReentrant auth(CONTRIBUTE_ROLE) {\\n        require(state() == State.Funding, ERROR_INVALID_STATE);\\n        require(msg.value == 0, ERROR_INVALID_CONTRIBUTE_VALUE);\\n        require(_value > 0, ERROR_INVALID_CONTRIBUTE_VALUE);\\n        require(erc20ContribToken.balanceOf(_contributor) >= _value, ERROR_INSUFFICIENT_BALANCE);\\n        require(erc20ContribToken.allowance(_contributor, address(this)) >= _value, ERROR_INSUFFICIENT_ALLOWANCE);\\n\\n        // (contributor) ~~~> contribution tokens ~~~> (presale)\\n        _transfer(erc20ContribToken, _contributor, address(this), _value);\\n\\n        // (mint \\u2728) ~~~> project tokens ~~~> (contributor)\\n        uint256 tokensToSell = contributionToTokens(_value);\\n        totalRaised = totalRaised.add(_value);\\n        totalSold = totalSold.add(tokensToSell);\\n        bondedToken.mint(_contributor, tokensToSell);\\n        if (contributors[_contributor] == 0) {\\n            contributorsCounter = contributorsCounter.add(1);\\n        }\\n        contributors[_contributor] = contributors[_contributor].add(_value);\\n\\n        emit Contribute(_contributor, _value, tokensToSell);\\n    }\\n\\n    /**\\n     * @notice Does nothing. Interface compliance.\\n     */\\n    function refund(address, uint256) external isInitialized {\\n        revert(ERROR_NO_REFUNDS);\\n    }\\n\\n    /**\\n     * @notice Close presale and open trading\\n     */\\n    function close() external nonReentrant isInitialized {\\n        require(state() == State.Finished, ERROR_INVALID_STATE);\\n\\n        isClosed = true;\\n\\n        // mint new tokens for beneficiary\\n        uint256 tokensToMint;\\n        if (mintingForBeneficiaryPct > 0) {\\n            // No need for SafeMath, already checked mintingForBeneficiaryPct < PPM\\n            tokensToMint = totalSold.mul(mintingForBeneficiaryPct) / (PPM - mintingForBeneficiaryPct);\\n            bondedToken.mint(beneficiary, tokensToMint);\\n        }\\n\\n        // (presale) ~~~> contribution tokens ~~~> (reserve)\\n        (, , , uint32 reserveRatio, ) = marketMaker.getCollateralToken(address(erc20ContribToken));\\n        uint256 tokensForReserve = (totalRaised.mul(PPM) / (PPM - mintingForBeneficiaryPct)).mul(reserveRatio) / PPM;\\n        _transfer(erc20ContribToken, address(this), reserve, tokensForReserve);\\n\\n        // (presale) ~~~> contribution tokens ~~~> (beneficiary)\\n        uint256 fundsForBeneficiary = erc20ContribToken.balanceOf(address(this));\\n        if (fundsForBeneficiary > 0) {\\n            _transfer(erc20ContribToken, address(this), beneficiary, fundsForBeneficiary);\\n        }\\n\\n        // open trading\\n        controller.openTrading();\\n\\n        emit Close();\\n    }\\n\\n    function contributionToken() public view returns (address) {\\n        return address(erc20ContribToken);\\n    }\\n\\n    /***** public view functions *****/\\n\\n    /**\\n     * @notice Computes the amount of [bonded] tokens that would be purchased for `@tokenAmount(self.contributionToken(): address, _value)`\\n     * @param _value The amount of contribution tokens to be used in that computation\\n     */\\n    function contributionToTokens(uint256 _value) public view isInitialized returns (uint256) {\\n        return _value.mul(exchangeRate).div(PPM);\\n    }\\n\\n    /**\\n     * @notice Returns the current state of that presale\\n     */\\n    function state() public view isInitialized returns (State) {\\n        if (openDate == 0 || openDate > getTimestamp64()) {\\n            return State.Pending;\\n        }\\n\\n        if (isClosed) {\\n            return State.Closed;\\n        }\\n\\n        if (_timeSinceOpen() >= period) {\\n            return State.Finished;\\n        }\\n\\n        return State.Funding;\\n    }\\n\\n    /***** internal functions *****/\\n\\n    function _timeSinceOpen() internal view returns (uint64) {\\n        if (openDate == 0) {\\n            return 0;\\n        } else {\\n            return getTimestamp64().sub(openDate);\\n        }\\n    }\\n\\n    function _setOpenDate(uint64 _date) internal {\\n        require(state() == State.Pending, ERROR_INVALID_STATE);\\n        require(_date >= getTimestamp64(), ERROR_INVALID_OPEN_DATE);\\n\\n        openDate = _date;\\n\\n        emit SetOpenDate(_date);\\n    }\\n\\n    function _setPeriod(uint64 _period) internal {\\n        require(_period > 0, ERROR_TIME_PERIOD_ZERO);\\n        require(openDate == 0 || openDate.add(_period) > getTimestamp64(), ERROR_INVALID_TIME_PERIOD);\\n        period = _period;\\n    }\\n\\n    function _transfer(\\n        ERC20 _token,\\n        address _from,\\n        address _to,\\n        uint256 _amount\\n    ) internal {\\n        if (_from == address(this)) {\\n            require(_token.safeTransfer(_to, _amount), ERROR_TOKEN_TRANSFER_REVERTED);\\n        } else {\\n            require(_token.safeTransferFrom(_from, _to, _amount), ERROR_TOKEN_TRANSFER_REVERTED);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcd01788bb5afba582361dc5aeb1a7bb316bdeb62ffa2369ccb5066cd339b6e65\"},\"contracts/ContinuousToken.sol\":{\"content\":\"/**\\n * Copyright 2017-2021, bZeroX, LLC. All Rights Reserved.\\n * Licensed under the Apache License, Version 2.0.\\n */\\n\\npragma solidity 0.4.24;\\n\\nimport \\\"@aragon/os/contracts/lib/math/SafeMath.sol\\\";\\nimport \\\"@aragon/os/contracts/lib/token/ERC20.sol\\\";\\n\\ncontract ContinuousToken is ERC20 {\\n    using SafeMath for uint256;\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n    event Mint(address indexed minter, uint256 value);\\n    event Burn(address indexed burner, uint256 value);\\n\\n    string public name;\\n    string public symbol;\\n    uint8 public decimals;\\n\\n    mapping(address => uint256) internal balances;\\n    mapping(address => mapping(address => uint256)) internal allowed;\\n    uint256 internal totalSupply_;\\n\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        uint8 _decimals,\\n        uint256 _initialAmount\\n    ) public {\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = _decimals;\\n\\n        if (_initialAmount != 0) {\\n            mint(msg.sender, _initialAmount);\\n        }\\n    }\\n\\n    function approve(address _spender, uint256 _value) public returns (bool) {\\n        allowed[msg.sender][_spender] = _value;\\n        emit Approval(msg.sender, _spender, _value);\\n        return true;\\n    }\\n\\n    function transfer(address _to, uint256 _value) public returns (bool) {\\n        require(_value <= balances[msg.sender] && _to != address(0), \\\"invalid transfer\\\");\\n\\n        balances[msg.sender] = balances[msg.sender].sub(_value);\\n        balances[_to] = balances[_to].add(_value);\\n\\n        emit Transfer(msg.sender, _to, _value);\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _value\\n    ) public returns (bool) {\\n        uint256 allowanceAmount = allowed[_from][msg.sender];\\n        require(_value <= balances[_from] && _value <= allowanceAmount && _to != address(0), \\\"invalid transfer\\\");\\n\\n        balances[_from] = balances[_from].sub(_value);\\n        balances[_to] = balances[_to].add(_value);\\n        if (allowanceAmount < uint256(-1)) {\\n            allowed[_from][msg.sender] = allowanceAmount.sub(_value);\\n        }\\n\\n        emit Transfer(_from, _to, _value);\\n        return true;\\n    }\\n\\n    function mint(address _to, uint256 _value) public {\\n        require(_to != address(0), \\\"no mint allowed\\\");\\n        totalSupply_ = totalSupply_.add(_value);\\n        balances[_to] = balances[_to].add(_value);\\n\\n        emit Mint(_to, _value);\\n        emit Transfer(address(0), _to, _value);\\n    }\\n\\n    function burn(address _who, uint256 _value) public {\\n        require(_who != address(0), \\\"no burn allowed\\\");\\n        require(_value <= balances[_who], \\\"balance too low\\\");\\n        // no need to require _value <= totalSupply, since that would imply the\\n        // sender's balance is greater than the totalSupply, which *should* be an assertion failure\\n\\n        balances[_who] = balances[_who].sub(_value);\\n        totalSupply_ = totalSupply_.sub(_value);\\n\\n        emit Burn(_who, _value);\\n        emit Transfer(_who, address(0), _value);\\n    }\\n\\n    function totalSupply() public view returns (uint256) {\\n        return totalSupply_;\\n    }\\n\\n    function balanceOf(address _owner) public view returns (uint256) {\\n        return balances[_owner];\\n    }\\n\\n    function allowance(address _owner, address _spender) public view returns (uint256) {\\n        return allowed[_owner][_spender];\\n    }\\n}\\n\",\"keccak256\":\"0x72735ec7c878e799c44de8f9576a5b68a2ed90f729a271be6bfa3ae1cd1ef451\"},\"contracts/lib/IMarketMaker.sol\":{\"content\":\"pragma solidity 0.4.24;\\n\\ninterface IMarketMaker {\\n    // solhint-disable-next-line\\n  function getCollateralToken(address _collateral) external view returns (bool, uint256, uint256, uint32, uint256);\\n}\\n\",\"keccak256\":\"0x2381d29ef2383fd766b50e74eebe0dc72bc3593f61e3c32abe960c93713472e9\"}},\"version\":1}",
  "bytecode": "0x60806040526200001764010000000062000047810204565b6200004160008051602062003745833981519152600064010000000062002bb86200014f82021704565b62000265565b6200005a64010000000062000153810204565b60408051808201909152601881527f494e49545f414c52454144595f494e495449414c495a454400000000000000006020820152901562000136576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015620000fa578181015183820152602001620000e0565b50505050905090810190601f168015620001285780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b506200014d60001964010000000062000182810204565b565b9055565b60006200017d6000805160206200374583398151915264010000000062002bb46200026182021704565b905090565b6200019564010000000062000153810204565b60408051808201909152601881527f494e49545f414c52454144595f494e495449414c495a454400000000000000006020820152901562000234576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252838181518152602001915080519060200190808383600083811015620000fa578181015183820152602001620000e0565b506200025e600080516020620037458339815191528264010000000062002bb86200014f82021704565b50565b5490565b6134d080620002756000396000f3006080604052600436106101d45763ffffffff60e060020a6000350416630803fac081146101d95780630d720bbc1461020257806315168fc3146102295780631f21f9af1461028e5780631f6d4942146102bf5780632914b9bd146102e0578063309cb5ea1461033957806332f0a3b51461035b57806338af3eed146103705780633ba0b9a914610385578063410085df1461039a57806343d726d6146103be5780634a15fd93146103d35780634bedf9a8146103f5578063542ba2981461040a5780636a928e8f1461041f57806372f93cc2146104345780637af2b8a0146104495780637e7db6e11461045e57806380afdea81461047f5780638418cd99146104945780638b3dd749146104ab5780639106d7ba146104c057806396330f46146104d55780639d4941d8146104ed578063a1658fad1461050e578063a2b96b6f14610575578063a479e5081461058a578063b086d7401461059f578063c19d93fb146105c1578063c2b6b58c146105fa578063c5c4744c1461060f578063cd3293de14610624578063d4aae0c414610639578063de4796ed1461064e578063e36a4ec714610663578063ec8cb28114610678578063ef78d4fd146106aa578063f77c4791146106bf578063fcfff16f146106d4575b600080fd5b3480156101e557600080fd5b506101ee6106e9565b604080519115158252519081900360200190f35b34801561020e57600080fd5b50610217610712565b60408051918252519081900360200190f35b34801561023557600080fd5b5061028c600160a060020a0360043581169060243581169060443581169060643581169060843581169060a43581169060c4351667ffffffffffffffff60e435811690610104359061012435906101443516610719565b005b34801561029a57600080fd5b506102a3610cc8565b60408051600160a060020a039092168252519081900360200190f35b3480156102cb57600080fd5b50610217600160a060020a0360043516610cd7565b3480156102ec57600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526102a3943694929360249392840191908190840183828082843750949750610ce99650505050505050565b34801561034557600080fd5b5061028c67ffffffffffffffff60043516610dcf565b34801561036757600080fd5b506102a3610e81565b34801561037c57600080fd5b506102a3610efa565b34801561039157600080fd5b50610217610f09565b3480156103a657600080fd5b5061028c600160a060020a0360043516602435610f0f565b3480156103ca57600080fd5b5061028c611009565b3480156103df57600080fd5b5061028c67ffffffffffffffff6004351661154a565b34801561040157600080fd5b506102a36115f6565b34801561041657600080fd5b50610217611605565b34801561042b57600080fd5b5061021761160b565b34801561044057600080fd5b5061021761161d565b34801561045557600080fd5b50610217611623565b34801561046a57600080fd5b506101ee600160a060020a0360043516611647565b34801561048b57600080fd5b5061021761164d565b61028c600160a060020a036004351660243561167d565b3480156104b757600080fd5b50610217611d90565b3480156104cc57600080fd5b50610217611dbb565b3480156104e157600080fd5b50610217600435611dc1565b3480156104f957600080fd5b5061028c600160a060020a0360043516611e6e565b34801561051a57600080fd5b5060408051602060046044358181013583810280860185019096528085526101ee958335600160a060020a03169560248035963696956064959394920192918291850190849080828437509497506120fd9650505050505050565b34801561058157600080fd5b5061021761224d565b34801561059657600080fd5b506102a3612271565b3480156105ab57600080fd5b5061028c67ffffffffffffffff60043516612326565b3480156105cd57600080fd5b506105d66124b5565b604051808260038111156105e657fe5b60ff16815260200191505060405180910390f35b34801561060657600080fd5b506101ee6125d3565b34801561061b57600080fd5b506102176125e8565b34801561063057600080fd5b506102a36125ee565b34801561064557600080fd5b506102a36125fd565b34801561065a57600080fd5b506101ee612628565b34801561066f57600080fd5b506102a361263b565b34801561068457600080fd5b5061068d61264a565b6040805167ffffffffffffffff9092168252519081900360200190f35b3480156106b657600080fd5b5061068d61265a565b3480156106cb57600080fd5b506102a3612682565b3480156106e057600080fd5b5061028c612691565b6000806106f4611d90565b9050801580159061070c575080610709612747565b10155b91505090565b620f424081565b610721611d90565b60408051808201909152601881527f494e49545f414c52454144595f494e495449414c495a45440000000000000000602082015290156107e25760405160e560020a62461bcd0281526004018080602001828103825283818151815260200191508051906020019080838360005b838110156107a757818101518382015260200161078f565b50505050905090810190601f1680156107d45780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b506107ec8a61274b565b604080518082019091526017815260008051602061342583398151915260208201529015156108605760405160e560020a62461bcd028152600401808060200182810382528381815181526020019150805190602001908083836000838110156107a757818101518382015260200161078f565b5061086a8961274b565b604080518082019091526017815260008051602061342583398151915260208201529015156108de5760405160e560020a62461bcd028152600401808060200182810382528381815181526020019150805190602001908083836000838110156107a757818101518382015260200161078f565b506108e88861274b565b6040805180820190915260178152600080516020613425833981519152602082015290151561095c5760405160e560020a62461bcd028152600401808060200182810382528381815181526020019150805190602001908083836000838110156107a757818101518382015260200161078f565b506109668761274b565b604080518082019091526017815260008051602061342583398151915260208201529015156109da5760405160e560020a62461bcd028152600401808060200182810382528381815181526020019150805190602001908083836000838110156107a757818101518382015260200161078f565b5060408051808201909152601b81527f50524553414c455f494e56414c49445f42454e454649434941525900000000006020820152600160a060020a0387161515610a6a5760405160e560020a62461bcd028152600401808060200182810382528381815181526020019150805190602001908083836000838110156107a757818101518382015260200161078f565b50610a748561274b565b6040805190810160405280602081526020017f50524553414c455f494e56414c49445f434f4e545249425554455f544f4b454e815250901515610afc5760405160e560020a62461bcd028152600401808060200182810382528381815181526020019150805190602001908083836000838110156107a757818101518382015260200161078f565b5060408051808201909152601d81527f50524553414c455f494e56414c49445f45584348414e47455f52415445000000602082015260008411610b845760405160e560020a62461bcd028152600401808060200182810382528381815181526020019150805190602001908083836000838110156107a757818101518382015260200161078f565b5060408051808201909152601381527f50524553414c455f494e56414c49445f504354000000000000000000000000006020820152620f42408310610c0e5760405160e560020a62461bcd028152600401808060200182810382528381815181526020019150805190602001908083836000838110156107a757818101518382015260200161078f565b50610c17612778565b6000805473ffffffffffffffffffffffffffffffffffffffff19908116600160a060020a038d8116919091179092556001805482168c84161790556002805482168b84161790556003805482168a84161790556004805482168984161790556005805490911691871691909117905560068390556007829055610c998b612840565b610ca284612870565b67ffffffffffffffff811615610cbb57610cbb81612a25565b5050505050505050505050565b600154600160a060020a031681565b600c6020526000908152604090205481565b6000610cf3612271565b600160a060020a03166304bf2a7f836040518263ffffffff1660e060020a0281526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610d51578181015183820152602001610d39565b50505050905090810190601f168015610d7e5780820380516001836020036101000a031916815260200191505b5092505050602060405180830381600087803b158015610d9d57600080fd5b505af1158015610db1573d6000803e3d6000fd5b505050506040513d6020811015610dc757600080fd5b505192915050565b6040805160008082526020820190925260008051602061344583398151915291610dff9133918491905b506120fd565b60408051808201909152600f81526000805160206134058339815191526020820152901515610e735760405160e560020a62461bcd028152600401808060200182810382528381815181526020019150805190602001908083836000838110156107a757818101518382015260200161078f565b50610e7d82612870565b5050565b6000610e8b6125fd565b600160a060020a03166332f0a3b56040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015610ec857600080fd5b505af1158015610edc573d6000803e3d6000fd5b505050506040513d6020811015610ef257600080fd5b505190505b90565b600454600160a060020a031681565b60065481565b610f176106e9565b60408051808201909152601481526000805160206134858339815191526020820152901515610f8b5760405160e560020a62461bcd028152600401808060200182810382528381815181526020019150805190602001908083836000838110156107a757818101518382015260200161078f565b50604080518082018252601281527f50524553414c455f4e4f5f524546554e445300000000000000000000000000006020808301918252925160e560020a62461bcd028152600481019384528251602482015282519293928392604490920191908083836000838110156107a757818101518382015260200161078f565b6000808080611025600080516020613465833981519152612bb4565b60408051808201909152601981527f5245454e5452414e43595f5245454e5452414e545f43414c4c00000000000000602082015290156110aa5760405160e560020a62461bcd028152600401808060200182810382528381815181526020019150805190602001908083836000838110156107a757818101518382015260200161078f565b506110ca600080516020613465833981519152600163ffffffff612bb816565b6110d26106e9565b604080518082019091526014815260008051602061348583398151915260208201529015156111465760405160e560020a62461bcd028152600401808060200182810382528381815181526020019150805190602001908083836000838110156107a757818101518382015260200161078f565b5060026111516124b5565b600381111561115c57fe5b60408051808201909152601581527f50524553414c455f494e56414c49445f53544154450000000000000000000000602082015291146111e15760405160e560020a62461bcd028152600401808060200182810382528381815181526020019150805190602001908083836000838110156107a757818101518382015260200161078f565b506008805468ff0000000000000000191668010000000000000000179055600754600010156112c557600754620f424003611229600754600a54612bbc90919063ffffffff16565b81151561123257fe5b60025460048054604080517f40c10f19000000000000000000000000000000000000000000000000000000008152600160a060020a0392831693810193909352949093046024820181905293519397509116916340c10f199160448082019260009290919082900301818387803b1580156112ac57600080fd5b505af11580156112c0573d6000803e3d6000fd5b505050505b600154600554604080517ff190e427000000000000000000000000000000000000000000000000000000008152600160a060020a0392831660048201529051919092169163f190e4279160248083019260a09291908290030181600087803b15801561133057600080fd5b505af1158015611344573d6000803e3d6000fd5b505050506040513d60a081101561135a57600080fd5b5060600151600754600954919450620f4240916113a09163ffffffff808816929185039161138a918690612bbc16565b81151561139357fe5b049063ffffffff612bbc16565b8115156113a957fe5b6005546003549290910493506113ce91600160a060020a039182169130911685612c73565b600554604080517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529051600160a060020a03909216916370a08231916024808201926020929091908290030181600087803b15801561143457600080fd5b505af1158015611448573d6000803e3d6000fd5b505050506040513d602081101561145e57600080fd5b50519050600081111561148a5760055460045461148a91600160a060020a039081169130911684612c73565b60008054604080517fc9567bf90000000000000000000000000000000000000000000000000000000081529051600160a060020a039092169263c9567bf99260048084019382900301818387803b1580156114e457600080fd5b505af11580156114f8573d6000803e3d6000fd5b50506040517fc35789ccff76271dc0efa6bfde2f4d4a32cd48dd86278f75f8648cb068c86e3b925060009150a1611544600080516020613465833981519152600063ffffffff612bb816565b50505050565b6040805160008082526020820190925260008051602061344583398151915291611578913391849190610df9565b60408051808201909152600f815260008051602061340583398151915260208201529015156115ec5760405160e560020a62461bcd028152600401808060200182810382528381815181526020019150805190602001908083836000838110156107a757818101518382015260200161078f565b50610e7d82612a25565b600554600160a060020a031690565b60075481565b60008051602061344583398151915281565b600b5481565b7f2738f3f227143b7fbb9720e93e2e5b36d7a15966e130b49f1582c6432d949aa981565b50600190565b60006116787fd625496217aa6a3453eecb9c3489dc5a53e6c67b444329ea2b2cbc9ff547639b612bb4565b905090565b6000611696600080516020613465833981519152612bb4565b60408051808201909152601981527f5245454e5452414e43595f5245454e5452414e545f43414c4c000000000000006020820152901561171b5760405160e560020a62461bcd028152600401808060200182810382528381815181526020019150805190602001908083836000838110156107a757818101518382015260200161078f565b5061173b600080516020613465833981519152600163ffffffff612bb816565b604080516000808252602082019092527f9ccaca4edf2127f20c425fdd86af1ba178b9e5bee280cd70d88ac5f6874c4f079161177b913391849190610df9565b60408051808201909152600f815260008051602061340583398151915260208201529015156117ef5760405160e560020a62461bcd028152600401808060200182810382528381815181526020019150805190602001908083836000838110156107a757818101518382015260200161078f565b5060016117fa6124b5565b600381111561180557fe5b60408051808201909152601581527f50524553414c455f494e56414c49445f535441544500000000000000000000006020820152911461188a5760405160e560020a62461bcd028152600401808060200182810382528381815181526020019150805190602001908083836000838110156107a757818101518382015260200161078f565b506040805180820190915260208082527f50524553414c455f494e56414c49445f434f4e545249425554455f56414c55459082015234156119105760405160e560020a62461bcd028152600401808060200182810382528381815181526020019150805190602001908083836000838110156107a757818101518382015260200161078f565b506040805180820190915260208082527f50524553414c455f494e56414c49445f434f4e545249425554455f56414c554590820152600084116119985760405160e560020a62461bcd028152600401808060200182810382528381815181526020019150805190602001908083836000838110156107a757818101518382015260200161078f565b50600554604080517f70a08231000000000000000000000000000000000000000000000000000000008152600160a060020a0387811660048301529151869392909216916370a08231916024808201926020929091908290030181600087803b158015611a0457600080fd5b505af1158015611a18573d6000803e3d6000fd5b505050506040513d6020811015611a2e57600080fd5b505160408051808201909152601c81527f50524553414c455f494e53554646494349454e545f42414c414e4345000000006020820152911115611ab65760405160e560020a62461bcd028152600401808060200182810382528381815181526020019150805190602001908083836000838110156107a757818101518382015260200161078f565b50600554604080517fdd62ed3e000000000000000000000000000000000000000000000000000000008152600160a060020a03878116600483015230602483015291518693929092169163dd62ed3e916044808201926020929091908290030181600087803b158015611b2857600080fd5b505af1158015611b3c573d6000803e3d6000fd5b505050506040513d6020811015611b5257600080fd5b505160408051808201909152601e81527f50524553414c455f494e53554646494349454e545f414c4c4f57414e434500006020820152911115611bda5760405160e560020a62461bcd028152600401808060200182810382528381815181526020019150805190602001908083836000838110156107a757818101518382015260200161078f565b50600554611bf390600160a060020a0316853086612c73565b611bfc83611dc1565b600954909250611c12908463ffffffff612dd216565b600955600a54611c28908363ffffffff612dd216565b600a55600254604080517f40c10f19000000000000000000000000000000000000000000000000000000008152600160a060020a03878116600483015260248201869052915191909216916340c10f1991604480830192600092919082900301818387803b158015611c9957600080fd5b505af1158015611cad573d6000803e3d6000fd5b50505050600160a060020a0384166000908152600c60205260409020541515611ce857600b54611ce490600163ffffffff612dd216565b600b555b600160a060020a0384166000908152600c6020526040902054611d11908463ffffffff612dd216565b600160a060020a0385166000818152600c6020908152604091829020939093558051868152928301859052805191927fc9ec9df36a160cd05ae36393dca23c0128234fc68a48baec833a6d8b5967d6da929081900390910190a250611d8b600080516020613465833981519152600063ffffffff612bb816565b505050565b60006116787febb05b386a8d34882b8711d156f463690983dc47815980fb82aeeff1aa43579e612bb4565b600a5481565b6000611dcb6106e9565b60408051808201909152601481526000805160206134858339815191526020820152901515611e3f5760405160e560020a62461bcd028152600401808060200182810382528381815181526020019150805190602001908083836000838110156107a757818101518382015260200161078f565b50611e68620f4240611e5c60065485612bbc90919063ffffffff16565b9063ffffffff612e6416565b92915050565b6000806000611e7c84611647565b60408051808201909152601281527f5245434f5645525f444953414c4c4f57454400000000000000000000000000006020820152901515611f025760405160e560020a62461bcd028152600401808060200182810382528381815181526020019150805190602001908083836000838110156107a757818101518382015260200161078f565b50611f0b610e81565b9250611f168361274b565b60408051808201909152601a81527f5245434f5645525f5641554c545f4e4f545f434f4e54524143540000000000006020820152901515611f9c5760405160e560020a62461bcd028152600401808060200182810382528381815181526020019150805190602001908083836000838110156107a757818101518382015260200161078f565b50600160a060020a0384161515611fed5760405130319250600160a060020a0384169083156108fc029084906000818181858888f19350505050158015611fe7573d6000803e3d6000fd5b506120ac565b5082612008600160a060020a0382163063ffffffff612f0416565b9150612024600160a060020a038216848463ffffffff61301916565b60408051808201909152601d81527f5245434f5645525f544f4b454e5f5452414e534645525f4641494c454400000060208201529015156120aa5760405160e560020a62461bcd028152600401808060200182810382528381815181526020019150805190602001908083836000838110156107a757818101518382015260200161078f565b505b83600160a060020a031683600160a060020a03167f596caf56044b55fb8c4ca640089bbc2b63cae3e978b851f5745cbb7c5b288e02846040518082815260200191505060405180910390a350505050565b6000806121086106e9565b15156121175760009150612245565b61211f6125fd565b9050600160a060020a038116151561213a5760009150612245565b80600160a060020a031663fdef9106863087612155886130a4565b60405160e060020a63ffffffff8716028152600160a060020a03808616600483019081529085166024830152604482018490526080606483019081528351608484015283519192909160a490910190602085019080838360005b838110156121c75781810151838201526020016121af565b50505050905090810190601f1680156121f45780820380516001836020036101000a031916815260200191505b5095505050505050602060405180830381600087803b15801561221657600080fd5b505af115801561222a573d6000803e3d6000fd5b505050506040513d602081101561224057600080fd5b505191505b509392505050565b7f9ccaca4edf2127f20c425fdd86af1ba178b9e5bee280cd70d88ac5f6874c4f0781565b60008061227c6125fd565b604080517fbe00bbd80000000000000000000000000000000000000000000000000000000081527fd6f028ca0e8edb4a8c9757ca4fdccab25fa1e0317da1188108f7d2dee14902fb60048201527fddbcfd564f642ab5627cf68b9b7d374fb4f8a36e941a75d89c87998cef03bd6160248201529051600160a060020a03929092169163be00bbd8916044808201926020929091908290030181600087803b158015610d9d57600080fd5b604080516000808252602082019092527f2738f3f227143b7fbb9720e93e2e5b36d7a15966e130b49f1582c6432d949aa991612366913391849190610df9565b60408051808201909152600f815260008051602061340583398151915260208201529015156123da5760405160e560020a62461bcd028152600401808060200182810382528381815181526020019150805190602001908083836000838110156107a757818101518382015260200161078f565b5060075460408051808201909152601381527f50524553414c455f494e56414c49445f5043540000000000000000000000000060208201529067ffffffffffffffff84161061246e5760405160e560020a62461bcd028152600401808060200182810382528381815181526020019150805190602001908083836000838110156107a757818101518382015260200161078f565b5067ffffffffffffffff8216600781905560408051918252517fa50304e35b9add7e0d49e0d23f05a2a2935cfa28fdc3abe3636318af4bed22459181900360200190a15050565b60006124bf6106e9565b604080518082019091526014815260008051602061348583398151915260208201529015156125335760405160e560020a62461bcd028152600401808060200182810382528381815181526020019150805190602001908083836000838110156107a757818101518382015260200161078f565b5060085467ffffffffffffffff16158061256357506125506130ae565b60085467ffffffffffffffff9182169116115b1561257057506000610ef7565b60085468010000000000000000900460ff161561258f57506003610ef7565b60055474010000000000000000000000000000000000000000900467ffffffffffffffff166125bc6130c0565b67ffffffffffffffff161061164757506002610ef7565b60085468010000000000000000900460ff1681565b60095481565b600354600160a060020a031681565b60006116787f4172f0f7d2289153072b0a6ca36959e0cbe2efc3afe50fc81636caa96338137b612bb4565b6000600019612635611d90565b14905090565b600254600160a060020a031681565b60085467ffffffffffffffff1681565b60055474010000000000000000000000000000000000000000900467ffffffffffffffff1681565b600054600160a060020a031681565b60408051600080825260208201909252600080516020613445833981519152916126bf913391849190610df9565b60408051808201909152600f815260008051602061340583398151915260208201529015156127335760405160e560020a62461bcd028152600401808060200182810382528381815181526020019150805190602001908083836000838110156107a757818101518382015260200161078f565b5061274461273f6130ae565b612a25565b50565b4390565b600080600160a060020a03831615156127675760009150612772565b823b90506000811191505b50919050565b612780611d90565b60408051808201909152601881527f494e49545f414c52454144595f494e495449414c495a45440000000000000000602082015290156128055760405160e560020a62461bcd028152600401808060200182810382528381815181526020019150805190602001908083836000838110156107a757818101518382015260200161078f565b5061283e612811612747565b7febb05b386a8d34882b8711d156f463690983dc47815980fb82aeeff1aa43579e9063ffffffff612bb816565b565b6127447f4172f0f7d2289153072b0a6ca36959e0cbe2efc3afe50fc81636caa96338137b8263ffffffff612bb816565b60408051808201909152601881527f50524553414c455f54494d455f504552494f445f5a45524f00000000000000006020820152600067ffffffffffffffff8316116129015760405160e560020a62461bcd028152600401808060200182810382528381815181526020019150805190602001908083836000838110156107a757818101518382015260200161078f565b5060085467ffffffffffffffff16158061294b575061291e6130ae565b60085467ffffffffffffffff9182169161293f91168363ffffffff61311816565b67ffffffffffffffff16115b60408051808201909152601b81527f50524553414c455f494e56414c49445f54494d455f504552494f44000000000060208201529015156129d15760405160e560020a62461bcd028152600401808060200182810382528381815181526020019150805190602001908083836000838110156107a757818101518382015260200161078f565b506005805467ffffffffffffffff90921674010000000000000000000000000000000000000000027fffffffff0000000000000000ffffffffffffffffffffffffffffffffffffffff909216919091179055565b6000612a2f6124b5565b6003811115612a3a57fe5b60408051808201909152601581527f50524553414c455f494e56414c49445f5354415445000000000000000000000060208201529114612abf5760405160e560020a62461bcd028152600401808060200182810382528381815181526020019150805190602001908083836000838110156107a757818101518382015260200161078f565b50612ac86130ae565b60408051808201909152601981527f50524553414c455f494e56414c49445f4f50454e5f444154450000000000000060208201529067ffffffffffffffff9081169083161015612b5d5760405160e560020a62461bcd028152600401808060200182810382528381815181526020019150805190602001908083836000838110156107a757818101518382015260200161078f565b506008805467ffffffffffffffff831667ffffffffffffffff19909116811790915560408051918252517fab2aeaceefdbd207caa02bf58306335f7c37fd3b434a6cc547733be5e33a86779181900360200190a150565b5490565b9055565b600080831515612bcf5760009150612c6c565b50828202828482811515612bdf57fe5b60408051808201909152601181527f4d4154485f4d554c5f4f564552464c4f5700000000000000000000000000000060208201529291900414612c675760405160e560020a62461bcd028152600401808060200182810382528381815181526020019150805190602001908083836000838110156107a757818101518382015260200161078f565b508091505b5092915050565b600160a060020a038316301415612d2a57612c9e600160a060020a038516838363ffffffff61301916565b60408051808201909152601f81527f50524553414c455f544f4b454e5f5452414e534645525f5245564552544544006020820152901515612d245760405160e560020a62461bcd028152600401808060200182810382528381815181526020019150805190602001908083836000838110156107a757818101518382015260200161078f565b50611544565b612d45600160a060020a03851684848463ffffffff6131b316565b60408051808201909152601f81527f50524553414c455f544f4b454e5f5452414e534645525f5245564552544544006020820152901515612dcb5760405160e560020a62461bcd028152600401808060200182810382528381815181526020019150805190602001908083836000838110156107a757818101518382015260200161078f565b5050505050565b60408051808201909152601181527f4d4154485f4144445f4f564552464c4f5700000000000000000000000000000060208201526000908383019084821015612c675760405160e560020a62461bcd028152600401808060200182810382528381815181526020019150805190602001908083836000838110156107a757818101518382015260200161078f565b5490565b60408051808201909152600d81527f4d4154485f4449565f5a45524f0000000000000000000000000000000000000060208201526000908190818411612eef5760405160e560020a62461bcd028152600401808060200182810382528381815181526020019150805190602001908083836000838110156107a757818101518382015260200161078f565b508284811515612efb57fe5b04949350505050565b60408051600160a060020a0383166024808301919091528251808303909101815260449091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f70a08231000000000000000000000000000000000000000000000000000000001790526000908180612f848684613247565b60408051808201909152601c81527f534146455f4552435f32305f42414c414e43455f5245564552544544000000006020820152919350915082151561300f5760405160e560020a62461bcd028152600401808060200182810382528381815181526020019150805190602001908083836000838110156107a757818101518382015260200161078f565b5095945050505050565b60408051600160a060020a038416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb0000000000000000000000000000000000000000000000000000000017905260009061309b8582613278565b95945050505050565b8051602002815290565b60006116786130bb6132c6565b6132ca565b60085460009067ffffffffffffffff1615156130de57506000610ef7565b60085461310d9067ffffffffffffffff166130f76130ae565b67ffffffffffffffff169063ffffffff61336316565b9050610ef7565b9055565b60408051808201909152601381527f4d41544836345f4144445f4f564552464c4f570000000000000000000000000060208201526000908383019067ffffffffffffffff8086169083161015612c675760405160e560020a62461bcd028152600401808060200182810382528381815181526020019150805190602001908083836000838110156107a757818101518382015260200161078f565b60408051600160a060020a0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd0000000000000000000000000000000000000000000000000000000017905260009061323d8682613278565b9695505050505050565b6000806000806040516020818751602089018a5afa9250600083111561326c57805191505b50909590945092505050565b6000806040516020818551602087016000895af160008111156132bc573d80156132a957602081146132b2576132ba565b600193506132ba565b600183511493505b505b5090949350505050565b4290565b60408051808201909152601581527f55494e5436345f4e554d4245525f544f4f5f4249470000000000000000000000602082015260009067ffffffffffffffff83111561335c5760405160e560020a62461bcd028152600401808060200182810382528381815181526020019150805190602001908083836000838110156107a757818101518382015260200161078f565b5090919050565b60408051808201909152601481527f4d41544836345f5355425f554e444552464c4f570000000000000000000000006020820152600090819067ffffffffffffffff80861690851611156133fc5760405160e560020a62461bcd028152600401808060200182810382528381815181526020019150805190602001908083836000838110156107a757818101518382015260200161078f565b50505090039056004150505f415554485f4641494c4544000000000000000000000000000000000050524553414c455f434f4e54524143545f49535f454f41000000000000000000efa06053e2ca99a43c97c4a4f3d8a394ee3323a8ff237e625fba09fe30ceb0a4e855346402235fdd185c890e68d2c4ecad599b88587635ee285bce2fda58dacb494e49545f4e4f545f494e495449414c495a4544000000000000000000000000a165627a7a72305820c030cb6d2d8cc3e9e24008306b869d9800ce947468247e44b2d1b4779dc070b70029ebb05b386a8d34882b8711d156f463690983dc47815980fb82aeeff1aa43579e",
  "deployedBytecode": "0x6080604052600436106101d45763ffffffff60e060020a6000350416630803fac081146101d95780630d720bbc1461020257806315168fc3146102295780631f21f9af1461028e5780631f6d4942146102bf5780632914b9bd146102e0578063309cb5ea1461033957806332f0a3b51461035b57806338af3eed146103705780633ba0b9a914610385578063410085df1461039a57806343d726d6146103be5780634a15fd93146103d35780634bedf9a8146103f5578063542ba2981461040a5780636a928e8f1461041f57806372f93cc2146104345780637af2b8a0146104495780637e7db6e11461045e57806380afdea81461047f5780638418cd99146104945780638b3dd749146104ab5780639106d7ba146104c057806396330f46146104d55780639d4941d8146104ed578063a1658fad1461050e578063a2b96b6f14610575578063a479e5081461058a578063b086d7401461059f578063c19d93fb146105c1578063c2b6b58c146105fa578063c5c4744c1461060f578063cd3293de14610624578063d4aae0c414610639578063de4796ed1461064e578063e36a4ec714610663578063ec8cb28114610678578063ef78d4fd146106aa578063f77c4791146106bf578063fcfff16f146106d4575b600080fd5b3480156101e557600080fd5b506101ee6106e9565b604080519115158252519081900360200190f35b34801561020e57600080fd5b50610217610712565b60408051918252519081900360200190f35b34801561023557600080fd5b5061028c600160a060020a0360043581169060243581169060443581169060643581169060843581169060a43581169060c4351667ffffffffffffffff60e435811690610104359061012435906101443516610719565b005b34801561029a57600080fd5b506102a3610cc8565b60408051600160a060020a039092168252519081900360200190f35b3480156102cb57600080fd5b50610217600160a060020a0360043516610cd7565b3480156102ec57600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526102a3943694929360249392840191908190840183828082843750949750610ce99650505050505050565b34801561034557600080fd5b5061028c67ffffffffffffffff60043516610dcf565b34801561036757600080fd5b506102a3610e81565b34801561037c57600080fd5b506102a3610efa565b34801561039157600080fd5b50610217610f09565b3480156103a657600080fd5b5061028c600160a060020a0360043516602435610f0f565b3480156103ca57600080fd5b5061028c611009565b3480156103df57600080fd5b5061028c67ffffffffffffffff6004351661154a565b34801561040157600080fd5b506102a36115f6565b34801561041657600080fd5b50610217611605565b34801561042b57600080fd5b5061021761160b565b34801561044057600080fd5b5061021761161d565b34801561045557600080fd5b50610217611623565b34801561046a57600080fd5b506101ee600160a060020a0360043516611647565b34801561048b57600080fd5b5061021761164d565b61028c600160a060020a036004351660243561167d565b3480156104b757600080fd5b50610217611d90565b3480156104cc57600080fd5b50610217611dbb565b3480156104e157600080fd5b50610217600435611dc1565b3480156104f957600080fd5b5061028c600160a060020a0360043516611e6e565b34801561051a57600080fd5b5060408051602060046044358181013583810280860185019096528085526101ee958335600160a060020a03169560248035963696956064959394920192918291850190849080828437509497506120fd9650505050505050565b34801561058157600080fd5b5061021761224d565b34801561059657600080fd5b506102a3612271565b3480156105ab57600080fd5b5061028c67ffffffffffffffff60043516612326565b3480156105cd57600080fd5b506105d66124b5565b604051808260038111156105e657fe5b60ff16815260200191505060405180910390f35b34801561060657600080fd5b506101ee6125d3565b34801561061b57600080fd5b506102176125e8565b34801561063057600080fd5b506102a36125ee565b34801561064557600080fd5b506102a36125fd565b34801561065a57600080fd5b506101ee612628565b34801561066f57600080fd5b506102a361263b565b34801561068457600080fd5b5061068d61264a565b6040805167ffffffffffffffff9092168252519081900360200190f35b3480156106b657600080fd5b5061068d61265a565b3480156106cb57600080fd5b506102a3612682565b3480156106e057600080fd5b5061028c612691565b6000806106f4611d90565b9050801580159061070c575080610709612747565b10155b91505090565b620f424081565b610721611d90565b60408051808201909152601881527f494e49545f414c52454144595f494e495449414c495a45440000000000000000602082015290156107e25760405160e560020a62461bcd0281526004018080602001828103825283818151815260200191508051906020019080838360005b838110156107a757818101518382015260200161078f565b50505050905090810190601f1680156107d45780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b506107ec8a61274b565b604080518082019091526017815260008051602061342583398151915260208201529015156108605760405160e560020a62461bcd028152600401808060200182810382528381815181526020019150805190602001908083836000838110156107a757818101518382015260200161078f565b5061086a8961274b565b604080518082019091526017815260008051602061342583398151915260208201529015156108de5760405160e560020a62461bcd028152600401808060200182810382528381815181526020019150805190602001908083836000838110156107a757818101518382015260200161078f565b506108e88861274b565b6040805180820190915260178152600080516020613425833981519152602082015290151561095c5760405160e560020a62461bcd028152600401808060200182810382528381815181526020019150805190602001908083836000838110156107a757818101518382015260200161078f565b506109668761274b565b604080518082019091526017815260008051602061342583398151915260208201529015156109da5760405160e560020a62461bcd028152600401808060200182810382528381815181526020019150805190602001908083836000838110156107a757818101518382015260200161078f565b5060408051808201909152601b81527f50524553414c455f494e56414c49445f42454e454649434941525900000000006020820152600160a060020a0387161515610a6a5760405160e560020a62461bcd028152600401808060200182810382528381815181526020019150805190602001908083836000838110156107a757818101518382015260200161078f565b50610a748561274b565b6040805190810160405280602081526020017f50524553414c455f494e56414c49445f434f4e545249425554455f544f4b454e815250901515610afc5760405160e560020a62461bcd028152600401808060200182810382528381815181526020019150805190602001908083836000838110156107a757818101518382015260200161078f565b5060408051808201909152601d81527f50524553414c455f494e56414c49445f45584348414e47455f52415445000000602082015260008411610b845760405160e560020a62461bcd028152600401808060200182810382528381815181526020019150805190602001908083836000838110156107a757818101518382015260200161078f565b5060408051808201909152601381527f50524553414c455f494e56414c49445f504354000000000000000000000000006020820152620f42408310610c0e5760405160e560020a62461bcd028152600401808060200182810382528381815181526020019150805190602001908083836000838110156107a757818101518382015260200161078f565b50610c17612778565b6000805473ffffffffffffffffffffffffffffffffffffffff19908116600160a060020a038d8116919091179092556001805482168c84161790556002805482168b84161790556003805482168a84161790556004805482168984161790556005805490911691871691909117905560068390556007829055610c998b612840565b610ca284612870565b67ffffffffffffffff811615610cbb57610cbb81612a25565b5050505050505050505050565b600154600160a060020a031681565b600c6020526000908152604090205481565b6000610cf3612271565b600160a060020a03166304bf2a7f836040518263ffffffff1660e060020a0281526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610d51578181015183820152602001610d39565b50505050905090810190601f168015610d7e5780820380516001836020036101000a031916815260200191505b5092505050602060405180830381600087803b158015610d9d57600080fd5b505af1158015610db1573d6000803e3d6000fd5b505050506040513d6020811015610dc757600080fd5b505192915050565b6040805160008082526020820190925260008051602061344583398151915291610dff9133918491905b506120fd565b60408051808201909152600f81526000805160206134058339815191526020820152901515610e735760405160e560020a62461bcd028152600401808060200182810382528381815181526020019150805190602001908083836000838110156107a757818101518382015260200161078f565b50610e7d82612870565b5050565b6000610e8b6125fd565b600160a060020a03166332f0a3b56040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015610ec857600080fd5b505af1158015610edc573d6000803e3d6000fd5b505050506040513d6020811015610ef257600080fd5b505190505b90565b600454600160a060020a031681565b60065481565b610f176106e9565b60408051808201909152601481526000805160206134858339815191526020820152901515610f8b5760405160e560020a62461bcd028152600401808060200182810382528381815181526020019150805190602001908083836000838110156107a757818101518382015260200161078f565b50604080518082018252601281527f50524553414c455f4e4f5f524546554e445300000000000000000000000000006020808301918252925160e560020a62461bcd028152600481019384528251602482015282519293928392604490920191908083836000838110156107a757818101518382015260200161078f565b6000808080611025600080516020613465833981519152612bb4565b60408051808201909152601981527f5245454e5452414e43595f5245454e5452414e545f43414c4c00000000000000602082015290156110aa5760405160e560020a62461bcd028152600401808060200182810382528381815181526020019150805190602001908083836000838110156107a757818101518382015260200161078f565b506110ca600080516020613465833981519152600163ffffffff612bb816565b6110d26106e9565b604080518082019091526014815260008051602061348583398151915260208201529015156111465760405160e560020a62461bcd028152600401808060200182810382528381815181526020019150805190602001908083836000838110156107a757818101518382015260200161078f565b5060026111516124b5565b600381111561115c57fe5b60408051808201909152601581527f50524553414c455f494e56414c49445f53544154450000000000000000000000602082015291146111e15760405160e560020a62461bcd028152600401808060200182810382528381815181526020019150805190602001908083836000838110156107a757818101518382015260200161078f565b506008805468ff0000000000000000191668010000000000000000179055600754600010156112c557600754620f424003611229600754600a54612bbc90919063ffffffff16565b81151561123257fe5b60025460048054604080517f40c10f19000000000000000000000000000000000000000000000000000000008152600160a060020a0392831693810193909352949093046024820181905293519397509116916340c10f199160448082019260009290919082900301818387803b1580156112ac57600080fd5b505af11580156112c0573d6000803e3d6000fd5b505050505b600154600554604080517ff190e427000000000000000000000000000000000000000000000000000000008152600160a060020a0392831660048201529051919092169163f190e4279160248083019260a09291908290030181600087803b15801561133057600080fd5b505af1158015611344573d6000803e3d6000fd5b505050506040513d60a081101561135a57600080fd5b5060600151600754600954919450620f4240916113a09163ffffffff808816929185039161138a918690612bbc16565b81151561139357fe5b049063ffffffff612bbc16565b8115156113a957fe5b6005546003549290910493506113ce91600160a060020a039182169130911685612c73565b600554604080517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529051600160a060020a03909216916370a08231916024808201926020929091908290030181600087803b15801561143457600080fd5b505af1158015611448573d6000803e3d6000fd5b505050506040513d602081101561145e57600080fd5b50519050600081111561148a5760055460045461148a91600160a060020a039081169130911684612c73565b60008054604080517fc9567bf90000000000000000000000000000000000000000000000000000000081529051600160a060020a039092169263c9567bf99260048084019382900301818387803b1580156114e457600080fd5b505af11580156114f8573d6000803e3d6000fd5b50506040517fc35789ccff76271dc0efa6bfde2f4d4a32cd48dd86278f75f8648cb068c86e3b925060009150a1611544600080516020613465833981519152600063ffffffff612bb816565b50505050565b6040805160008082526020820190925260008051602061344583398151915291611578913391849190610df9565b60408051808201909152600f815260008051602061340583398151915260208201529015156115ec5760405160e560020a62461bcd028152600401808060200182810382528381815181526020019150805190602001908083836000838110156107a757818101518382015260200161078f565b50610e7d82612a25565b600554600160a060020a031690565b60075481565b60008051602061344583398151915281565b600b5481565b7f2738f3f227143b7fbb9720e93e2e5b36d7a15966e130b49f1582c6432d949aa981565b50600190565b60006116787fd625496217aa6a3453eecb9c3489dc5a53e6c67b444329ea2b2cbc9ff547639b612bb4565b905090565b6000611696600080516020613465833981519152612bb4565b60408051808201909152601981527f5245454e5452414e43595f5245454e5452414e545f43414c4c000000000000006020820152901561171b5760405160e560020a62461bcd028152600401808060200182810382528381815181526020019150805190602001908083836000838110156107a757818101518382015260200161078f565b5061173b600080516020613465833981519152600163ffffffff612bb816565b604080516000808252602082019092527f9ccaca4edf2127f20c425fdd86af1ba178b9e5bee280cd70d88ac5f6874c4f079161177b913391849190610df9565b60408051808201909152600f815260008051602061340583398151915260208201529015156117ef5760405160e560020a62461bcd028152600401808060200182810382528381815181526020019150805190602001908083836000838110156107a757818101518382015260200161078f565b5060016117fa6124b5565b600381111561180557fe5b60408051808201909152601581527f50524553414c455f494e56414c49445f535441544500000000000000000000006020820152911461188a5760405160e560020a62461bcd028152600401808060200182810382528381815181526020019150805190602001908083836000838110156107a757818101518382015260200161078f565b506040805180820190915260208082527f50524553414c455f494e56414c49445f434f4e545249425554455f56414c55459082015234156119105760405160e560020a62461bcd028152600401808060200182810382528381815181526020019150805190602001908083836000838110156107a757818101518382015260200161078f565b506040805180820190915260208082527f50524553414c455f494e56414c49445f434f4e545249425554455f56414c554590820152600084116119985760405160e560020a62461bcd028152600401808060200182810382528381815181526020019150805190602001908083836000838110156107a757818101518382015260200161078f565b50600554604080517f70a08231000000000000000000000000000000000000000000000000000000008152600160a060020a0387811660048301529151869392909216916370a08231916024808201926020929091908290030181600087803b158015611a0457600080fd5b505af1158015611a18573d6000803e3d6000fd5b505050506040513d6020811015611a2e57600080fd5b505160408051808201909152601c81527f50524553414c455f494e53554646494349454e545f42414c414e4345000000006020820152911115611ab65760405160e560020a62461bcd028152600401808060200182810382528381815181526020019150805190602001908083836000838110156107a757818101518382015260200161078f565b50600554604080517fdd62ed3e000000000000000000000000000000000000000000000000000000008152600160a060020a03878116600483015230602483015291518693929092169163dd62ed3e916044808201926020929091908290030181600087803b158015611b2857600080fd5b505af1158015611b3c573d6000803e3d6000fd5b505050506040513d6020811015611b5257600080fd5b505160408051808201909152601e81527f50524553414c455f494e53554646494349454e545f414c4c4f57414e434500006020820152911115611bda5760405160e560020a62461bcd028152600401808060200182810382528381815181526020019150805190602001908083836000838110156107a757818101518382015260200161078f565b50600554611bf390600160a060020a0316853086612c73565b611bfc83611dc1565b600954909250611c12908463ffffffff612dd216565b600955600a54611c28908363ffffffff612dd216565b600a55600254604080517f40c10f19000000000000000000000000000000000000000000000000000000008152600160a060020a03878116600483015260248201869052915191909216916340c10f1991604480830192600092919082900301818387803b158015611c9957600080fd5b505af1158015611cad573d6000803e3d6000fd5b50505050600160a060020a0384166000908152600c60205260409020541515611ce857600b54611ce490600163ffffffff612dd216565b600b555b600160a060020a0384166000908152600c6020526040902054611d11908463ffffffff612dd216565b600160a060020a0385166000818152600c6020908152604091829020939093558051868152928301859052805191927fc9ec9df36a160cd05ae36393dca23c0128234fc68a48baec833a6d8b5967d6da929081900390910190a250611d8b600080516020613465833981519152600063ffffffff612bb816565b505050565b60006116787febb05b386a8d34882b8711d156f463690983dc47815980fb82aeeff1aa43579e612bb4565b600a5481565b6000611dcb6106e9565b60408051808201909152601481526000805160206134858339815191526020820152901515611e3f5760405160e560020a62461bcd028152600401808060200182810382528381815181526020019150805190602001908083836000838110156107a757818101518382015260200161078f565b50611e68620f4240611e5c60065485612bbc90919063ffffffff16565b9063ffffffff612e6416565b92915050565b6000806000611e7c84611647565b60408051808201909152601281527f5245434f5645525f444953414c4c4f57454400000000000000000000000000006020820152901515611f025760405160e560020a62461bcd028152600401808060200182810382528381815181526020019150805190602001908083836000838110156107a757818101518382015260200161078f565b50611f0b610e81565b9250611f168361274b565b60408051808201909152601a81527f5245434f5645525f5641554c545f4e4f545f434f4e54524143540000000000006020820152901515611f9c5760405160e560020a62461bcd028152600401808060200182810382528381815181526020019150805190602001908083836000838110156107a757818101518382015260200161078f565b50600160a060020a0384161515611fed5760405130319250600160a060020a0384169083156108fc029084906000818181858888f19350505050158015611fe7573d6000803e3d6000fd5b506120ac565b5082612008600160a060020a0382163063ffffffff612f0416565b9150612024600160a060020a038216848463ffffffff61301916565b60408051808201909152601d81527f5245434f5645525f544f4b454e5f5452414e534645525f4641494c454400000060208201529015156120aa5760405160e560020a62461bcd028152600401808060200182810382528381815181526020019150805190602001908083836000838110156107a757818101518382015260200161078f565b505b83600160a060020a031683600160a060020a03167f596caf56044b55fb8c4ca640089bbc2b63cae3e978b851f5745cbb7c5b288e02846040518082815260200191505060405180910390a350505050565b6000806121086106e9565b15156121175760009150612245565b61211f6125fd565b9050600160a060020a038116151561213a5760009150612245565b80600160a060020a031663fdef9106863087612155886130a4565b60405160e060020a63ffffffff8716028152600160a060020a03808616600483019081529085166024830152604482018490526080606483019081528351608484015283519192909160a490910190602085019080838360005b838110156121c75781810151838201526020016121af565b50505050905090810190601f1680156121f45780820380516001836020036101000a031916815260200191505b5095505050505050602060405180830381600087803b15801561221657600080fd5b505af115801561222a573d6000803e3d6000fd5b505050506040513d602081101561224057600080fd5b505191505b509392505050565b7f9ccaca4edf2127f20c425fdd86af1ba178b9e5bee280cd70d88ac5f6874c4f0781565b60008061227c6125fd565b604080517fbe00bbd80000000000000000000000000000000000000000000000000000000081527fd6f028ca0e8edb4a8c9757ca4fdccab25fa1e0317da1188108f7d2dee14902fb60048201527fddbcfd564f642ab5627cf68b9b7d374fb4f8a36e941a75d89c87998cef03bd6160248201529051600160a060020a03929092169163be00bbd8916044808201926020929091908290030181600087803b158015610d9d57600080fd5b604080516000808252602082019092527f2738f3f227143b7fbb9720e93e2e5b36d7a15966e130b49f1582c6432d949aa991612366913391849190610df9565b60408051808201909152600f815260008051602061340583398151915260208201529015156123da5760405160e560020a62461bcd028152600401808060200182810382528381815181526020019150805190602001908083836000838110156107a757818101518382015260200161078f565b5060075460408051808201909152601381527f50524553414c455f494e56414c49445f5043540000000000000000000000000060208201529067ffffffffffffffff84161061246e5760405160e560020a62461bcd028152600401808060200182810382528381815181526020019150805190602001908083836000838110156107a757818101518382015260200161078f565b5067ffffffffffffffff8216600781905560408051918252517fa50304e35b9add7e0d49e0d23f05a2a2935cfa28fdc3abe3636318af4bed22459181900360200190a15050565b60006124bf6106e9565b604080518082019091526014815260008051602061348583398151915260208201529015156125335760405160e560020a62461bcd028152600401808060200182810382528381815181526020019150805190602001908083836000838110156107a757818101518382015260200161078f565b5060085467ffffffffffffffff16158061256357506125506130ae565b60085467ffffffffffffffff9182169116115b1561257057506000610ef7565b60085468010000000000000000900460ff161561258f57506003610ef7565b60055474010000000000000000000000000000000000000000900467ffffffffffffffff166125bc6130c0565b67ffffffffffffffff161061164757506002610ef7565b60085468010000000000000000900460ff1681565b60095481565b600354600160a060020a031681565b60006116787f4172f0f7d2289153072b0a6ca36959e0cbe2efc3afe50fc81636caa96338137b612bb4565b6000600019612635611d90565b14905090565b600254600160a060020a031681565b60085467ffffffffffffffff1681565b60055474010000000000000000000000000000000000000000900467ffffffffffffffff1681565b600054600160a060020a031681565b60408051600080825260208201909252600080516020613445833981519152916126bf913391849190610df9565b60408051808201909152600f815260008051602061340583398151915260208201529015156127335760405160e560020a62461bcd028152600401808060200182810382528381815181526020019150805190602001908083836000838110156107a757818101518382015260200161078f565b5061274461273f6130ae565b612a25565b50565b4390565b600080600160a060020a03831615156127675760009150612772565b823b90506000811191505b50919050565b612780611d90565b60408051808201909152601881527f494e49545f414c52454144595f494e495449414c495a45440000000000000000602082015290156128055760405160e560020a62461bcd028152600401808060200182810382528381815181526020019150805190602001908083836000838110156107a757818101518382015260200161078f565b5061283e612811612747565b7febb05b386a8d34882b8711d156f463690983dc47815980fb82aeeff1aa43579e9063ffffffff612bb816565b565b6127447f4172f0f7d2289153072b0a6ca36959e0cbe2efc3afe50fc81636caa96338137b8263ffffffff612bb816565b60408051808201909152601881527f50524553414c455f54494d455f504552494f445f5a45524f00000000000000006020820152600067ffffffffffffffff8316116129015760405160e560020a62461bcd028152600401808060200182810382528381815181526020019150805190602001908083836000838110156107a757818101518382015260200161078f565b5060085467ffffffffffffffff16158061294b575061291e6130ae565b60085467ffffffffffffffff9182169161293f91168363ffffffff61311816565b67ffffffffffffffff16115b60408051808201909152601b81527f50524553414c455f494e56414c49445f54494d455f504552494f44000000000060208201529015156129d15760405160e560020a62461bcd028152600401808060200182810382528381815181526020019150805190602001908083836000838110156107a757818101518382015260200161078f565b506005805467ffffffffffffffff90921674010000000000000000000000000000000000000000027fffffffff0000000000000000ffffffffffffffffffffffffffffffffffffffff909216919091179055565b6000612a2f6124b5565b6003811115612a3a57fe5b60408051808201909152601581527f50524553414c455f494e56414c49445f5354415445000000000000000000000060208201529114612abf5760405160e560020a62461bcd028152600401808060200182810382528381815181526020019150805190602001908083836000838110156107a757818101518382015260200161078f565b50612ac86130ae565b60408051808201909152601981527f50524553414c455f494e56414c49445f4f50454e5f444154450000000000000060208201529067ffffffffffffffff9081169083161015612b5d5760405160e560020a62461bcd028152600401808060200182810382528381815181526020019150805190602001908083836000838110156107a757818101518382015260200161078f565b506008805467ffffffffffffffff831667ffffffffffffffff19909116811790915560408051918252517fab2aeaceefdbd207caa02bf58306335f7c37fd3b434a6cc547733be5e33a86779181900360200190a150565b5490565b9055565b600080831515612bcf5760009150612c6c565b50828202828482811515612bdf57fe5b60408051808201909152601181527f4d4154485f4d554c5f4f564552464c4f5700000000000000000000000000000060208201529291900414612c675760405160e560020a62461bcd028152600401808060200182810382528381815181526020019150805190602001908083836000838110156107a757818101518382015260200161078f565b508091505b5092915050565b600160a060020a038316301415612d2a57612c9e600160a060020a038516838363ffffffff61301916565b60408051808201909152601f81527f50524553414c455f544f4b454e5f5452414e534645525f5245564552544544006020820152901515612d245760405160e560020a62461bcd028152600401808060200182810382528381815181526020019150805190602001908083836000838110156107a757818101518382015260200161078f565b50611544565b612d45600160a060020a03851684848463ffffffff6131b316565b60408051808201909152601f81527f50524553414c455f544f4b454e5f5452414e534645525f5245564552544544006020820152901515612dcb5760405160e560020a62461bcd028152600401808060200182810382528381815181526020019150805190602001908083836000838110156107a757818101518382015260200161078f565b5050505050565b60408051808201909152601181527f4d4154485f4144445f4f564552464c4f5700000000000000000000000000000060208201526000908383019084821015612c675760405160e560020a62461bcd028152600401808060200182810382528381815181526020019150805190602001908083836000838110156107a757818101518382015260200161078f565b5490565b60408051808201909152600d81527f4d4154485f4449565f5a45524f0000000000000000000000000000000000000060208201526000908190818411612eef5760405160e560020a62461bcd028152600401808060200182810382528381815181526020019150805190602001908083836000838110156107a757818101518382015260200161078f565b508284811515612efb57fe5b04949350505050565b60408051600160a060020a0383166024808301919091528251808303909101815260449091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f70a08231000000000000000000000000000000000000000000000000000000001790526000908180612f848684613247565b60408051808201909152601c81527f534146455f4552435f32305f42414c414e43455f5245564552544544000000006020820152919350915082151561300f5760405160e560020a62461bcd028152600401808060200182810382528381815181526020019150805190602001908083836000838110156107a757818101518382015260200161078f565b5095945050505050565b60408051600160a060020a038416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb0000000000000000000000000000000000000000000000000000000017905260009061309b8582613278565b95945050505050565b8051602002815290565b60006116786130bb6132c6565b6132ca565b60085460009067ffffffffffffffff1615156130de57506000610ef7565b60085461310d9067ffffffffffffffff166130f76130ae565b67ffffffffffffffff169063ffffffff61336316565b9050610ef7565b9055565b60408051808201909152601381527f4d41544836345f4144445f4f564552464c4f570000000000000000000000000060208201526000908383019067ffffffffffffffff8086169083161015612c675760405160e560020a62461bcd028152600401808060200182810382528381815181526020019150805190602001908083836000838110156107a757818101518382015260200161078f565b60408051600160a060020a0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd0000000000000000000000000000000000000000000000000000000017905260009061323d8682613278565b9695505050505050565b6000806000806040516020818751602089018a5afa9250600083111561326c57805191505b50909590945092505050565b6000806040516020818551602087016000895af160008111156132bc573d80156132a957602081146132b2576132ba565b600193506132ba565b600183511493505b505b5090949350505050565b4290565b60408051808201909152601581527f55494e5436345f4e554d4245525f544f4f5f4249470000000000000000000000602082015260009067ffffffffffffffff83111561335c5760405160e560020a62461bcd028152600401808060200182810382528381815181526020019150805190602001908083836000838110156107a757818101518382015260200161078f565b5090919050565b60408051808201909152601481527f4d41544836345f5355425f554e444552464c4f570000000000000000000000006020820152600090819067ffffffffffffffff80861690851611156133fc5760405160e560020a62461bcd028152600401808060200182810382528381815181526020019150805190602001908083836000838110156107a757818101518382015260200161078f565b50505090039056004150505f415554485f4641494c4544000000000000000000000000000000000050524553414c455f434f4e54524143545f49535f454f41000000000000000000efa06053e2ca99a43c97c4a4f3d8a394ee3323a8ff237e625fba09fe30ceb0a4e855346402235fdd185c890e68d2c4ecad599b88587635ee285bce2fda58dacb494e49545f4e4f545f494e495449414c495a4544000000000000000000000000a165627a7a72305820c030cb6d2d8cc3e9e24008306b869d9800ce947468247e44b2d1b4779dc070b70029",
  "devdoc": {
    "methods": {
      "allowRecoverability(address)": {
        "details": "By default deriving from AragonApp makes it recoverable",
        "params": {
          "token": "Token address that would be recovered"
        },
        "return": "bool whether the app allows the recovery"
      },
      "canPerform(address,bytes32,uint256[])": {
        "details": "Check whether an action can be performed by a sender for a particular role on this app",
        "params": {
          "_params": "Permission params for the role",
          "_role": "Role on this app",
          "_sender": "Sender of the call"
        },
        "return": "Boolean indicating whether the sender has the permissions to perform the action.        Always returns false if the app hasn't been initialized yet."
      },
      "contribute(address,uint256)": {
        "params": {
          "_contributor": "The address of the contributor",
          "_value": "The amount of contribution token to be spent"
        }
      },
      "contributionToTokens(uint256)": {
        "params": {
          "_value": "The amount of contribution tokens to be used in that computation"
        }
      },
      "getInitializationBlock()": {
        "return": "Block number in which the contract was initialized"
      },
      "getRecoveryVault()": {
        "details": "Get the recovery vault for the app",
        "return": "Recovery vault address for the app"
      },
      "hasInitialized()": {
        "return": "Whether the contract has been initialized by the time of the current block"
      },
      "initialize(address,address,address,address,address,address,address,uint64,uint256,uint256,uint64)": {
        "params": {
          "_beneficiary": "The address of the beneficiary [to whom a percentage of the raised funds is be to be sent]",
          "_bondedToken": "The address of the bonded token",
          "_controller": "The address of the controller contract",
          "_erc20ContribToken": "The address of the token to be used to contribute",
          "_exchangeRate": "The exchangeRate [= 1/price] at which [bonded] tokens are to be purchased for that presale [in PPM]",
          "_marketMaker": "The address of the market maker contract",
          "_openDate": "The date upon which that presale is to be open [ignored if 0]",
          "_period": "The period within which to accept contribution for that presale",
          "_reserve": "The address of the reserve [pool] contract"
        }
      },
      "reduceBeneficiaryPct(uint64)": {
        "params": {
          "_pct": "New percentage to be set"
        }
      },
      "setOpenDate(uint64)": {
        "params": {
          "_date": "New date to be set"
        }
      },
      "setPeriod(uint64)": {
        "params": {
          "_period": "New duration to be set"
        }
      },
      "transferToVault(address)": {
        "params": {
          "_token": "Token balance to be sent to recovery vault."
        }
      }
    }
  },
  "userdoc": {
    "methods": {
      "close()": {
        "notice": "Close presale and open trading"
      },
      "contribute(address,uint256)": {
        "notice": "Contribute to the presale up to `@tokenAmount(self.erc20ContribToken(): address, _value)`"
      },
      "contributionToTokens(uint256)": {
        "notice": "Computes the amount of [bonded] tokens that would be purchased for `@tokenAmount(self.contributionToken(): address, _value)`"
      },
      "initialize(address,address,address,address,address,address,address,uint64,uint256,uint256,uint64)": {
        "notice": "Initialize presale"
      },
      "open()": {
        "notice": "Open presale [enabling users to contribute]"
      },
      "reduceBeneficiaryPct(uint64)": {
        "notice": "Reduce pre-minting for beneficiary percentage to `_pct`"
      },
      "refund(address,uint256)": {
        "notice": "Does nothing. Interface compliance."
      },
      "setOpenDate(uint64)": {
        "notice": "Set presale open date"
      },
      "setPeriod(uint64)": {
        "notice": "Set presale duration"
      },
      "state()": {
        "notice": "Returns the current state of that presale"
      },
      "transferToVault(address)": {
        "notice": "Send funds to recovery Vault. This contract should never receive funds,        but in case it does, this function allows one to recover them."
      }
    }
  }
}