{
  "address": "0x55fF1CB7e1049D62f9707B62d92B23f1a35e3B7C",
  "abi": [
    {
      "constant": true,
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "name": "",
          "type": "string"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_spender",
          "type": "address"
        },
        {
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_from",
          "type": "address"
        },
        {
          "name": "_to",
          "type": "address"
        },
        {
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "name": "",
          "type": "uint8"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_to",
          "type": "address"
        },
        {
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "name": "",
          "type": "string"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_who",
          "type": "address"
        },
        {
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_to",
          "type": "address"
        },
        {
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_owner",
          "type": "address"
        },
        {
          "name": "_spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "name": "_name",
          "type": "string"
        },
        {
          "name": "_symbol",
          "type": "string"
        },
        {
          "name": "_decimals",
          "type": "uint8"
        },
        {
          "name": "_initialAmount",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "minter",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Mint",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "burner",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Burn",
      "type": "event"
    }
  ],
  "transactionHash": "0xf7de89dc542e7162e7f0ecad73c2794dcf3149cdd4911fec6e2ac410b1cb0a08",
  "receipt": {
    "to": null,
    "from": "0x4D1A9fD1E1e67E83Ffe72Bdd769088d689993E4B",
    "contractAddress": "0x55fF1CB7e1049D62f9707B62d92B23f1a35e3B7C",
    "transactionIndex": 0,
    "gasUsed": "951430",
    "logsBloom": "0x
    "blockHash": "0x2c92e054e20e14ec62c3e70a862f664292b73791880887d60b67b1b1f9613555",
    "transactionHash": "0xf7de89dc542e7162e7f0ecad73c2794dcf3149cdd4911fec6e2ac410b1cb0a08",
    "logs": [],
    "blockNumber": 2307593,
    "cumulativeGasUsed": "951430",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "Bonded Token",
    "BOND",
    18,
    0
  ],
  "solcInputHash": "c0610d08bb5b39d5a913143ed6b9b91b",
  "metadata": "{\"compiler\":{\"version\":\"0.4.24+commit.e67f0147\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_who\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_symbol\",\"type\":\"string\"},{\"name\":\"_decimals\",\"type\":\"uint8\"},{\"name\":\"_initialAmount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"minter\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"}],\"devdoc\":{\"methods\":{}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"contracts/test/MockedContinuousToken.sol\":\"MockedContinuousToken\"},\"evmVersion\":\"byzantium\",\"libraries\":{\"__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@aragon/os/contracts/lib/math/SafeMath.sol\":{\"content\":\"// See https://github.com/OpenZeppelin/openzeppelin-solidity/blob/d51e38758e1d985661534534d5c61e27bece5042/contracts/math/SafeMath.sol\\n// Adapted to use pragma ^0.4.24 and satisfy our linter rules\\n\\npragma solidity ^0.4.24;\\n\\n\\n/**\\n * @title SafeMath\\n * @dev Math operations with safety checks that revert on error\\n */\\nlibrary SafeMath {\\n    string private constant ERROR_ADD_OVERFLOW = \\\"MATH_ADD_OVERFLOW\\\";\\n    string private constant ERROR_SUB_UNDERFLOW = \\\"MATH_SUB_UNDERFLOW\\\";\\n    string private constant ERROR_MUL_OVERFLOW = \\\"MATH_MUL_OVERFLOW\\\";\\n    string private constant ERROR_DIV_ZERO = \\\"MATH_DIV_ZERO\\\";\\n\\n    /**\\n    * @dev Multiplies two numbers, reverts on overflow.\\n    */\\n    function mul(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\\n        if (_a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = _a * _b;\\n        require(c / _a == _b, ERROR_MUL_OVERFLOW);\\n\\n        return c;\\n    }\\n\\n    /**\\n    * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\\n    */\\n    function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n        require(_b > 0, ERROR_DIV_ZERO); // Solidity only automatically asserts when dividing by 0\\n        uint256 c = _a / _b;\\n        // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n    * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\\n    */\\n    function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n        require(_b <= _a, ERROR_SUB_UNDERFLOW);\\n        uint256 c = _a - _b;\\n\\n        return c;\\n    }\\n\\n    /**\\n    * @dev Adds two numbers, reverts on overflow.\\n    */\\n    function add(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n        uint256 c = _a + _b;\\n        require(c >= _a, ERROR_ADD_OVERFLOW);\\n\\n        return c;\\n    }\\n\\n    /**\\n    * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\\n    * reverts when dividing by zero.\\n    */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b != 0, ERROR_DIV_ZERO);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x2e11c8dcead82c452ef452f4dbced40e20ae105fa4145d920dac6e077b31d846\"},\"contracts/IContinuousToken.sol\":{\"content\":\"pragma solidity 0.4.24;\\n\\n/// All the tokens that want to be used in the bonding curve must implement this interface.\\n///\\n/// By implementing this interface, the BC will be able to mint and burn the tokens when trading.\\n///\\n/// @dev Keep in mind that both burn and mint functions should be governed by the MarketMaker and\\n///      the Presale contracts.\\ninterface IContinuousToken {\\n    /**\\n     * @dev Creates `amount` new tokens for `to`.\\n     *\\n     * See {ERC20-_mint}.\\n     *\\n     * Requirements:\\n     *\\n     * - This operation should fail if it's not called by the MarketMaker or the Presale contracts\\n     */\\n    function mint(address _to, uint256 _value) external;\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - This operation should fail if it's not called by the MarketMaker\\n     */\\n    function burn(address _who, uint256 _value) external;\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address _owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x1730f5a2132197ba1f6b329f8bc21484783f35dc65ffaa8f75368cfb1222c74a\"},\"contracts/test/MockedContinuousToken.sol\":{\"content\":\"/**\\n * Copyright 2017-2021, bZeroX, LLC. All Rights Reserved.\\n * Licensed under the Apache License, Version 2.0.\\n */\\n\\npragma solidity 0.4.24;\\n\\nimport \\\"@aragon/os/contracts/lib/math/SafeMath.sol\\\";\\nimport \\\"../IContinuousToken.sol\\\";\\n\\n/// This token was created for testing purposes. It can be used on a testnet or local environment\\n/// to mint tokens and play around with them.\\n/// IT SHOULD NOT BE USED IN A PRODUCTION DEPLOYMENT\\ncontract MockedContinuousToken is IContinuousToken {\\n    using SafeMath for uint256;\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n    event Mint(address indexed minter, uint256 value);\\n    event Burn(address indexed burner, uint256 value);\\n\\n    string public name;\\n    string public symbol;\\n    uint8 public decimals;\\n\\n    mapping(address => uint256) internal balances;\\n    mapping(address => mapping(address => uint256)) internal allowed;\\n    uint256 internal totalSupply_;\\n\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        uint8 _decimals,\\n        uint256 _initialAmount\\n    ) public {\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = _decimals;\\n\\n        if (_initialAmount != 0) {\\n            mint(msg.sender, _initialAmount);\\n        }\\n    }\\n\\n    function approve(address _spender, uint256 _value) public returns (bool) {\\n        allowed[msg.sender][_spender] = _value;\\n        emit Approval(msg.sender, _spender, _value);\\n        return true;\\n    }\\n\\n    function transfer(address _to, uint256 _value) public returns (bool) {\\n        require(_value <= balances[msg.sender] && _to != address(0), \\\"invalid transfer\\\");\\n\\n        balances[msg.sender] = balances[msg.sender].sub(_value);\\n        balances[_to] = balances[_to].add(_value);\\n\\n        emit Transfer(msg.sender, _to, _value);\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address _from,\\n        address _to,\\n        uint256 _value\\n    ) public returns (bool) {\\n        uint256 allowanceAmount = allowed[_from][msg.sender];\\n        require(_value <= balances[_from] && _value <= allowanceAmount && _to != address(0), \\\"invalid transfer\\\");\\n\\n        balances[_from] = balances[_from].sub(_value);\\n        balances[_to] = balances[_to].add(_value);\\n        if (allowanceAmount < uint256(-1)) {\\n            allowed[_from][msg.sender] = allowanceAmount.sub(_value);\\n        }\\n\\n        emit Transfer(_from, _to, _value);\\n        return true;\\n    }\\n\\n    function mint(address _to, uint256 _value) public {\\n        require(_to != address(0), \\\"no mint allowed\\\");\\n        totalSupply_ = totalSupply_.add(_value);\\n        balances[_to] = balances[_to].add(_value);\\n\\n        emit Mint(_to, _value);\\n        emit Transfer(address(0), _to, _value);\\n    }\\n\\n    function burn(address _who, uint256 _value) public {\\n        require(_who != address(0), \\\"no burn allowed\\\");\\n        require(_value <= balances[_who], \\\"balance too low\\\");\\n        // no need to require _value <= totalSupply, since that would imply the\\n        // sender's balance is greater than the totalSupply, which *should* be an assertion failure\\n\\n        balances[_who] = balances[_who].sub(_value);\\n        totalSupply_ = totalSupply_.sub(_value);\\n\\n        emit Burn(_who, _value);\\n        emit Transfer(_who, address(0), _value);\\n    }\\n\\n    function totalSupply() public view returns (uint256) {\\n        return totalSupply_;\\n    }\\n\\n    function balanceOf(address _owner) public view returns (uint256) {\\n        return balances[_owner];\\n    }\\n\\n    function allowance(address _owner, address _spender) public view returns (uint256) {\\n        return allowed[_owner][_spender];\\n    }\\n}\\n\",\"keccak256\":\"0x77ebdf6c08c475bf8270823281249fa78079860fa2b9c4d309ef234289b6b81d\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162000f3938038062000f3983398101604090815281516020808401519284015160608501519285018051909594909401939092916200005a91600091870190620002f5565b50825162000070906001906020860190620002f5565b506002805460ff191660ff841617905580156200009c576200009c3382640100000000620000a6810204565b505050506200039a565b600160a060020a03821615156200011e57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f6e6f206d696e7420616c6c6f7765640000000000000000000000000000000000604482015290519081900360640190fd5b6005546200013b908264010000000062000aad6200020882021704565b600555600160a060020a03821660009081526003602052604090205462000171908264010000000062000aad6200020882021704565b600160a060020a038316600081815260036020908152604091829020939093558051848152905191927f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d412139688592918290030190a2604080518281529051600160a060020a038416916000917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a35050565b60408051808201909152601181527f4d4154485f4144445f4f564552464c4f5700000000000000000000000000000060208201526000908383019084821015620002ed576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015620002b157818101518382015260200162000297565b50505050905090810190601f168015620002df5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b509392505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200033857805160ff191683800117855562000368565b8280016001018555821562000368579182015b82811115620003685782518255916020019190600101906200034b565b50620003769291506200037a565b5090565b6200039791905b8082111562000376576000815560010162000381565b90565b610b8f80620003aa6000396000f3006080604052600436106100ae5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100b3578063095ea7b31461013d57806318160ddd1461017557806323b872dd1461019c578063313ce567146101c657806340c10f19146101f157806370a082311461021757806395d89b41146102385780639dc29fac1461024d578063a9059cbb14610271578063dd62ed3e14610295575b600080fd5b3480156100bf57600080fd5b506100c86102bc565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101025781810151838201526020016100ea565b50505050905090810190601f16801561012f5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561014957600080fd5b50610161600160a060020a036004351660243561034a565b604080519115158252519081900360200190f35b34801561018157600080fd5b5061018a6103b0565b60408051918252519081900360200190f35b3480156101a857600080fd5b50610161600160a060020a03600435811690602435166044356103b6565b3480156101d257600080fd5b506101db61055b565b6040805160ff9092168252519081900360200190f35b3480156101fd57600080fd5b50610215600160a060020a0360043516602435610564565b005b34801561022357600080fd5b5061018a600160a060020a0360043516610688565b34801561024457600080fd5b506100c86106a3565b34801561025957600080fd5b50610215600160a060020a03600435166024356106fd565b34801561027d57600080fd5b50610161600160a060020a0360043516602435610897565b3480156102a157600080fd5b5061018a600160a060020a03600435811690602435166109b2565b6000805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156103425780601f1061031757610100808354040283529160200191610342565b820191906000526020600020905b81548152906001019060200180831161032557829003601f168201915b505050505081565b336000818152600460209081526040808320600160a060020a038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a350600192915050565b60055490565b600160a060020a0383166000818152600460209081526040808320338452825280832054938352600390915281205490919083118015906103f75750808311155b801561040b5750600160a060020a03841615155b1515610461576040805160e560020a62461bcd02815260206004820152601060248201527f696e76616c6964207472616e7366657200000000000000000000000000000000604482015290519081900360640190fd5b600160a060020a03851660009081526003602052604090205461048a908463ffffffff6109dd16565b600160a060020a0380871660009081526003602052604080822093909355908616815220546104bf908463ffffffff610aad16565b600160a060020a038516600090815260036020526040902055600019811015610517576104f2818463ffffffff6109dd16565b600160a060020a03861660009081526004602090815260408083203384529091529020555b83600160a060020a031685600160a060020a0316600080516020610b44833981519152856040518082815260200191505060405180910390a3506001949350505050565b60025460ff1681565b600160a060020a03821615156105c4576040805160e560020a62461bcd02815260206004820152600f60248201527f6e6f206d696e7420616c6c6f7765640000000000000000000000000000000000604482015290519081900360640190fd5b6005546105d7908263ffffffff610aad16565b600555600160a060020a038216600090815260036020526040902054610603908263ffffffff610aad16565b600160a060020a038316600081815260036020908152604091829020939093558051848152905191927f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d412139688592918290030190a2604080518281529051600160a060020a03841691600091600080516020610b448339815191529181900360200190a35050565b600160a060020a031660009081526003602052604090205490565b60018054604080516020600284861615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156103425780601f1061031757610100808354040283529160200191610342565b600160a060020a038216151561075d576040805160e560020a62461bcd02815260206004820152600f60248201527f6e6f206275726e20616c6c6f7765640000000000000000000000000000000000604482015290519081900360640190fd5b600160a060020a0382166000908152600360205260409020548111156107cd576040805160e560020a62461bcd02815260206004820152600f60248201527f62616c616e636520746f6f206c6f770000000000000000000000000000000000604482015290519081900360640190fd5b600160a060020a0382166000908152600360205260409020546107f6908263ffffffff6109dd16565b600160a060020a038316600090815260036020526040902055600554610822908263ffffffff6109dd16565b600555604080518281529051600160a060020a038416917fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5919081900360200190a2604080518281529051600091600160a060020a03851691600080516020610b448339815191529181900360200190a35050565b3360009081526003602052604081205482118015906108be5750600160a060020a03831615155b1515610914576040805160e560020a62461bcd02815260206004820152601060248201527f696e76616c6964207472616e7366657200000000000000000000000000000000604482015290519081900360640190fd5b33600090815260036020526040902054610934908363ffffffff6109dd16565b3360009081526003602052604080822092909255600160a060020a03851681522054610966908363ffffffff610aad16565b600160a060020a038416600081815260036020908152604091829020939093558051858152905191923392600080516020610b448339815191529281900390910190a350600192915050565b600160a060020a03918216600090815260046020908152604080832093909416825291909152205490565b60408051808201909152601281527f4d4154485f5355425f554e444552464c4f5700000000000000000000000000006020820152600090819084841115610aa55760405160e560020a62461bcd0281526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610a6a578181015183820152602001610a52565b50505050905090810190601f168015610a975780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b60408051808201909152601181527f4d4154485f4144445f4f564552464c4f5700000000000000000000000000000060208201526000908383019084821015610b3b5760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610a6a578181015183820152602001610a52565b5093925050505600ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa165627a7a723058208e8c3bc1e297b49ba08906a7e738677627fe6b12b2ee7498cefcadd66d0c43000029",
  "deployedBytecode": "0x6080604052600436106100ae5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100b3578063095ea7b31461013d57806318160ddd1461017557806323b872dd1461019c578063313ce567146101c657806340c10f19146101f157806370a082311461021757806395d89b41146102385780639dc29fac1461024d578063a9059cbb14610271578063dd62ed3e14610295575b600080fd5b3480156100bf57600080fd5b506100c86102bc565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101025781810151838201526020016100ea565b50505050905090810190601f16801561012f5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561014957600080fd5b50610161600160a060020a036004351660243561034a565b604080519115158252519081900360200190f35b34801561018157600080fd5b5061018a6103b0565b60408051918252519081900360200190f35b3480156101a857600080fd5b50610161600160a060020a03600435811690602435166044356103b6565b3480156101d257600080fd5b506101db61055b565b6040805160ff9092168252519081900360200190f35b3480156101fd57600080fd5b50610215600160a060020a0360043516602435610564565b005b34801561022357600080fd5b5061018a600160a060020a0360043516610688565b34801561024457600080fd5b506100c86106a3565b34801561025957600080fd5b50610215600160a060020a03600435166024356106fd565b34801561027d57600080fd5b50610161600160a060020a0360043516602435610897565b3480156102a157600080fd5b5061018a600160a060020a03600435811690602435166109b2565b6000805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156103425780601f1061031757610100808354040283529160200191610342565b820191906000526020600020905b81548152906001019060200180831161032557829003601f168201915b505050505081565b336000818152600460209081526040808320600160a060020a038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a350600192915050565b60055490565b600160a060020a0383166000818152600460209081526040808320338452825280832054938352600390915281205490919083118015906103f75750808311155b801561040b5750600160a060020a03841615155b1515610461576040805160e560020a62461bcd02815260206004820152601060248201527f696e76616c6964207472616e7366657200000000000000000000000000000000604482015290519081900360640190fd5b600160a060020a03851660009081526003602052604090205461048a908463ffffffff6109dd16565b600160a060020a0380871660009081526003602052604080822093909355908616815220546104bf908463ffffffff610aad16565b600160a060020a038516600090815260036020526040902055600019811015610517576104f2818463ffffffff6109dd16565b600160a060020a03861660009081526004602090815260408083203384529091529020555b83600160a060020a031685600160a060020a0316600080516020610b44833981519152856040518082815260200191505060405180910390a3506001949350505050565b60025460ff1681565b600160a060020a03821615156105c4576040805160e560020a62461bcd02815260206004820152600f60248201527f6e6f206d696e7420616c6c6f7765640000000000000000000000000000000000604482015290519081900360640190fd5b6005546105d7908263ffffffff610aad16565b600555600160a060020a038216600090815260036020526040902054610603908263ffffffff610aad16565b600160a060020a038316600081815260036020908152604091829020939093558051848152905191927f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d412139688592918290030190a2604080518281529051600160a060020a03841691600091600080516020610b448339815191529181900360200190a35050565b600160a060020a031660009081526003602052604090205490565b60018054604080516020600284861615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156103425780601f1061031757610100808354040283529160200191610342565b600160a060020a038216151561075d576040805160e560020a62461bcd02815260206004820152600f60248201527f6e6f206275726e20616c6c6f7765640000000000000000000000000000000000604482015290519081900360640190fd5b600160a060020a0382166000908152600360205260409020548111156107cd576040805160e560020a62461bcd02815260206004820152600f60248201527f62616c616e636520746f6f206c6f770000000000000000000000000000000000604482015290519081900360640190fd5b600160a060020a0382166000908152600360205260409020546107f6908263ffffffff6109dd16565b600160a060020a038316600090815260036020526040902055600554610822908263ffffffff6109dd16565b600555604080518281529051600160a060020a038416917fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5919081900360200190a2604080518281529051600091600160a060020a03851691600080516020610b448339815191529181900360200190a35050565b3360009081526003602052604081205482118015906108be5750600160a060020a03831615155b1515610914576040805160e560020a62461bcd02815260206004820152601060248201527f696e76616c6964207472616e7366657200000000000000000000000000000000604482015290519081900360640190fd5b33600090815260036020526040902054610934908363ffffffff6109dd16565b3360009081526003602052604080822092909255600160a060020a03851681522054610966908363ffffffff610aad16565b600160a060020a038416600081815260036020908152604091829020939093558051858152905191923392600080516020610b448339815191529281900390910190a350600192915050565b600160a060020a03918216600090815260046020908152604080832093909416825291909152205490565b60408051808201909152601281527f4d4154485f5355425f554e444552464c4f5700000000000000000000000000006020820152600090819084841115610aa55760405160e560020a62461bcd0281526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610a6a578181015183820152602001610a52565b50505050905090810190601f168015610a975780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b60408051808201909152601181527f4d4154485f4144445f4f564552464c4f5700000000000000000000000000000060208201526000908383019084821015610b3b5760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610a6a578181015183820152602001610a52565b5093925050505600ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa165627a7a723058208e8c3bc1e297b49ba08906a7e738677627fe6b12b2ee7498cefcadd66d0c43000029",
  "devdoc": {
    "methods": {}
  },
  "userdoc": {
    "methods": {}
  }
}