{
  "address": "0x03d917a2642BE52304B32B55D92f8BF76f2e0b80",
  "abi": [
    {
      "constant": true,
      "inputs": [],
      "name": "hasInitialized",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "PPM",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "marketMaker",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_script",
          "type": "bytes"
        }
      ],
      "name": "getEVMScriptExecutor",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "tokenManager",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_period",
          "type": "uint64"
        }
      ],
      "name": "setPeriod",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getRecoveryVault",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "beneficiary",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "exchangeRate",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "",
          "type": "address"
        },
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "refund",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "close",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_date",
          "type": "uint64"
        }
      ],
      "name": "setOpenDate",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "contributionToken",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "mintingForBeneficiaryPct",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "OPEN_ROLE",
      "outputs": [
        {
          "name": "",
          "type": "bytes32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "REDUCE_BENEFICIARY_PCT_ROLE",
      "outputs": [
        {
          "name": "",
          "type": "bytes32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "token",
          "type": "address"
        }
      ],
      "name": "allowRecoverability",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "appId",
      "outputs": [
        {
          "name": "",
          "type": "bytes32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_contributor",
          "type": "address"
        },
        {
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "contribute",
      "outputs": [],
      "payable": true,
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getInitializationBlock",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "totalSold",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "contributionToTokens",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "transferToVault",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_sender",
          "type": "address"
        },
        {
          "name": "_role",
          "type": "bytes32"
        },
        {
          "name": "_params",
          "type": "uint256[]"
        }
      ],
      "name": "canPerform",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "CONTRIBUTE_ROLE",
      "outputs": [
        {
          "name": "",
          "type": "bytes32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getEVMScriptRegistry",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_pct",
          "type": "uint64"
        }
      ],
      "name": "reduceBeneficiaryPct",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "state",
      "outputs": [
        {
          "name": "",
          "type": "uint8"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_controller",
          "type": "address"
        },
        {
          "name": "_marketMaker",
          "type": "address"
        },
        {
          "name": "_tokenManager",
          "type": "address"
        },
        {
          "name": "_reserve",
          "type": "address"
        },
        {
          "name": "_beneficiary",
          "type": "address"
        },
        {
          "name": "_erc20ContribToken",
          "type": "address"
        },
        {
          "name": "_period",
          "type": "uint64"
        },
        {
          "name": "_exchangeRate",
          "type": "uint256"
        },
        {
          "name": "_mintingForBeneficiaryPct",
          "type": "uint256"
        },
        {
          "name": "_openDate",
          "type": "uint64"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "isClosed",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "totalRaised",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "reserve",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "kernel",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "isPetrified",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "openDate",
      "outputs": [
        {
          "name": "",
          "type": "uint64"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "period",
      "outputs": [
        {
          "name": "",
          "type": "uint64"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "controller",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "open",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "date",
          "type": "uint64"
        }
      ],
      "name": "SetOpenDate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "pct",
          "type": "uint256"
        }
      ],
      "name": "ReduceBeneficiatyPct",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "Close",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "contributor",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "value",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Contribute",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "executor",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "script",
          "type": "bytes"
        },
        {
          "indexed": false,
          "name": "input",
          "type": "bytes"
        },
        {
          "indexed": false,
          "name": "returnData",
          "type": "bytes"
        }
      ],
      "name": "ScriptResult",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "vault",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "RecoverToVault",
      "type": "event"
    }
  ],
  "transactionHash": "0xe3a8e1dc8da02cc42cc31196ad2416905859831d17239e16edb62c0d07bf04a7",
  "receipt": {
    "to": null,
    "from": "0x362A9C55d54da572a7a5853171dE8Fd04d1Da800",
    "contractAddress": "0x03d917a2642BE52304B32B55D92f8BF76f2e0b80",
    "transactionIndex": 0,
    "gasUsed": "2934811",
    "logsBloom": "0x
    "blockHash": "0x797850d79827499df683060ec7a039ec595c76b4cd449e899c06e84d6f136379",
    "transactionHash": "0xe3a8e1dc8da02cc42cc31196ad2416905859831d17239e16edb62c0d07bf04a7",
    "logs": [],
    "blockNumber": 1,
    "cumulativeGasUsed": "2934811",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "73f0b14ba9b59a87bafad8cc1d104ba5",
  "metadata": "{\"compiler\":{\"version\":\"0.4.24+commit.e67f0147\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":true,\"inputs\":[],\"name\":\"hasInitialized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PPM\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"marketMaker\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_script\",\"type\":\"bytes\"}],\"name\":\"getEVMScriptExecutor\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokenManager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_period\",\"type\":\"uint64\"}],\"name\":\"setPeriod\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRecoveryVault\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"beneficiary\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"exchangeRate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"refund\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"close\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_date\",\"type\":\"uint64\"}],\"name\":\"setOpenDate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"contributionToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mintingForBeneficiaryPct\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"OPEN_ROLE\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"REDUCE_BENEFICIARY_PCT_ROLE\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"}],\"name\":\"allowRecoverability\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"appId\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_contributor\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"contribute\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getInitializationBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"contributionToTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"transferToVault\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"},{\"name\":\"_role\",\"type\":\"bytes32\"},{\"name\":\"_params\",\"type\":\"uint256[]\"}],\"name\":\"canPerform\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CONTRIBUTE_ROLE\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getEVMScriptRegistry\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_pct\",\"type\":\"uint64\"}],\"name\":\"reduceBeneficiaryPct\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"state\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_controller\",\"type\":\"address\"},{\"name\":\"_marketMaker\",\"type\":\"address\"},{\"name\":\"_tokenManager\",\"type\":\"address\"},{\"name\":\"_reserve\",\"type\":\"address\"},{\"name\":\"_beneficiary\",\"type\":\"address\"},{\"name\":\"_erc20ContribToken\",\"type\":\"address\"},{\"name\":\"_period\",\"type\":\"uint64\"},{\"name\":\"_exchangeRate\",\"type\":\"uint256\"},{\"name\":\"_mintingForBeneficiaryPct\",\"type\":\"uint256\"},{\"name\":\"_openDate\",\"type\":\"uint64\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isClosed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"reserve\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"kernel\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isPetrified\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"openDate\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"period\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"open\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"date\",\"type\":\"uint64\"}],\"name\":\"SetOpenDate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"pct\",\"type\":\"uint256\"}],\"name\":\"ReduceBeneficiatyPct\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Close\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"contributor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Contribute\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"executor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"script\",\"type\":\"bytes\"},{\"indexed\":false,\"name\":\"input\",\"type\":\"bytes\"},{\"indexed\":false,\"name\":\"returnData\",\"type\":\"bytes\"}],\"name\":\"ScriptResult\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"vault\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RecoverToVault\",\"type\":\"event\"}],\"devdoc\":{\"methods\":{\"allowRecoverability(address)\":{\"details\":\"By default deriving from AragonApp makes it recoverable\",\"params\":{\"token\":\"Token address that would be recovered\"},\"return\":\"bool whether the app allows the recovery\"},\"canPerform(address,bytes32,uint256[])\":{\"details\":\"Check whether an action can be performed by a sender for a particular role on this app\",\"params\":{\"_params\":\"Permission params for the role\",\"_role\":\"Role on this app\",\"_sender\":\"Sender of the call\"},\"return\":\"Boolean indicating whether the sender has the permissions to perform the action.        Always returns false if the app hasn't been initialized yet.\"},\"contribute(address,uint256)\":{\"params\":{\"_contributor\":\"The address of the contributor\",\"_value\":\"The amount of contribution token to be spent\"}},\"contributionToTokens(uint256)\":{\"params\":{\"_value\":\"The amount of contribution tokens to be used in that computation\"}},\"getInitializationBlock()\":{\"return\":\"Block number in which the contract was initialized\"},\"getRecoveryVault()\":{\"details\":\"Get the recovery vault for the app\",\"return\":\"Recovery vault address for the app\"},\"hasInitialized()\":{\"return\":\"Whether the contract has been initialized by the time of the current block\"},\"initialize(address,address,address,address,address,address,uint64,uint256,uint256,uint64)\":{\"params\":{\"_beneficiary\":\"The address of the beneficiary [to whom a percentage of the raised funds is be to be sent]\",\"_controller\":\"The address of the controller contract\",\"_erc20ContribToken\":\"The address of the token to be used to contribute\",\"_exchangeRate\":\"The exchangeRate [= 1/price] at which [bonded] tokens are to be purchased for that presale [in PPM]\",\"_marketMaker\":\"The address of the market maker contract\",\"_openDate\":\"The date upon which that presale is to be open [ignored if 0]\",\"_period\":\"The period within which to accept contribution for that presale\",\"_reserve\":\"The address of the reserve [pool] contract\",\"_tokenManager\":\"The address of the [bonded] token manager contract\"}},\"reduceBeneficiaryPct(uint64)\":{\"params\":{\"_pct\":\"New percentage to be set\"}},\"setOpenDate(uint64)\":{\"params\":{\"_date\":\"New date to be set\"}},\"setPeriod(uint64)\":{\"params\":{\"_period\":\"New duration to be set\"}},\"transferToVault(address)\":{\"params\":{\"_token\":\"Token balance to be sent to recovery vault.\"}}}},\"userdoc\":{\"methods\":{\"close()\":{\"notice\":\"Close presale and open trading\"},\"contribute(address,uint256)\":{\"notice\":\"Contribute to the presale up to `@tokenAmount(self.erc20ContribToken(): address, _value)`\"},\"contributionToTokens(uint256)\":{\"notice\":\"Computes the amount of [bonded] tokens that would be purchased for `@tokenAmount(self.contributionToken(): address, _value)`\"},\"initialize(address,address,address,address,address,address,uint64,uint256,uint256,uint64)\":{\"notice\":\"Initialize presale\"},\"open()\":{\"notice\":\"Open presale [enabling users to contribute]\"},\"reduceBeneficiaryPct(uint64)\":{\"notice\":\"Reduce pre-minting for beneficiary percentage to `_pct`\"},\"refund(address,uint256)\":{\"notice\":\"Does nothing. Interface compliance.\"},\"setOpenDate(uint64)\":{\"notice\":\"Set presale open date\"},\"setPeriod(uint64)\":{\"notice\":\"Set presale duration\"},\"state()\":{\"notice\":\"Returns the current state of that presale\"},\"transferToVault(address)\":{\"notice\":\"Send funds to recovery Vault. This contract should never receive funds,        but in case it does, this function allows one to recover them.\"}}}},\"settings\":{\"compilationTarget\":{\"contracts/BalanceRedirectPresale.sol\":\"BalanceRedirectPresale\"},\"evmVersion\":\"byzantium\",\"libraries\":{},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@ablack/fundraising-shared-interfaces/contracts/IAragonFundraisingController.sol\":{\"content\":\"pragma solidity 0.4.24;\\n\\n\\ncontract IAragonFundraisingController {\\n    function openTrading() external;\\n    function updateTappedAmount(address _token) external;\\n    function collateralsToBeClaimed(address _collateral) public view returns (uint256);\\n    function balanceOf(address _who, address _token) public view returns (uint256);\\n}\\n\",\"keccak256\":\"0x0cb702ca7fcfbf63f1b34ccad6f60780b416feb6062646d643dd8147cd66bdf0\"},\"@ablack/fundraising-shared-interfaces/contracts/IPresale.sol\":{\"content\":\"pragma solidity 0.4.24;\\n\\n\\ncontract IPresale {\\n    function open() external;\\n    function close() external;\\n    function contribute(address _contributor, uint256 _value) external payable;\\n    function refund(address _contributor, uint256 _vestedPurchaseId) external;\\n    function contributionToTokens(uint256 _value) public view returns (uint256);\\n    function contributionToken() public view returns (address);\\n }\",\"keccak256\":\"0xedab988d1fb194cd99733ea8312356d8c58e8d07815fc144fe8f5d08a09bc23e\"},\"@aragon/apps-shared-minime/contracts/ITokenController.sol\":{\"content\":\"pragma solidity ^0.4.24;\\n\\n/// @dev The token controller contract must implement these functions\\n\\n\\ninterface ITokenController {\\n    /// @notice Called when `_owner` sends ether to the MiniMe Token contract\\n    /// @param _owner The address that sent the ether to create tokens\\n    /// @return True if the ether is accepted, false if it throws\\n    function proxyPayment(address _owner) external payable returns(bool);\\n\\n    /// @notice Notifies the controller about a token transfer allowing the\\n    ///  controller to react if desired\\n    /// @param _from The origin of the transfer\\n    /// @param _to The destination of the transfer\\n    /// @param _amount The amount of the transfer\\n    /// @return False if the controller does not authorize the transfer\\n    function onTransfer(address _from, address _to, uint _amount) external returns(bool);\\n\\n    /// @notice Notifies the controller about an approval allowing the\\n    ///  controller to react if desired\\n    /// @param _owner The address that calls `approve()`\\n    /// @param _spender The spender in the `approve()` call\\n    /// @param _amount The amount in the `approve()` call\\n    /// @return False if the controller does not authorize the approval\\n    function onApprove(address _owner, address _spender, uint _amount) external returns(bool);\\n}\\n\",\"keccak256\":\"0x030d1ea5543fd23d3c962cbf34b1c3b6e15d9bbfb711416e1cf4160c3bcdccaa\"},\"@aragon/apps-shared-minime/contracts/MiniMeToken.sol\":{\"content\":\"pragma solidity ^0.4.24;\\n\\n/*\\n    Copyright 2016, Jordi Baylina\\n    This program is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU General Public License as published by\\n    the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n    This program is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU General Public License for more details.\\n    You should have received a copy of the GNU General Public License\\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n */\\n\\n/// @title MiniMeToken Contract\\n/// @author Jordi Baylina\\n/// @dev This token contract's goal is to make it easy for anyone to clone this\\n///  token using the token distribution at a given block, this will allow DAO's\\n///  and DApps to upgrade their features in a decentralized manner without\\n///  affecting the original token\\n/// @dev It is ERC20 compliant, but still needs to under go further testing.\\n\\nimport \\\"./ITokenController.sol\\\";\\n\\ncontract Controlled {\\n    /// @notice The address of the controller is the only address that can call\\n    ///  a function with this modifier\\n    modifier onlyController {\\n        require(msg.sender == controller);\\n        _;\\n    }\\n\\n    address public controller;\\n\\n    function Controlled()  public { controller = msg.sender;}\\n\\n    /// @notice Changes the controller of the contract\\n    /// @param _newController The new controller of the contract\\n    function changeController(address _newController) onlyController  public {\\n        controller = _newController;\\n    }\\n}\\n\\ncontract ApproveAndCallFallBack {\\n    function receiveApproval(\\n        address from,\\n        uint256 _amount,\\n        address _token,\\n        bytes _data\\n    ) public;\\n}\\n\\n/// @dev The actual token contract, the default controller is the msg.sender\\n///  that deploys the contract, so usually this token will be deployed by a\\n///  token controller contract, which Giveth will call a \\\"Campaign\\\"\\ncontract MiniMeToken is Controlled {\\n\\n    string public name;                //The Token's name: e.g. DigixDAO Tokens\\n    uint8 public decimals;             //Number of decimals of the smallest unit\\n    string public symbol;              //An identifier: e.g. REP\\n    string public version = \\\"MMT_0.1\\\"; //An arbitrary versioning scheme\\n\\n\\n    /// @dev `Checkpoint` is the structure that attaches a block number to a\\n    ///  given value, the block number attached is the one that last changed the\\n    ///  value\\n    struct Checkpoint {\\n\\n        // `fromBlock` is the block number that the value was generated from\\n        uint128 fromBlock;\\n\\n        // `value` is the amount of tokens at a specific block number\\n        uint128 value;\\n    }\\n\\n    // `parentToken` is the Token address that was cloned to produce this token;\\n    //  it will be 0x0 for a token that was not cloned\\n    MiniMeToken public parentToken;\\n\\n    // `parentSnapShotBlock` is the block number from the Parent Token that was\\n    //  used to determine the initial distribution of the Clone Token\\n    uint public parentSnapShotBlock;\\n\\n    // `creationBlock` is the block number that the Clone Token was created\\n    uint public creationBlock;\\n\\n    // `balances` is the map that tracks the balance of each address, in this\\n    //  contract when the balance changes the block number that the change\\n    //  occurred is also included in the map\\n    mapping (address => Checkpoint[]) balances;\\n\\n    // `allowed` tracks any extra transfer rights as in all ERC20 tokens\\n    mapping (address => mapping (address => uint256)) allowed;\\n\\n    // Tracks the history of the `totalSupply` of the token\\n    Checkpoint[] totalSupplyHistory;\\n\\n    // Flag that determines if the token is transferable or not.\\n    bool public transfersEnabled;\\n\\n    // The factory used to create new clone tokens\\n    MiniMeTokenFactory public tokenFactory;\\n\\n////////////////\\n// Constructor\\n////////////////\\n\\n    /// @notice Constructor to create a MiniMeToken\\n    /// @param _tokenFactory The address of the MiniMeTokenFactory contract that\\n    ///  will create the Clone token contracts, the token factory needs to be\\n    ///  deployed first\\n    /// @param _parentToken Address of the parent token, set to 0x0 if it is a\\n    ///  new token\\n    /// @param _parentSnapShotBlock Block of the parent token that will\\n    ///  determine the initial distribution of the clone token, set to 0 if it\\n    ///  is a new token\\n    /// @param _tokenName Name of the new token\\n    /// @param _decimalUnits Number of decimals of the new token\\n    /// @param _tokenSymbol Token Symbol for the new token\\n    /// @param _transfersEnabled If true, tokens will be able to be transferred\\n    function MiniMeToken(\\n        MiniMeTokenFactory _tokenFactory,\\n        MiniMeToken _parentToken,\\n        uint _parentSnapShotBlock,\\n        string _tokenName,\\n        uint8 _decimalUnits,\\n        string _tokenSymbol,\\n        bool _transfersEnabled\\n    )  public\\n    {\\n        tokenFactory = _tokenFactory;\\n        name = _tokenName;                                 // Set the name\\n        decimals = _decimalUnits;                          // Set the decimals\\n        symbol = _tokenSymbol;                             // Set the symbol\\n        parentToken = _parentToken;\\n        parentSnapShotBlock = _parentSnapShotBlock;\\n        transfersEnabled = _transfersEnabled;\\n        creationBlock = block.number;\\n    }\\n\\n\\n///////////////////\\n// ERC20 Methods\\n///////////////////\\n\\n    /// @notice Send `_amount` tokens to `_to` from `msg.sender`\\n    /// @param _to The address of the recipient\\n    /// @param _amount The amount of tokens to be transferred\\n    /// @return Whether the transfer was successful or not\\n    function transfer(address _to, uint256 _amount) public returns (bool success) {\\n        require(transfersEnabled);\\n        return doTransfer(msg.sender, _to, _amount);\\n    }\\n\\n    /// @notice Send `_amount` tokens to `_to` from `_from` on the condition it\\n    ///  is approved by `_from`\\n    /// @param _from The address holding the tokens being transferred\\n    /// @param _to The address of the recipient\\n    /// @param _amount The amount of tokens to be transferred\\n    /// @return True if the transfer was successful\\n    function transferFrom(address _from, address _to, uint256 _amount) public returns (bool success) {\\n\\n        // The controller of this contract can move tokens around at will,\\n        //  this is important to recognize! Confirm that you trust the\\n        //  controller of this contract, which in most situations should be\\n        //  another open source smart contract or 0x0\\n        if (msg.sender != controller) {\\n            require(transfersEnabled);\\n\\n            // The standard ERC 20 transferFrom functionality\\n            if (allowed[_from][msg.sender] < _amount)\\n                return false;\\n            allowed[_from][msg.sender] -= _amount;\\n        }\\n        return doTransfer(_from, _to, _amount);\\n    }\\n\\n    /// @dev This is the actual transfer function in the token contract, it can\\n    ///  only be called by other functions in this contract.\\n    /// @param _from The address holding the tokens being transferred\\n    /// @param _to The address of the recipient\\n    /// @param _amount The amount of tokens to be transferred\\n    /// @return True if the transfer was successful\\n    function doTransfer(address _from, address _to, uint _amount) internal returns(bool) {\\n        if (_amount == 0) {\\n            return true;\\n        }\\n        require(parentSnapShotBlock < block.number);\\n        // Do not allow transfer to 0x0 or the token contract itself\\n        require((_to != 0) && (_to != address(this)));\\n        // If the amount being transfered is more than the balance of the\\n        //  account the transfer returns false\\n        var previousBalanceFrom = balanceOfAt(_from, block.number);\\n        if (previousBalanceFrom < _amount) {\\n            return false;\\n        }\\n        // Alerts the token controller of the transfer\\n        if (isContract(controller)) {\\n            // Adding the ` == true` makes the linter shut up so...\\n            require(ITokenController(controller).onTransfer(_from, _to, _amount) == true);\\n        }\\n        // First update the balance array with the new value for the address\\n        //  sending the tokens\\n        updateValueAtNow(balances[_from], previousBalanceFrom - _amount);\\n        // Then update the balance array with the new value for the address\\n        //  receiving the tokens\\n        var previousBalanceTo = balanceOfAt(_to, block.number);\\n        require(previousBalanceTo + _amount >= previousBalanceTo); // Check for overflow\\n        updateValueAtNow(balances[_to], previousBalanceTo + _amount);\\n        // An event to make the transfer easy to find on the blockchain\\n        Transfer(_from, _to, _amount);\\n        return true;\\n    }\\n\\n    /// @param _owner The address that's balance is being requested\\n    /// @return The balance of `_owner` at the current block\\n    function balanceOf(address _owner) public constant returns (uint256 balance) {\\n        return balanceOfAt(_owner, block.number);\\n    }\\n\\n    /// @notice `msg.sender` approves `_spender` to spend `_amount` tokens on\\n    ///  its behalf. This is a modified version of the ERC20 approve function\\n    ///  to be a little bit safer\\n    /// @param _spender The address of the account able to transfer the tokens\\n    /// @param _amount The amount of tokens to be approved for transfer\\n    /// @return True if the approval was successful\\n    function approve(address _spender, uint256 _amount) public returns (bool success) {\\n        require(transfersEnabled);\\n\\n        // To change the approve amount you first have to reduce the addresses`\\n        //  allowance to zero by calling `approve(_spender,0)` if it is not\\n        //  already 0 to mitigate the race condition described here:\\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n        require((_amount == 0) || (allowed[msg.sender][_spender] == 0));\\n\\n        // Alerts the token controller of the approve function call\\n        if (isContract(controller)) {\\n            // Adding the ` == true` makes the linter shut up so...\\n            require(ITokenController(controller).onApprove(msg.sender, _spender, _amount) == true);\\n        }\\n\\n        allowed[msg.sender][_spender] = _amount;\\n        Approval(msg.sender, _spender, _amount);\\n        return true;\\n    }\\n\\n    /// @dev This function makes it easy to read the `allowed[]` map\\n    /// @param _owner The address of the account that owns the token\\n    /// @param _spender The address of the account able to transfer the tokens\\n    /// @return Amount of remaining tokens of _owner that _spender is allowed\\n    ///  to spend\\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\\n        return allowed[_owner][_spender];\\n    }\\n\\n    /// @notice `msg.sender` approves `_spender` to send `_amount` tokens on\\n    ///  its behalf, and then a function is triggered in the contract that is\\n    ///  being approved, `_spender`. This allows users to use their tokens to\\n    ///  interact with contracts in one function call instead of two\\n    /// @param _spender The address of the contract able to transfer the tokens\\n    /// @param _amount The amount of tokens to be approved for transfer\\n    /// @return True if the function call was successful\\n    function approveAndCall(ApproveAndCallFallBack _spender, uint256 _amount, bytes _extraData) public returns (bool success) {\\n        require(approve(_spender, _amount));\\n\\n        _spender.receiveApproval(\\n            msg.sender,\\n            _amount,\\n            this,\\n            _extraData\\n        );\\n\\n        return true;\\n    }\\n\\n    /// @dev This function makes it easy to get the total number of tokens\\n    /// @return The total number of tokens\\n    function totalSupply() public constant returns (uint) {\\n        return totalSupplyAt(block.number);\\n    }\\n\\n\\n////////////////\\n// Query balance and totalSupply in History\\n////////////////\\n\\n    /// @dev Queries the balance of `_owner` at a specific `_blockNumber`\\n    /// @param _owner The address from which the balance will be retrieved\\n    /// @param _blockNumber The block number when the balance is queried\\n    /// @return The balance at `_blockNumber`\\n    function balanceOfAt(address _owner, uint _blockNumber) public constant returns (uint) {\\n\\n        // These next few lines are used when the balance of the token is\\n        //  requested before a check point was ever created for this token, it\\n        //  requires that the `parentToken.balanceOfAt` be queried at the\\n        //  genesis block for that token as this contains initial balance of\\n        //  this token\\n        if ((balances[_owner].length == 0) || (balances[_owner][0].fromBlock > _blockNumber)) {\\n            if (address(parentToken) != 0) {\\n                return parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock));\\n            } else {\\n                // Has no parent\\n                return 0;\\n            }\\n\\n        // This will return the expected balance during normal situations\\n        } else {\\n            return getValueAt(balances[_owner], _blockNumber);\\n        }\\n    }\\n\\n    /// @notice Total amount of tokens at a specific `_blockNumber`.\\n    /// @param _blockNumber The block number when the totalSupply is queried\\n    /// @return The total amount of tokens at `_blockNumber`\\n    function totalSupplyAt(uint _blockNumber) public constant returns(uint) {\\n\\n        // These next few lines are used when the totalSupply of the token is\\n        //  requested before a check point was ever created for this token, it\\n        //  requires that the `parentToken.totalSupplyAt` be queried at the\\n        //  genesis block for this token as that contains totalSupply of this\\n        //  token at this block number.\\n        if ((totalSupplyHistory.length == 0) || (totalSupplyHistory[0].fromBlock > _blockNumber)) {\\n            if (address(parentToken) != 0) {\\n                return parentToken.totalSupplyAt(min(_blockNumber, parentSnapShotBlock));\\n            } else {\\n                return 0;\\n            }\\n\\n        // This will return the expected totalSupply during normal situations\\n        } else {\\n            return getValueAt(totalSupplyHistory, _blockNumber);\\n        }\\n    }\\n\\n////////////////\\n// Clone Token Method\\n////////////////\\n\\n    /// @notice Creates a new clone token with the initial distribution being\\n    ///  this token at `_snapshotBlock`\\n    /// @param _cloneTokenName Name of the clone token\\n    /// @param _cloneDecimalUnits Number of decimals of the smallest unit\\n    /// @param _cloneTokenSymbol Symbol of the clone token\\n    /// @param _snapshotBlock Block when the distribution of the parent token is\\n    ///  copied to set the initial distribution of the new clone token;\\n    ///  if the block is zero than the actual block, the current block is used\\n    /// @param _transfersEnabled True if transfers are allowed in the clone\\n    /// @return The address of the new MiniMeToken Contract\\n    function createCloneToken(\\n        string _cloneTokenName,\\n        uint8 _cloneDecimalUnits,\\n        string _cloneTokenSymbol,\\n        uint _snapshotBlock,\\n        bool _transfersEnabled\\n    ) public returns(MiniMeToken)\\n    {\\n        uint256 snapshot = _snapshotBlock == 0 ? block.number - 1 : _snapshotBlock;\\n\\n        MiniMeToken cloneToken = tokenFactory.createCloneToken(\\n            this,\\n            snapshot,\\n            _cloneTokenName,\\n            _cloneDecimalUnits,\\n            _cloneTokenSymbol,\\n            _transfersEnabled\\n        );\\n\\n        cloneToken.changeController(msg.sender);\\n\\n        // An event to make the token easy to find on the blockchain\\n        NewCloneToken(address(cloneToken), snapshot);\\n        return cloneToken;\\n    }\\n\\n////////////////\\n// Generate and destroy tokens\\n////////////////\\n\\n    /// @notice Generates `_amount` tokens that are assigned to `_owner`\\n    /// @param _owner The address that will be assigned the new tokens\\n    /// @param _amount The quantity of tokens generated\\n    /// @return True if the tokens are generated correctly\\n    function generateTokens(address _owner, uint _amount) onlyController public returns (bool) {\\n        uint curTotalSupply = totalSupply();\\n        require(curTotalSupply + _amount >= curTotalSupply); // Check for overflow\\n        uint previousBalanceTo = balanceOf(_owner);\\n        require(previousBalanceTo + _amount >= previousBalanceTo); // Check for overflow\\n        updateValueAtNow(totalSupplyHistory, curTotalSupply + _amount);\\n        updateValueAtNow(balances[_owner], previousBalanceTo + _amount);\\n        Transfer(0, _owner, _amount);\\n        return true;\\n    }\\n\\n\\n    /// @notice Burns `_amount` tokens from `_owner`\\n    /// @param _owner The address that will lose the tokens\\n    /// @param _amount The quantity of tokens to burn\\n    /// @return True if the tokens are burned correctly\\n    function destroyTokens(address _owner, uint _amount) onlyController public returns (bool) {\\n        uint curTotalSupply = totalSupply();\\n        require(curTotalSupply >= _amount);\\n        uint previousBalanceFrom = balanceOf(_owner);\\n        require(previousBalanceFrom >= _amount);\\n        updateValueAtNow(totalSupplyHistory, curTotalSupply - _amount);\\n        updateValueAtNow(balances[_owner], previousBalanceFrom - _amount);\\n        Transfer(_owner, 0, _amount);\\n        return true;\\n    }\\n\\n////////////////\\n// Enable tokens transfers\\n////////////////\\n\\n\\n    /// @notice Enables token holders to transfer their tokens freely if true\\n    /// @param _transfersEnabled True if transfers are allowed in the clone\\n    function enableTransfers(bool _transfersEnabled) onlyController public {\\n        transfersEnabled = _transfersEnabled;\\n    }\\n\\n////////////////\\n// Internal helper functions to query and set a value in a snapshot array\\n////////////////\\n\\n    /// @dev `getValueAt` retrieves the number of tokens at a given block number\\n    /// @param checkpoints The history of values being queried\\n    /// @param _block The block number to retrieve the value at\\n    /// @return The number of tokens being queried\\n    function getValueAt(Checkpoint[] storage checkpoints, uint _block) constant internal returns (uint) {\\n        if (checkpoints.length == 0)\\n            return 0;\\n\\n        // Shortcut for the actual value\\n        if (_block >= checkpoints[checkpoints.length-1].fromBlock)\\n            return checkpoints[checkpoints.length-1].value;\\n        if (_block < checkpoints[0].fromBlock)\\n            return 0;\\n\\n        // Binary search of the value in the array\\n        uint min = 0;\\n        uint max = checkpoints.length-1;\\n        while (max > min) {\\n            uint mid = (max + min + 1) / 2;\\n            if (checkpoints[mid].fromBlock<=_block) {\\n                min = mid;\\n            } else {\\n                max = mid-1;\\n            }\\n        }\\n        return checkpoints[min].value;\\n    }\\n\\n    /// @dev `updateValueAtNow` used to update the `balances` map and the\\n    ///  `totalSupplyHistory`\\n    /// @param checkpoints The history of data being updated\\n    /// @param _value The new number of tokens\\n    function updateValueAtNow(Checkpoint[] storage checkpoints, uint _value) internal {\\n        if ((checkpoints.length == 0) || (checkpoints[checkpoints.length - 1].fromBlock < block.number)) {\\n            Checkpoint storage newCheckPoint = checkpoints[checkpoints.length++];\\n            newCheckPoint.fromBlock = uint128(block.number);\\n            newCheckPoint.value = uint128(_value);\\n        } else {\\n            Checkpoint storage oldCheckPoint = checkpoints[checkpoints.length - 1];\\n            oldCheckPoint.value = uint128(_value);\\n        }\\n    }\\n\\n    /// @dev Internal function to determine if an address is a contract\\n    /// @param _addr The address being queried\\n    /// @return True if `_addr` is a contract\\n    function isContract(address _addr) constant internal returns(bool) {\\n        uint size;\\n        if (_addr == 0)\\n            return false;\\n\\n        assembly {\\n            size := extcodesize(_addr)\\n        }\\n\\n        return size>0;\\n    }\\n\\n    /// @dev Helper function to return a min betwen the two uints\\n    function min(uint a, uint b) pure internal returns (uint) {\\n        return a < b ? a : b;\\n    }\\n\\n    /// @notice The fallback function: If the contract's controller has not been\\n    ///  set to 0, then the `proxyPayment` method is called which relays the\\n    ///  ether and creates tokens as described in the token controller contract\\n    function () external payable {\\n        require(isContract(controller));\\n        // Adding the ` == true` makes the linter shut up so...\\n        require(ITokenController(controller).proxyPayment.value(msg.value)(msg.sender) == true);\\n    }\\n\\n//////////\\n// Safety Methods\\n//////////\\n\\n    /// @notice This method can be used by the controller to extract mistakenly\\n    ///  sent tokens to this contract.\\n    /// @param _token The address of the token contract that you want to recover\\n    ///  set to 0 in case you want to extract ether.\\n    function claimTokens(address _token) onlyController public {\\n        if (_token == 0x0) {\\n            controller.transfer(this.balance);\\n            return;\\n        }\\n\\n        MiniMeToken token = MiniMeToken(_token);\\n        uint balance = token.balanceOf(this);\\n        token.transfer(controller, balance);\\n        ClaimedTokens(_token, controller, balance);\\n    }\\n\\n////////////////\\n// Events\\n////////////////\\n    event ClaimedTokens(address indexed _token, address indexed _controller, uint _amount);\\n    event Transfer(address indexed _from, address indexed _to, uint256 _amount);\\n    event NewCloneToken(address indexed _cloneToken, uint _snapshotBlock);\\n    event Approval(\\n        address indexed _owner,\\n        address indexed _spender,\\n        uint256 _amount\\n        );\\n\\n}\\n\\n\\n////////////////\\n// MiniMeTokenFactory\\n////////////////\\n\\n/// @dev This contract is used to generate clone contracts from a contract.\\n///  In solidity this is the way to create a contract from a contract of the\\n///  same class\\ncontract MiniMeTokenFactory {\\n\\n    /// @notice Update the DApp by creating a new token with new functionalities\\n    ///  the msg.sender becomes the controller of this clone token\\n    /// @param _parentToken Address of the token being cloned\\n    /// @param _snapshotBlock Block of the parent token that will\\n    ///  determine the initial distribution of the clone token\\n    /// @param _tokenName Name of the new token\\n    /// @param _decimalUnits Number of decimals of the new token\\n    /// @param _tokenSymbol Token Symbol for the new token\\n    /// @param _transfersEnabled If true, tokens will be able to be transferred\\n    /// @return The address of the new token contract\\n    function createCloneToken(\\n        MiniMeToken _parentToken,\\n        uint _snapshotBlock,\\n        string _tokenName,\\n        uint8 _decimalUnits,\\n        string _tokenSymbol,\\n        bool _transfersEnabled\\n    ) public returns (MiniMeToken)\\n    {\\n        MiniMeToken newToken = new MiniMeToken(\\n            this,\\n            _parentToken,\\n            _snapshotBlock,\\n            _tokenName,\\n            _decimalUnits,\\n            _tokenSymbol,\\n            _transfersEnabled\\n        );\\n\\n        newToken.changeController(msg.sender);\\n        return newToken;\\n    }\\n}\\n\",\"keccak256\":\"0x90b5ee8b6eb203003862cec59f1dc1b77cee3528cef40dbe81705072c98379cc\"},\"@aragon/apps-token-manager/contracts/TokenManager.sol\":{\"content\":\"/*\\n * SPDX-License-Identitifer:    GPL-3.0-or-later\\n */\\n\\n/* solium-disable function-order */\\n\\npragma solidity 0.4.24;\\n\\nimport \\\"@aragon/os/contracts/apps/AragonApp.sol\\\";\\nimport \\\"@aragon/os/contracts/common/IForwarder.sol\\\";\\n\\nimport \\\"@aragon/os/contracts/lib/math/SafeMath.sol\\\";\\n\\nimport \\\"@aragon/apps-shared-minime/contracts/ITokenController.sol\\\";\\nimport \\\"@aragon/apps-shared-minime/contracts/MiniMeToken.sol\\\";\\n\\n\\ncontract TokenManager is ITokenController, IForwarder, AragonApp {\\n    using SafeMath for uint256;\\n\\n    bytes32 public constant MINT_ROLE = keccak256(\\\"MINT_ROLE\\\");\\n    bytes32 public constant ISSUE_ROLE = keccak256(\\\"ISSUE_ROLE\\\");\\n    bytes32 public constant ASSIGN_ROLE = keccak256(\\\"ASSIGN_ROLE\\\");\\n    bytes32 public constant REVOKE_VESTINGS_ROLE = keccak256(\\\"REVOKE_VESTINGS_ROLE\\\");\\n    bytes32 public constant BURN_ROLE = keccak256(\\\"BURN_ROLE\\\");\\n\\n    uint256 public constant MAX_VESTINGS_PER_ADDRESS = 50;\\n\\n    string private constant ERROR_CALLER_NOT_TOKEN = \\\"TM_CALLER_NOT_TOKEN\\\";\\n    string private constant ERROR_NO_VESTING = \\\"TM_NO_VESTING\\\";\\n    string private constant ERROR_TOKEN_CONTROLLER = \\\"TM_TOKEN_CONTROLLER\\\";\\n    string private constant ERROR_MINT_RECEIVER_IS_TM = \\\"TM_MINT_RECEIVER_IS_TM\\\";\\n    string private constant ERROR_VESTING_TO_TM = \\\"TM_VESTING_TO_TM\\\";\\n    string private constant ERROR_TOO_MANY_VESTINGS = \\\"TM_TOO_MANY_VESTINGS\\\";\\n    string private constant ERROR_WRONG_CLIFF_DATE = \\\"TM_WRONG_CLIFF_DATE\\\";\\n    string private constant ERROR_VESTING_NOT_REVOKABLE = \\\"TM_VESTING_NOT_REVOKABLE\\\";\\n    string private constant ERROR_REVOKE_TRANSFER_FROM_REVERTED = \\\"TM_REVOKE_TRANSFER_FROM_REVERTED\\\";\\n    string private constant ERROR_CAN_NOT_FORWARD = \\\"TM_CAN_NOT_FORWARD\\\";\\n    string private constant ERROR_BALANCE_INCREASE_NOT_ALLOWED = \\\"TM_BALANCE_INC_NOT_ALLOWED\\\";\\n    string private constant ERROR_ASSIGN_TRANSFER_FROM_REVERTED = \\\"TM_ASSIGN_TRANSFER_FROM_REVERTED\\\";\\n\\n    struct TokenVesting {\\n        uint256 amount;\\n        uint64 start;\\n        uint64 cliff;\\n        uint64 vesting;\\n        bool revokable;\\n    }\\n\\n    // Note that we COMPLETELY trust this MiniMeToken to not be malicious for proper operation of this contract\\n    MiniMeToken public token;\\n    uint256 public maxAccountTokens;\\n\\n    // We are mimicing an array in the inner mapping, we use a mapping instead to make app upgrade more graceful\\n    mapping (address => mapping (uint256 => TokenVesting)) internal vestings;\\n    mapping (address => uint256) public vestingsLengths;\\n\\n    // Other token specific events can be watched on the token address directly (avoids duplication)\\n    event NewVesting(address indexed receiver, uint256 vestingId, uint256 amount);\\n    event RevokeVesting(address indexed receiver, uint256 vestingId, uint256 nonVestedAmount);\\n\\n    modifier onlyToken() {\\n        require(msg.sender == address(token), ERROR_CALLER_NOT_TOKEN);\\n        _;\\n    }\\n\\n    modifier vestingExists(address _holder, uint256 _vestingId) {\\n        // TODO: it's not checking for gaps that may appear because of deletes in revokeVesting function\\n        require(_vestingId < vestingsLengths[_holder], ERROR_NO_VESTING);\\n        _;\\n    }\\n\\n    /**\\n    * @notice Initialize Token Manager for `_token.symbol(): string`, whose tokens are `transferable ? 'not' : ''` transferable`_maxAccountTokens > 0 ? ' and limited to a maximum of ' + @tokenAmount(_token, _maxAccountTokens, false) + ' per account' : ''`\\n    * @param _token MiniMeToken address for the managed token (Token Manager instance must be already set as the token controller)\\n    * @param _transferable whether the token can be transferred by holders\\n    * @param _maxAccountTokens Maximum amount of tokens an account can have (0 for infinite tokens)\\n    */\\n    function initialize(\\n        MiniMeToken _token,\\n        bool _transferable,\\n        uint256 _maxAccountTokens\\n    )\\n        external\\n        onlyInit\\n    {\\n        initialized();\\n\\n        require(_token.controller() == address(this), ERROR_TOKEN_CONTROLLER);\\n\\n        token = _token;\\n        maxAccountTokens = _maxAccountTokens == 0 ? uint256(-1) : _maxAccountTokens;\\n\\n        if (token.transfersEnabled() != _transferable) {\\n            token.enableTransfers(_transferable);\\n        }\\n    }\\n\\n    /**\\n    * @notice Mint `@tokenAmount(self.token(): address, _amount, false)` tokens for `_receiver`\\n    * @param _receiver The address receiving the tokens, cannot be the Token Manager itself (use `issue()` instead)\\n    * @param _amount Number of tokens minted\\n    */\\n    function mint(address _receiver, uint256 _amount) external authP(MINT_ROLE, arr(_receiver, _amount)) {\\n        require(_receiver != address(this), ERROR_MINT_RECEIVER_IS_TM);\\n        _mint(_receiver, _amount);\\n    }\\n\\n    /**\\n    * @notice Mint `@tokenAmount(self.token(): address, _amount, false)` tokens for the Token Manager\\n    * @param _amount Number of tokens minted\\n    */\\n    function issue(uint256 _amount) external authP(ISSUE_ROLE, arr(_amount)) {\\n        _mint(address(this), _amount);\\n    }\\n\\n    /**\\n    * @notice Assign `@tokenAmount(self.token(): address, _amount, false)` tokens to `_receiver` from the Token Manager's holdings\\n    * @param _receiver The address receiving the tokens\\n    * @param _amount Number of tokens transferred\\n    */\\n    function assign(address _receiver, uint256 _amount) external authP(ASSIGN_ROLE, arr(_receiver, _amount)) {\\n        _assign(_receiver, _amount);\\n    }\\n\\n    /**\\n    * @notice Burn `@tokenAmount(self.token(): address, _amount, false)` tokens from `_holder`\\n    * @param _holder Holder of tokens being burned\\n    * @param _amount Number of tokens being burned\\n    */\\n    function burn(address _holder, uint256 _amount) external authP(BURN_ROLE, arr(_holder, _amount)) {\\n        // minime.destroyTokens() never returns false, only reverts on failure\\n        token.destroyTokens(_holder, _amount);\\n    }\\n\\n    /**\\n    * @notice Assign `@tokenAmount(self.token(): address, _amount, false)` tokens to `_receiver` from the Token Manager's holdings with a `_revokable : 'revokable' : ''` vesting starting at `@formatDate(_start)`, cliff at `@formatDate(_cliff)` (first portion of tokens transferable), and completed vesting at `@formatDate(_vested)` (all tokens transferable)\\n    * @param _receiver The address receiving the tokens, cannot be Token Manager itself\\n    * @param _amount Number of tokens vested\\n    * @param _start Date the vesting calculations start\\n    * @param _cliff Date when the initial portion of tokens are transferable\\n    * @param _vested Date when all tokens are transferable\\n    * @param _revokable Whether the vesting can be revoked by the Token Manager\\n    */\\n    function assignVested(\\n        address _receiver,\\n        uint256 _amount,\\n        uint64 _start,\\n        uint64 _cliff,\\n        uint64 _vested,\\n        bool _revokable\\n    )\\n        external\\n        authP(ASSIGN_ROLE, arr(_receiver, _amount))\\n        returns (uint256)\\n    {\\n        require(_receiver != address(this), ERROR_VESTING_TO_TM);\\n        require(vestingsLengths[_receiver] < MAX_VESTINGS_PER_ADDRESS, ERROR_TOO_MANY_VESTINGS);\\n        require(_start <= _cliff && _cliff <= _vested, ERROR_WRONG_CLIFF_DATE);\\n\\n        uint256 vestingId = vestingsLengths[_receiver]++;\\n        vestings[_receiver][vestingId] = TokenVesting(\\n            _amount,\\n            _start,\\n            _cliff,\\n            _vested,\\n            _revokable\\n        );\\n\\n        _assign(_receiver, _amount);\\n\\n        emit NewVesting(_receiver, vestingId, _amount);\\n\\n        return vestingId;\\n    }\\n\\n    /**\\n    * @notice Revoke vesting #`_vestingId` from `_holder`, returning unvested tokens to the Token Manager\\n    * @param _holder Address whose vesting to revoke\\n    * @param _vestingId Numeric id of the vesting\\n    */\\n    function revokeVesting(address _holder, uint256 _vestingId)\\n        external\\n        authP(REVOKE_VESTINGS_ROLE, arr(_holder))\\n        vestingExists(_holder, _vestingId)\\n    {\\n        TokenVesting storage v = vestings[_holder][_vestingId];\\n        require(v.revokable, ERROR_VESTING_NOT_REVOKABLE);\\n\\n        uint256 nonVested = _calculateNonVestedTokens(\\n            v.amount,\\n            getTimestamp(),\\n            v.start,\\n            v.cliff,\\n            v.vesting\\n        );\\n\\n        // To make vestingIds immutable over time, we just zero out the revoked vesting\\n        // Clearing this out also allows the token transfer back to the Token Manager to succeed\\n        delete vestings[_holder][_vestingId];\\n\\n        // transferFrom always works as controller\\n        // onTransfer hook always allows if transfering to token controller\\n        require(token.transferFrom(_holder, address(this), nonVested), ERROR_REVOKE_TRANSFER_FROM_REVERTED);\\n\\n        emit RevokeVesting(_holder, _vestingId, nonVested);\\n    }\\n\\n    // ITokenController fns\\n    // `onTransfer()`, `onApprove()`, and `proxyPayment()` are callbacks from the MiniMe token\\n    // contract and are only meant to be called through the managed MiniMe token that gets assigned\\n    // during initialization.\\n\\n    /*\\n    * @dev Notifies the controller about a token transfer allowing the controller to decide whether\\n    *      to allow it or react if desired (only callable from the token).\\n    *      Initialization check is implicitly provided by `onlyToken()`.\\n    * @param _from The origin of the transfer\\n    * @param _to The destination of the transfer\\n    * @param _amount The amount of the transfer\\n    * @return False if the controller does not authorize the transfer\\n    */\\n    function onTransfer(address _from, address _to, uint256 _amount) external onlyToken returns (bool) {\\n        return _isBalanceIncreaseAllowed(_to, _amount) && _transferableBalance(_from, getTimestamp()) >= _amount;\\n    }\\n\\n    /**\\n    * @dev Notifies the controller about an approval allowing the controller to react if desired\\n    *      Initialization check is implicitly provided by `onlyToken()`.\\n    * @return False if the controller does not authorize the approval\\n    */\\n    function onApprove(address, address, uint) external onlyToken returns (bool) {\\n        return true;\\n    }\\n\\n    /**\\n    * @dev Called when ether is sent to the MiniMe Token contract\\n    *      Initialization check is implicitly provided by `onlyToken()`.\\n    * @return True if the ether is accepted, false for it to throw\\n    */\\n    function proxyPayment(address) external payable onlyToken returns (bool) {\\n        return false;\\n    }\\n\\n    // Forwarding fns\\n\\n    function isForwarder() external pure returns (bool) {\\n        return true;\\n    }\\n\\n    /**\\n    * @notice Execute desired action as a token holder\\n    * @dev IForwarder interface conformance. Forwards any token holder action.\\n    * @param _evmScript Script being executed\\n    */\\n    function forward(bytes _evmScript) public {\\n        require(canForward(msg.sender, _evmScript), ERROR_CAN_NOT_FORWARD);\\n        bytes memory input = new bytes(0); // TODO: Consider input for this\\n\\n        // Add the managed token to the blacklist to disallow a token holder from executing actions\\n        // on the token controller's (this contract) behalf\\n        address[] memory blacklist = new address[](1);\\n        blacklist[0] = address(token);\\n\\n        runScript(_evmScript, input, blacklist);\\n    }\\n\\n    function canForward(address _sender, bytes) public view returns (bool) {\\n        return hasInitialized() && token.balanceOf(_sender) > 0;\\n    }\\n\\n    // Getter fns\\n\\n    function getVesting(\\n        address _recipient,\\n        uint256 _vestingId\\n    )\\n        public\\n        view\\n        vestingExists(_recipient, _vestingId)\\n        returns (\\n            uint256 amount,\\n            uint64 start,\\n            uint64 cliff,\\n            uint64 vesting,\\n            bool revokable\\n        )\\n    {\\n        TokenVesting storage tokenVesting = vestings[_recipient][_vestingId];\\n        amount = tokenVesting.amount;\\n        start = tokenVesting.start;\\n        cliff = tokenVesting.cliff;\\n        vesting = tokenVesting.vesting;\\n        revokable = tokenVesting.revokable;\\n    }\\n\\n    function spendableBalanceOf(address _holder) public view isInitialized returns (uint256) {\\n        return _transferableBalance(_holder, getTimestamp());\\n    }\\n\\n    function transferableBalance(address _holder, uint256 _time) public view isInitialized returns (uint256) {\\n        return _transferableBalance(_holder, _time);\\n    }\\n\\n    /**\\n    * @dev Disable recovery escape hatch for own token,\\n    *      as the it has the concept of issuing tokens without assigning them\\n    */\\n    function allowRecoverability(address _token) public view returns (bool) {\\n        return _token != address(token);\\n    }\\n\\n    // Internal fns\\n\\n    function _assign(address _receiver, uint256 _amount) internal {\\n        require(_isBalanceIncreaseAllowed(_receiver, _amount), ERROR_BALANCE_INCREASE_NOT_ALLOWED);\\n        // Must use transferFrom() as transfer() does not give the token controller full control\\n        require(token.transferFrom(address(this), _receiver, _amount), ERROR_ASSIGN_TRANSFER_FROM_REVERTED);\\n    }\\n\\n    function _mint(address _receiver, uint256 _amount) internal {\\n        require(_isBalanceIncreaseAllowed(_receiver, _amount), ERROR_BALANCE_INCREASE_NOT_ALLOWED);\\n        token.generateTokens(_receiver, _amount); // minime.generateTokens() never returns false\\n    }\\n\\n    function _isBalanceIncreaseAllowed(address _receiver, uint256 _inc) internal view returns (bool) {\\n        // Max balance doesn't apply to the token manager itself\\n        if (_receiver == address(this)) {\\n            return true;\\n        }\\n        return token.balanceOf(_receiver).add(_inc) <= maxAccountTokens;\\n    }\\n\\n    /**\\n    * @dev Calculate amount of non-vested tokens at a specifc time\\n    * @param tokens The total amount of tokens vested\\n    * @param time The time at which to check\\n    * @param start The date vesting started\\n    * @param cliff The cliff period\\n    * @param vested The fully vested date\\n    * @return The amount of non-vested tokens of a specific grant\\n    *  transferableTokens\\n    *   |                         _/--------   vestedTokens rect\\n    *   |                       _/\\n    *   |                     _/\\n    *   |                   _/\\n    *   |                 _/\\n    *   |                /\\n    *   |              .|\\n    *   |            .  |\\n    *   |          .    |\\n    *   |        .      |\\n    *   |      .        |\\n    *   |    .          |\\n    *   +===+===========+---------+----------> time\\n    *      Start       Cliff    Vested\\n    */\\n    function _calculateNonVestedTokens(\\n        uint256 tokens,\\n        uint256 time,\\n        uint256 start,\\n        uint256 cliff,\\n        uint256 vested\\n    )\\n        private\\n        pure\\n        returns (uint256)\\n    {\\n        // Shortcuts for before cliff and after vested cases.\\n        if (time >= vested) {\\n            return 0;\\n        }\\n        if (time < cliff) {\\n            return tokens;\\n        }\\n\\n        // Interpolate all vested tokens.\\n        // As before cliff the shortcut returns 0, we can just calculate a value\\n        // in the vesting rect (as shown in above's figure)\\n\\n        // vestedTokens = tokens * (time - start) / (vested - start)\\n        // In assignVesting we enforce start <= cliff <= vested\\n        // Here we shortcut time >= vested and time < cliff,\\n        // so no division by 0 is possible\\n        uint256 vestedTokens = tokens.mul(time.sub(start)) / vested.sub(start);\\n\\n        // tokens - vestedTokens\\n        return tokens.sub(vestedTokens);\\n    }\\n\\n    function _transferableBalance(address _holder, uint256 _time) internal view returns (uint256) {\\n        uint256 transferable = token.balanceOf(_holder);\\n\\n        // This check is not strictly necessary for the current version of this contract, as\\n        // Token Managers now cannot assign vestings to themselves.\\n        // However, this was a possibility in the past, so in case there were vestings assigned to\\n        // themselves, this will still return the correct value (entire balance, as the Token\\n        // Manager does not have a spending limit on its own balance).\\n        if (_holder != address(this)) {\\n            uint256 vestingsCount = vestingsLengths[_holder];\\n            for (uint256 i = 0; i < vestingsCount; i++) {\\n                TokenVesting storage v = vestings[_holder][i];\\n                uint256 nonTransferable = _calculateNonVestedTokens(\\n                    v.amount,\\n                    _time,\\n                    v.start,\\n                    v.cliff,\\n                    v.vesting\\n                );\\n                transferable = transferable.sub(nonTransferable);\\n            }\\n        }\\n\\n        return transferable;\\n    }\\n}\\n\",\"keccak256\":\"0x60fc91f7ffac56d5f897a6e1bfa08ae3fb42818a46262106fdf984532b7a9d40\"},\"@aragon/os/contracts/acl/ACLSyntaxSugar.sol\":{\"content\":\"/*\\n * SPDX-License-Identitifer:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\n\\ncontract ACLSyntaxSugar {\\n    function arr() internal pure returns (uint256[]) {\\n        return new uint256[](0);\\n    }\\n\\n    function arr(bytes32 _a) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a));\\n    }\\n\\n    function arr(bytes32 _a, bytes32 _b) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a), uint256(_b));\\n    }\\n\\n    function arr(address _a) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a));\\n    }\\n\\n    function arr(address _a, address _b) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a), uint256(_b));\\n    }\\n\\n    function arr(address _a, uint256 _b, uint256 _c) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a), _b, _c);\\n    }\\n\\n    function arr(address _a, uint256 _b, uint256 _c, uint256 _d) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a), _b, _c, _d);\\n    }\\n\\n    function arr(address _a, uint256 _b) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a), uint256(_b));\\n    }\\n\\n    function arr(address _a, address _b, uint256 _c, uint256 _d, uint256 _e) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a), uint256(_b), _c, _d, _e);\\n    }\\n\\n    function arr(address _a, address _b, address _c) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a), uint256(_b), uint256(_c));\\n    }\\n\\n    function arr(address _a, address _b, uint256 _c) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a), uint256(_b), uint256(_c));\\n    }\\n\\n    function arr(uint256 _a) internal pure returns (uint256[] r) {\\n        r = new uint256[](1);\\n        r[0] = _a;\\n    }\\n\\n    function arr(uint256 _a, uint256 _b) internal pure returns (uint256[] r) {\\n        r = new uint256[](2);\\n        r[0] = _a;\\n        r[1] = _b;\\n    }\\n\\n    function arr(uint256 _a, uint256 _b, uint256 _c) internal pure returns (uint256[] r) {\\n        r = new uint256[](3);\\n        r[0] = _a;\\n        r[1] = _b;\\n        r[2] = _c;\\n    }\\n\\n    function arr(uint256 _a, uint256 _b, uint256 _c, uint256 _d) internal pure returns (uint256[] r) {\\n        r = new uint256[](4);\\n        r[0] = _a;\\n        r[1] = _b;\\n        r[2] = _c;\\n        r[3] = _d;\\n    }\\n\\n    function arr(uint256 _a, uint256 _b, uint256 _c, uint256 _d, uint256 _e) internal pure returns (uint256[] r) {\\n        r = new uint256[](5);\\n        r[0] = _a;\\n        r[1] = _b;\\n        r[2] = _c;\\n        r[3] = _d;\\n        r[4] = _e;\\n    }\\n}\\n\\n\\ncontract ACLHelpers {\\n    function decodeParamOp(uint256 _x) internal pure returns (uint8 b) {\\n        return uint8(_x >> (8 * 30));\\n    }\\n\\n    function decodeParamId(uint256 _x) internal pure returns (uint8 b) {\\n        return uint8(_x >> (8 * 31));\\n    }\\n\\n    function decodeParamsList(uint256 _x) internal pure returns (uint32 a, uint32 b, uint32 c) {\\n        a = uint32(_x);\\n        b = uint32(_x >> (8 * 4));\\n        c = uint32(_x >> (8 * 8));\\n    }\\n}\\n\",\"keccak256\":\"0x519915c14576b679b5ed5767d6b21b44a13aa7ae2fe7b33664ca364fafc33e00\"},\"@aragon/os/contracts/acl/IACL.sol\":{\"content\":\"/*\\n * SPDX-License-Identitifer:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\n\\ninterface IACL {\\n    function initialize(address permissionsCreator) external;\\n\\n    // TODO: this should be external\\n    // See https://github.com/ethereum/solidity/issues/4832\\n    function hasPermission(address who, address where, bytes32 what, bytes how) public view returns (bool);\\n}\\n\",\"keccak256\":\"0xe3492bc29d2482e65d2e39c96487b5388f6181f6bcdc6fe6329b8206b84c0cf1\"},\"@aragon/os/contracts/apps/AppStorage.sol\":{\"content\":\"/*\\n * SPDX-License-Identitifer:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\nimport \\\"../common/UnstructuredStorage.sol\\\";\\nimport \\\"../kernel/IKernel.sol\\\";\\n\\n\\ncontract AppStorage {\\n    using UnstructuredStorage for bytes32;\\n\\n    /* Hardcoded constants to save gas\\n    bytes32 internal constant KERNEL_POSITION = keccak256(\\\"aragonOS.appStorage.kernel\\\");\\n    bytes32 internal constant APP_ID_POSITION = keccak256(\\\"aragonOS.appStorage.appId\\\");\\n    */\\n    bytes32 internal constant KERNEL_POSITION = 0x4172f0f7d2289153072b0a6ca36959e0cbe2efc3afe50fc81636caa96338137b;\\n    bytes32 internal constant APP_ID_POSITION = 0xd625496217aa6a3453eecb9c3489dc5a53e6c67b444329ea2b2cbc9ff547639b;\\n\\n    function kernel() public view returns (IKernel) {\\n        return IKernel(KERNEL_POSITION.getStorageAddress());\\n    }\\n\\n    function appId() public view returns (bytes32) {\\n        return APP_ID_POSITION.getStorageBytes32();\\n    }\\n\\n    function setKernel(IKernel _kernel) internal {\\n        KERNEL_POSITION.setStorageAddress(address(_kernel));\\n    }\\n\\n    function setAppId(bytes32 _appId) internal {\\n        APP_ID_POSITION.setStorageBytes32(_appId);\\n    }\\n}\\n\",\"keccak256\":\"0xb1c8eb71d1bdfe1241cc1714b280b46bbfc5bcb1e8499d42c24d3f5f5e8130f1\"},\"@aragon/os/contracts/apps/AragonApp.sol\":{\"content\":\"/*\\n * SPDX-License-Identitifer:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\nimport \\\"./AppStorage.sol\\\";\\nimport \\\"../acl/ACLSyntaxSugar.sol\\\";\\nimport \\\"../common/Autopetrified.sol\\\";\\nimport \\\"../common/ConversionHelpers.sol\\\";\\nimport \\\"../common/ReentrancyGuard.sol\\\";\\nimport \\\"../common/VaultRecoverable.sol\\\";\\nimport \\\"../evmscript/EVMScriptRunner.sol\\\";\\n\\n\\n// Contracts inheriting from AragonApp are, by default, immediately petrified upon deployment so\\n// that they can never be initialized.\\n// Unless overriden, this behaviour enforces those contracts to be usable only behind an AppProxy.\\n// ReentrancyGuard, EVMScriptRunner, and ACLSyntaxSugar are not directly used by this contract, but\\n// are included so that they are automatically usable by subclassing contracts\\ncontract AragonApp is AppStorage, Autopetrified, VaultRecoverable, ReentrancyGuard, EVMScriptRunner, ACLSyntaxSugar {\\n    string private constant ERROR_AUTH_FAILED = \\\"APP_AUTH_FAILED\\\";\\n\\n    modifier auth(bytes32 _role) {\\n        require(canPerform(msg.sender, _role, new uint256[](0)), ERROR_AUTH_FAILED);\\n        _;\\n    }\\n\\n    modifier authP(bytes32 _role, uint256[] _params) {\\n        require(canPerform(msg.sender, _role, _params), ERROR_AUTH_FAILED);\\n        _;\\n    }\\n\\n    /**\\n    * @dev Check whether an action can be performed by a sender for a particular role on this app\\n    * @param _sender Sender of the call\\n    * @param _role Role on this app\\n    * @param _params Permission params for the role\\n    * @return Boolean indicating whether the sender has the permissions to perform the action.\\n    *         Always returns false if the app hasn't been initialized yet.\\n    */\\n    function canPerform(address _sender, bytes32 _role, uint256[] _params) public view returns (bool) {\\n        if (!hasInitialized()) {\\n            return false;\\n        }\\n\\n        IKernel linkedKernel = kernel();\\n        if (address(linkedKernel) == address(0)) {\\n            return false;\\n        }\\n\\n        return linkedKernel.hasPermission(\\n            _sender,\\n            address(this),\\n            _role,\\n            ConversionHelpers.dangerouslyCastUintArrayToBytes(_params)\\n        );\\n    }\\n\\n    /**\\n    * @dev Get the recovery vault for the app\\n    * @return Recovery vault address for the app\\n    */\\n    function getRecoveryVault() public view returns (address) {\\n        // Funds recovery via a vault is only available when used with a kernel\\n        return kernel().getRecoveryVault(); // if kernel is not set, it will revert\\n    }\\n}\\n\",\"keccak256\":\"0xba456000d65bea8d9d82e9f1789086c3777df68fe364f8f397973b6d579f3a2a\"},\"@aragon/os/contracts/common/Autopetrified.sol\":{\"content\":\"/*\\n * SPDX-License-Identitifer:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\nimport \\\"./Petrifiable.sol\\\";\\n\\n\\ncontract Autopetrified is Petrifiable {\\n    constructor() public {\\n        // Immediately petrify base (non-proxy) instances of inherited contracts on deploy.\\n        // This renders them uninitializable (and unusable without a proxy).\\n        petrify();\\n    }\\n}\\n\",\"keccak256\":\"0x216e6ecbdcf45d90e8846ab2773072bd82180558a7dcf0c5425ed13b0188c5f3\"},\"@aragon/os/contracts/common/ConversionHelpers.sol\":{\"content\":\"pragma solidity ^0.4.24;\\n\\n\\nlibrary ConversionHelpers {\\n    string private constant ERROR_IMPROPER_LENGTH = \\\"CONVERSION_IMPROPER_LENGTH\\\";\\n\\n    function dangerouslyCastUintArrayToBytes(uint256[] memory _input) internal pure returns (bytes memory output) {\\n        // Force cast the uint256[] into a bytes array, by overwriting its length\\n        // Note that the bytes array doesn't need to be initialized as we immediately overwrite it\\n        // with the input and a new length. The input becomes invalid from this point forward.\\n        uint256 byteLength = _input.length * 32;\\n        assembly {\\n            output := _input\\n            mstore(output, byteLength)\\n        }\\n    }\\n\\n    function dangerouslyCastBytesToUintArray(bytes memory _input) internal pure returns (uint256[] memory output) {\\n        // Force cast the bytes array into a uint256[], by overwriting its length\\n        // Note that the uint256[] doesn't need to be initialized as we immediately overwrite it\\n        // with the input and a new length. The input becomes invalid from this point forward.\\n        uint256 intsLength = _input.length / 32;\\n        require(_input.length == intsLength * 32, ERROR_IMPROPER_LENGTH);\\n\\n        assembly {\\n            output := _input\\n            mstore(output, intsLength)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9872383d458352f5c68fa5afd1fc84ab6b172cbee33359cfa57655b8eda92416\"},\"@aragon/os/contracts/common/EtherTokenConstant.sol\":{\"content\":\"/*\\n * SPDX-License-Identitifer:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\n\\n// aragonOS and aragon-apps rely on address(0) to denote native ETH, in\\n// contracts where both tokens and ETH are accepted\\ncontract EtherTokenConstant {\\n    address internal constant ETH = address(0);\\n}\\n\",\"keccak256\":\"0xb18d16ad5127519251d9759349bf0ce1e5cfc861a776c5297b91a625c84d0363\"},\"@aragon/os/contracts/common/IForwarder.sol\":{\"content\":\"/*\\n * SPDX-License-Identitifer:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\n\\ninterface IForwarder {\\n    function isForwarder() external pure returns (bool);\\n\\n    // TODO: this should be external\\n    // See https://github.com/ethereum/solidity/issues/4832\\n    function canForward(address sender, bytes evmCallScript) public view returns (bool);\\n\\n    // TODO: this should be external\\n    // See https://github.com/ethereum/solidity/issues/4832\\n    function forward(bytes evmCallScript) public;\\n}\\n\",\"keccak256\":\"0xd862ca160ed12725de3044b1f1c90248e8c26ec764f64f2c06ac57279a7a712b\"},\"@aragon/os/contracts/common/IVaultRecoverable.sol\":{\"content\":\"/*\\n * SPDX-License-Identitifer:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\n\\ninterface IVaultRecoverable {\\n    event RecoverToVault(address indexed vault, address indexed token, uint256 amount);\\n\\n    function transferToVault(address token) external;\\n\\n    function allowRecoverability(address token) external view returns (bool);\\n    function getRecoveryVault() external view returns (address);\\n}\\n\",\"keccak256\":\"0xd7cb66ee5d01be69a6abab04583cc86755bf63c2f1fd03b519a876162f52b323\"},\"@aragon/os/contracts/common/Initializable.sol\":{\"content\":\"/*\\n * SPDX-License-Identitifer:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\nimport \\\"./TimeHelpers.sol\\\";\\nimport \\\"./UnstructuredStorage.sol\\\";\\n\\n\\ncontract Initializable is TimeHelpers {\\n    using UnstructuredStorage for bytes32;\\n\\n    // keccak256(\\\"aragonOS.initializable.initializationBlock\\\")\\n    bytes32 internal constant INITIALIZATION_BLOCK_POSITION = 0xebb05b386a8d34882b8711d156f463690983dc47815980fb82aeeff1aa43579e;\\n\\n    string private constant ERROR_ALREADY_INITIALIZED = \\\"INIT_ALREADY_INITIALIZED\\\";\\n    string private constant ERROR_NOT_INITIALIZED = \\\"INIT_NOT_INITIALIZED\\\";\\n\\n    modifier onlyInit {\\n        require(getInitializationBlock() == 0, ERROR_ALREADY_INITIALIZED);\\n        _;\\n    }\\n\\n    modifier isInitialized {\\n        require(hasInitialized(), ERROR_NOT_INITIALIZED);\\n        _;\\n    }\\n\\n    /**\\n    * @return Block number in which the contract was initialized\\n    */\\n    function getInitializationBlock() public view returns (uint256) {\\n        return INITIALIZATION_BLOCK_POSITION.getStorageUint256();\\n    }\\n\\n    /**\\n    * @return Whether the contract has been initialized by the time of the current block\\n    */\\n    function hasInitialized() public view returns (bool) {\\n        uint256 initializationBlock = getInitializationBlock();\\n        return initializationBlock != 0 && getBlockNumber() >= initializationBlock;\\n    }\\n\\n    /**\\n    * @dev Function to be called by top level contract after initialization has finished.\\n    */\\n    function initialized() internal onlyInit {\\n        INITIALIZATION_BLOCK_POSITION.setStorageUint256(getBlockNumber());\\n    }\\n\\n    /**\\n    * @dev Function to be called by top level contract after initialization to enable the contract\\n    *      at a future block number rather than immediately.\\n    */\\n    function initializedAt(uint256 _blockNumber) internal onlyInit {\\n        INITIALIZATION_BLOCK_POSITION.setStorageUint256(_blockNumber);\\n    }\\n}\\n\",\"keccak256\":\"0xc559fdbee1c0ee18b6f2f866c28ed6eb96859b2c88f75867ca11f25ebd00b090\"},\"@aragon/os/contracts/common/IsContract.sol\":{\"content\":\"/*\\n * SPDX-License-Identitifer:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\n\\ncontract IsContract {\\n    /*\\n    * NOTE: this should NEVER be used for authentication\\n    * (see pitfalls: https://github.com/fergarrui/ethereum-security/tree/master/contracts/extcodesize).\\n    *\\n    * This is only intended to be used as a sanity check that an address is actually a contract,\\n    * RATHER THAN an address not being a contract.\\n    */\\n    function isContract(address _target) internal view returns (bool) {\\n        if (_target == address(0)) {\\n            return false;\\n        }\\n\\n        uint256 size;\\n        assembly { size := extcodesize(_target) }\\n        return size > 0;\\n    }\\n}\\n\",\"keccak256\":\"0xb76e263e3532883fe32dfe4b1447eb487a570e121c5cce01cee604dd9e44a075\"},\"@aragon/os/contracts/common/Petrifiable.sol\":{\"content\":\"/*\\n * SPDX-License-Identitifer:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\nimport \\\"./Initializable.sol\\\";\\n\\n\\ncontract Petrifiable is Initializable {\\n    // Use block UINT256_MAX (which should be never) as the initializable date\\n    uint256 internal constant PETRIFIED_BLOCK = uint256(-1);\\n\\n    function isPetrified() public view returns (bool) {\\n        return getInitializationBlock() == PETRIFIED_BLOCK;\\n    }\\n\\n    /**\\n    * @dev Function to be called by top level contract to prevent being initialized.\\n    *      Useful for freezing base contracts when they're used behind proxies.\\n    */\\n    function petrify() internal onlyInit {\\n        initializedAt(PETRIFIED_BLOCK);\\n    }\\n}\\n\",\"keccak256\":\"0xb69f9d6de8ff6f2a084aca2e0228c9008a8776482a70bcab16f46a693ec77be6\"},\"@aragon/os/contracts/common/ReentrancyGuard.sol\":{\"content\":\"/*\\n * SPDX-License-Identitifer:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\nimport \\\"../common/UnstructuredStorage.sol\\\";\\n\\n\\ncontract ReentrancyGuard {\\n    using UnstructuredStorage for bytes32;\\n\\n    /* Hardcoded constants to save gas\\n    bytes32 internal constant REENTRANCY_MUTEX_POSITION = keccak256(\\\"aragonOS.reentrancyGuard.mutex\\\");\\n    */\\n    bytes32 private constant REENTRANCY_MUTEX_POSITION = 0xe855346402235fdd185c890e68d2c4ecad599b88587635ee285bce2fda58dacb;\\n\\n    string private constant ERROR_REENTRANT = \\\"REENTRANCY_REENTRANT_CALL\\\";\\n\\n    modifier nonReentrant() {\\n        // Ensure mutex is unlocked\\n        require(!REENTRANCY_MUTEX_POSITION.getStorageBool(), ERROR_REENTRANT);\\n\\n        // Lock mutex before function call\\n        REENTRANCY_MUTEX_POSITION.setStorageBool(true);\\n\\n        // Perform function call\\n        _;\\n\\n        // Unlock mutex after function call\\n        REENTRANCY_MUTEX_POSITION.setStorageBool(false);\\n    }\\n}\\n\",\"keccak256\":\"0x2b2014de57620aedded6365e742e17b9a23492d754e48dfeefa56f7e5bcf5645\"},\"@aragon/os/contracts/common/SafeERC20.sol\":{\"content\":\"// Inspired by AdEx (https://github.com/AdExNetwork/adex-protocol-eth/blob/b9df617829661a7518ee10f4cb6c4108659dd6d5/contracts/libs/SafeERC20.sol)\\n// and 0x (https://github.com/0xProject/0x-monorepo/blob/737d1dc54d72872e24abce5a1dbe1b66d35fa21a/contracts/protocol/contracts/protocol/AssetProxy/ERC20Proxy.sol#L143)\\n\\npragma solidity ^0.4.24;\\n\\nimport \\\"../lib/token/ERC20.sol\\\";\\n\\n\\nlibrary SafeERC20 {\\n    // Before 0.5, solidity has a mismatch between `address.transfer()` and `token.transfer()`:\\n    // https://github.com/ethereum/solidity/issues/3544\\n    bytes4 private constant TRANSFER_SELECTOR = 0xa9059cbb;\\n\\n    string private constant ERROR_TOKEN_BALANCE_REVERTED = \\\"SAFE_ERC_20_BALANCE_REVERTED\\\";\\n    string private constant ERROR_TOKEN_ALLOWANCE_REVERTED = \\\"SAFE_ERC_20_ALLOWANCE_REVERTED\\\";\\n\\n    function invokeAndCheckSuccess(address _addr, bytes memory _calldata)\\n        private\\n        returns (bool)\\n    {\\n        bool ret;\\n        assembly {\\n            let ptr := mload(0x40)    // free memory pointer\\n\\n            let success := call(\\n                gas,                  // forward all gas\\n                _addr,                // address\\n                0,                    // no value\\n                add(_calldata, 0x20), // calldata start\\n                mload(_calldata),     // calldata length\\n                ptr,                  // write output over free memory\\n                0x20                  // uint256 return\\n            )\\n\\n            if gt(success, 0) {\\n                // Check number of bytes returned from last function call\\n                switch returndatasize\\n\\n                // No bytes returned: assume success\\n                case 0 {\\n                    ret := 1\\n                }\\n\\n                // 32 bytes returned: check if non-zero\\n                case 0x20 {\\n                    // Only return success if returned data was true\\n                    // Already have output in ptr\\n                    ret := eq(mload(ptr), 1)\\n                }\\n\\n                // Not sure what was returned: don't mark as success\\n                default { }\\n            }\\n        }\\n        return ret;\\n    }\\n\\n    function staticInvoke(address _addr, bytes memory _calldata)\\n        private\\n        view\\n        returns (bool, uint256)\\n    {\\n        bool success;\\n        uint256 ret;\\n        assembly {\\n            let ptr := mload(0x40)    // free memory pointer\\n\\n            success := staticcall(\\n                gas,                  // forward all gas\\n                _addr,                // address\\n                add(_calldata, 0x20), // calldata start\\n                mload(_calldata),     // calldata length\\n                ptr,                  // write output over free memory\\n                0x20                  // uint256 return\\n            )\\n\\n            if gt(success, 0) {\\n                ret := mload(ptr)\\n            }\\n        }\\n        return (success, ret);\\n    }\\n\\n    /**\\n    * @dev Same as a standards-compliant ERC20.transfer() that never reverts (returns false).\\n    *      Note that this makes an external call to the token.\\n    */\\n    function safeTransfer(ERC20 _token, address _to, uint256 _amount) internal returns (bool) {\\n        bytes memory transferCallData = abi.encodeWithSelector(\\n            TRANSFER_SELECTOR,\\n            _to,\\n            _amount\\n        );\\n        return invokeAndCheckSuccess(_token, transferCallData);\\n    }\\n\\n    /**\\n    * @dev Same as a standards-compliant ERC20.transferFrom() that never reverts (returns false).\\n    *      Note that this makes an external call to the token.\\n    */\\n    function safeTransferFrom(ERC20 _token, address _from, address _to, uint256 _amount) internal returns (bool) {\\n        bytes memory transferFromCallData = abi.encodeWithSelector(\\n            _token.transferFrom.selector,\\n            _from,\\n            _to,\\n            _amount\\n        );\\n        return invokeAndCheckSuccess(_token, transferFromCallData);\\n    }\\n\\n    /**\\n    * @dev Same as a standards-compliant ERC20.approve() that never reverts (returns false).\\n    *      Note that this makes an external call to the token.\\n    */\\n    function safeApprove(ERC20 _token, address _spender, uint256 _amount) internal returns (bool) {\\n        bytes memory approveCallData = abi.encodeWithSelector(\\n            _token.approve.selector,\\n            _spender,\\n            _amount\\n        );\\n        return invokeAndCheckSuccess(_token, approveCallData);\\n    }\\n\\n    /**\\n    * @dev Static call into ERC20.balanceOf().\\n    * Reverts if the call fails for some reason (should never fail).\\n    */\\n    function staticBalanceOf(ERC20 _token, address _owner) internal view returns (uint256) {\\n        bytes memory balanceOfCallData = abi.encodeWithSelector(\\n            _token.balanceOf.selector,\\n            _owner\\n        );\\n\\n        (bool success, uint256 tokenBalance) = staticInvoke(_token, balanceOfCallData);\\n        require(success, ERROR_TOKEN_BALANCE_REVERTED);\\n\\n        return tokenBalance;\\n    }\\n\\n    /**\\n    * @dev Static call into ERC20.allowance().\\n    * Reverts if the call fails for some reason (should never fail).\\n    */\\n    function staticAllowance(ERC20 _token, address _owner, address _spender) internal view returns (uint256) {\\n        bytes memory allowanceCallData = abi.encodeWithSelector(\\n            _token.allowance.selector,\\n            _owner,\\n            _spender\\n        );\\n\\n        (bool success, uint256 allowance) = staticInvoke(_token, allowanceCallData);\\n        require(success, ERROR_TOKEN_ALLOWANCE_REVERTED);\\n\\n        return allowance;\\n    }\\n}\\n\",\"keccak256\":\"0xc0cb682f6cd36e8414a9e6b3b0aca7280f500e2acbeeaa19282d69b7f3fd7a1c\"},\"@aragon/os/contracts/common/TimeHelpers.sol\":{\"content\":\"/*\\n * SPDX-License-Identitifer:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\nimport \\\"./Uint256Helpers.sol\\\";\\n\\n\\ncontract TimeHelpers {\\n    using Uint256Helpers for uint256;\\n\\n    /**\\n    * @dev Returns the current block number.\\n    *      Using a function rather than `block.number` allows us to easily mock the block number in\\n    *      tests.\\n    */\\n    function getBlockNumber() internal view returns (uint256) {\\n        return block.number;\\n    }\\n\\n    /**\\n    * @dev Returns the current block number, converted to uint64.\\n    *      Using a function rather than `block.number` allows us to easily mock the block number in\\n    *      tests.\\n    */\\n    function getBlockNumber64() internal view returns (uint64) {\\n        return getBlockNumber().toUint64();\\n    }\\n\\n    /**\\n    * @dev Returns the current timestamp.\\n    *      Using a function rather than `block.timestamp` allows us to easily mock it in\\n    *      tests.\\n    */\\n    function getTimestamp() internal view returns (uint256) {\\n        return block.timestamp; // solium-disable-line security/no-block-members\\n    }\\n\\n    /**\\n    * @dev Returns the current timestamp, converted to uint64.\\n    *      Using a function rather than `block.timestamp` allows us to easily mock it in\\n    *      tests.\\n    */\\n    function getTimestamp64() internal view returns (uint64) {\\n        return getTimestamp().toUint64();\\n    }\\n}\\n\",\"keccak256\":\"0x95b785dc4319f6ce5255c9adf5e68a469a0f837f7b02e01b6bc974b4921d4024\"},\"@aragon/os/contracts/common/Uint256Helpers.sol\":{\"content\":\"pragma solidity ^0.4.24;\\n\\n\\nlibrary Uint256Helpers {\\n    uint256 private constant MAX_UINT64 = uint64(-1);\\n\\n    string private constant ERROR_NUMBER_TOO_BIG = \\\"UINT64_NUMBER_TOO_BIG\\\";\\n\\n    function toUint64(uint256 a) internal pure returns (uint64) {\\n        require(a <= MAX_UINT64, ERROR_NUMBER_TOO_BIG);\\n        return uint64(a);\\n    }\\n}\\n\",\"keccak256\":\"0x83033025a3f4402be3b7bcc9a23ce96ae4fadc7f251da8f139d73a13a3400b0c\"},\"@aragon/os/contracts/common/UnstructuredStorage.sol\":{\"content\":\"/*\\n * SPDX-License-Identitifer:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\n\\nlibrary UnstructuredStorage {\\n    function getStorageBool(bytes32 position) internal view returns (bool data) {\\n        assembly { data := sload(position) }\\n    }\\n\\n    function getStorageAddress(bytes32 position) internal view returns (address data) {\\n        assembly { data := sload(position) }\\n    }\\n\\n    function getStorageBytes32(bytes32 position) internal view returns (bytes32 data) {\\n        assembly { data := sload(position) }\\n    }\\n\\n    function getStorageUint256(bytes32 position) internal view returns (uint256 data) {\\n        assembly { data := sload(position) }\\n    }\\n\\n    function setStorageBool(bytes32 position, bool data) internal {\\n        assembly { sstore(position, data) }\\n    }\\n\\n    function setStorageAddress(bytes32 position, address data) internal {\\n        assembly { sstore(position, data) }\\n    }\\n\\n    function setStorageBytes32(bytes32 position, bytes32 data) internal {\\n        assembly { sstore(position, data) }\\n    }\\n\\n    function setStorageUint256(bytes32 position, uint256 data) internal {\\n        assembly { sstore(position, data) }\\n    }\\n}\\n\",\"keccak256\":\"0xe0d627fc7a7716409389f34cfe49366ba7871309d3a73262ec9608ef73e47591\"},\"@aragon/os/contracts/common/VaultRecoverable.sol\":{\"content\":\"/*\\n * SPDX-License-Identitifer:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\nimport \\\"../lib/token/ERC20.sol\\\";\\nimport \\\"./EtherTokenConstant.sol\\\";\\nimport \\\"./IsContract.sol\\\";\\nimport \\\"./IVaultRecoverable.sol\\\";\\nimport \\\"./SafeERC20.sol\\\";\\n\\n\\ncontract VaultRecoverable is IVaultRecoverable, EtherTokenConstant, IsContract {\\n    using SafeERC20 for ERC20;\\n\\n    string private constant ERROR_DISALLOWED = \\\"RECOVER_DISALLOWED\\\";\\n    string private constant ERROR_VAULT_NOT_CONTRACT = \\\"RECOVER_VAULT_NOT_CONTRACT\\\";\\n    string private constant ERROR_TOKEN_TRANSFER_FAILED = \\\"RECOVER_TOKEN_TRANSFER_FAILED\\\";\\n\\n    /**\\n     * @notice Send funds to recovery Vault. This contract should never receive funds,\\n     *         but in case it does, this function allows one to recover them.\\n     * @param _token Token balance to be sent to recovery vault.\\n     */\\n    function transferToVault(address _token) external {\\n        require(allowRecoverability(_token), ERROR_DISALLOWED);\\n        address vault = getRecoveryVault();\\n        require(isContract(vault), ERROR_VAULT_NOT_CONTRACT);\\n\\n        uint256 balance;\\n        if (_token == ETH) {\\n            balance = address(this).balance;\\n            vault.transfer(balance);\\n        } else {\\n            ERC20 token = ERC20(_token);\\n            balance = token.staticBalanceOf(this);\\n            require(token.safeTransfer(vault, balance), ERROR_TOKEN_TRANSFER_FAILED);\\n        }\\n\\n        emit RecoverToVault(vault, _token, balance);\\n    }\\n\\n    /**\\n    * @dev By default deriving from AragonApp makes it recoverable\\n    * @param token Token address that would be recovered\\n    * @return bool whether the app allows the recovery\\n    */\\n    function allowRecoverability(address token) public view returns (bool) {\\n        return true;\\n    }\\n\\n    // Cast non-implemented interface to be public so we can use it internally\\n    function getRecoveryVault() public view returns (address);\\n}\\n\",\"keccak256\":\"0x4f4de2c27ea7df731ad7d9babc37965a805282fed16b422f46a35d9d2ef931a1\"},\"@aragon/os/contracts/evmscript/EVMScriptRunner.sol\":{\"content\":\"/*\\n * SPDX-License-Identitifer:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\nimport \\\"./IEVMScriptExecutor.sol\\\";\\nimport \\\"./IEVMScriptRegistry.sol\\\";\\n\\nimport \\\"../apps/AppStorage.sol\\\";\\nimport \\\"../kernel/KernelConstants.sol\\\";\\nimport \\\"../common/Initializable.sol\\\";\\n\\n\\ncontract EVMScriptRunner is AppStorage, Initializable, EVMScriptRegistryConstants, KernelNamespaceConstants {\\n    string private constant ERROR_EXECUTOR_UNAVAILABLE = \\\"EVMRUN_EXECUTOR_UNAVAILABLE\\\";\\n    string private constant ERROR_PROTECTED_STATE_MODIFIED = \\\"EVMRUN_PROTECTED_STATE_MODIFIED\\\";\\n\\n    /* This is manually crafted in assembly\\n    string private constant ERROR_EXECUTOR_INVALID_RETURN = \\\"EVMRUN_EXECUTOR_INVALID_RETURN\\\";\\n    */\\n\\n    event ScriptResult(address indexed executor, bytes script, bytes input, bytes returnData);\\n\\n    function getEVMScriptExecutor(bytes _script) public view returns (IEVMScriptExecutor) {\\n        return IEVMScriptExecutor(getEVMScriptRegistry().getScriptExecutor(_script));\\n    }\\n\\n    function getEVMScriptRegistry() public view returns (IEVMScriptRegistry) {\\n        address registryAddr = kernel().getApp(KERNEL_APP_ADDR_NAMESPACE, EVMSCRIPT_REGISTRY_APP_ID);\\n        return IEVMScriptRegistry(registryAddr);\\n    }\\n\\n    function runScript(bytes _script, bytes _input, address[] _blacklist)\\n        internal\\n        isInitialized\\n        protectState\\n        returns (bytes)\\n    {\\n        IEVMScriptExecutor executor = getEVMScriptExecutor(_script);\\n        require(address(executor) != address(0), ERROR_EXECUTOR_UNAVAILABLE);\\n\\n        bytes4 sig = executor.execScript.selector;\\n        bytes memory data = abi.encodeWithSelector(sig, _script, _input, _blacklist);\\n\\n        bytes memory output;\\n        assembly {\\n            let success := delegatecall(\\n                gas,                // forward all gas\\n                executor,           // address\\n                add(data, 0x20),    // calldata start\\n                mload(data),        // calldata length\\n                0,                  // don't write output (we'll handle this ourselves)\\n                0                   // don't write output\\n            )\\n\\n            output := mload(0x40) // free mem ptr get\\n\\n            switch success\\n            case 0 {\\n                // If the call errored, forward its full error data\\n                returndatacopy(output, 0, returndatasize)\\n                revert(output, returndatasize)\\n            }\\n            default {\\n                switch gt(returndatasize, 0x3f)\\n                case 0 {\\n                    // Need at least 0x40 bytes returned for properly ABI-encoded bytes values,\\n                    // revert with \\\"EVMRUN_EXECUTOR_INVALID_RETURN\\\"\\n                    // See remix: doing a `revert(\\\"EVMRUN_EXECUTOR_INVALID_RETURN\\\")` always results in\\n                    // this memory layout\\n                    mstore(output, 0x08c379a000000000000000000000000000000000000000000000000000000000)         // error identifier\\n                    mstore(add(output, 0x04), 0x0000000000000000000000000000000000000000000000000000000000000020) // starting offset\\n                    mstore(add(output, 0x24), 0x000000000000000000000000000000000000000000000000000000000000001e) // reason length\\n                    mstore(add(output, 0x44), 0x45564d52554e5f4558454355544f525f494e56414c49445f52455455524e0000) // reason\\n\\n                    revert(output, 100) // 100 = 4 + 3 * 32 (error identifier + 3 words for the ABI encoded error)\\n                }\\n                default {\\n                    // Copy result\\n                    //\\n                    // Needs to perform an ABI decode for the expected `bytes` return type of\\n                    // `executor.execScript()` as solidity will automatically ABI encode the returned bytes as:\\n                    //    [ position of the first dynamic length return value = 0x20 (32 bytes) ]\\n                    //    [ output length (32 bytes) ]\\n                    //    [ output content (N bytes) ]\\n                    //\\n                    // Perform the ABI decode by ignoring the first 32 bytes of the return data\\n                    let copysize := sub(returndatasize, 0x20)\\n                    returndatacopy(output, 0x20, copysize)\\n\\n                    mstore(0x40, add(output, copysize)) // free mem ptr set\\n                }\\n            }\\n        }\\n\\n        emit ScriptResult(address(executor), _script, _input, output);\\n\\n        return output;\\n    }\\n\\n    modifier protectState {\\n        address preKernel = address(kernel());\\n        bytes32 preAppId = appId();\\n        _; // exec\\n        require(address(kernel()) == preKernel, ERROR_PROTECTED_STATE_MODIFIED);\\n        require(appId() == preAppId, ERROR_PROTECTED_STATE_MODIFIED);\\n    }\\n}\\n\",\"keccak256\":\"0xcb6b5f7d2610321882cdc86819f1a51341c33b510fff7c60936ac7d7a015d7be\"},\"@aragon/os/contracts/evmscript/IEVMScriptExecutor.sol\":{\"content\":\"/*\\n * SPDX-License-Identitifer:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\n\\ninterface IEVMScriptExecutor {\\n    function execScript(bytes script, bytes input, address[] blacklist) external returns (bytes);\\n    function executorType() external pure returns (bytes32);\\n}\\n\",\"keccak256\":\"0x9cab64cd2f10148d4e20433ecd11679e69be1fbde112892c48db94f92e48c571\"},\"@aragon/os/contracts/evmscript/IEVMScriptRegistry.sol\":{\"content\":\"/*\\n * SPDX-License-Identitifer:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\nimport \\\"./IEVMScriptExecutor.sol\\\";\\n\\n\\ncontract EVMScriptRegistryConstants {\\n    /* Hardcoded constants to save gas\\n    bytes32 internal constant EVMSCRIPT_REGISTRY_APP_ID = apmNamehash(\\\"evmreg\\\");\\n    */\\n    bytes32 internal constant EVMSCRIPT_REGISTRY_APP_ID = 0xddbcfd564f642ab5627cf68b9b7d374fb4f8a36e941a75d89c87998cef03bd61;\\n}\\n\\n\\ninterface IEVMScriptRegistry {\\n    function addScriptExecutor(IEVMScriptExecutor executor) external returns (uint id);\\n    function disableScriptExecutor(uint256 executorId) external;\\n\\n    // TODO: this should be external\\n    // See https://github.com/ethereum/solidity/issues/4832\\n    function getScriptExecutor(bytes script) public view returns (IEVMScriptExecutor);\\n}\\n\",\"keccak256\":\"0x00d98507ec160cb7cc814cc9bdebd01a414353636d6045720fe6d1592277694b\"},\"@aragon/os/contracts/kernel/IKernel.sol\":{\"content\":\"/*\\n * SPDX-License-Identitifer:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\nimport \\\"../acl/IACL.sol\\\";\\nimport \\\"../common/IVaultRecoverable.sol\\\";\\n\\n\\ninterface IKernelEvents {\\n    event SetApp(bytes32 indexed namespace, bytes32 indexed appId, address app);\\n}\\n\\n\\n// This should be an interface, but interfaces can't inherit yet :(\\ncontract IKernel is IKernelEvents, IVaultRecoverable {\\n    function acl() public view returns (IACL);\\n    function hasPermission(address who, address where, bytes32 what, bytes how) public view returns (bool);\\n\\n    function setApp(bytes32 namespace, bytes32 appId, address app) public;\\n    function getApp(bytes32 namespace, bytes32 appId) public view returns (address);\\n}\\n\",\"keccak256\":\"0xd02b98282ccd271b0caa86f2c249986f1619dcf41811f5dadce520b32610b68e\"},\"@aragon/os/contracts/kernel/KernelConstants.sol\":{\"content\":\"/*\\n * SPDX-License-Identitifer:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\n\\ncontract KernelAppIds {\\n    /* Hardcoded constants to save gas\\n    bytes32 internal constant KERNEL_CORE_APP_ID = apmNamehash(\\\"kernel\\\");\\n    bytes32 internal constant KERNEL_DEFAULT_ACL_APP_ID = apmNamehash(\\\"acl\\\");\\n    bytes32 internal constant KERNEL_DEFAULT_VAULT_APP_ID = apmNamehash(\\\"vault\\\");\\n    */\\n    bytes32 internal constant KERNEL_CORE_APP_ID = 0x3b4bf6bf3ad5000ecf0f989d5befde585c6860fea3e574a4fab4c49d1c177d9c;\\n    bytes32 internal constant KERNEL_DEFAULT_ACL_APP_ID = 0xe3262375f45a6e2026b7e7b18c2b807434f2508fe1a2a3dfb493c7df8f4aad6a;\\n    bytes32 internal constant KERNEL_DEFAULT_VAULT_APP_ID = 0x7e852e0fcfce6551c13800f1e7476f982525c2b5277ba14b24339c68416336d1;\\n}\\n\\n\\ncontract KernelNamespaceConstants {\\n    /* Hardcoded constants to save gas\\n    bytes32 internal constant KERNEL_CORE_NAMESPACE = keccak256(\\\"core\\\");\\n    bytes32 internal constant KERNEL_APP_BASES_NAMESPACE = keccak256(\\\"base\\\");\\n    bytes32 internal constant KERNEL_APP_ADDR_NAMESPACE = keccak256(\\\"app\\\");\\n    */\\n    bytes32 internal constant KERNEL_CORE_NAMESPACE = 0xc681a85306374a5ab27f0bbc385296a54bcd314a1948b6cf61c4ea1bc44bb9f8;\\n    bytes32 internal constant KERNEL_APP_BASES_NAMESPACE = 0xf1f3eb40f5bc1ad1344716ced8b8a0431d840b5783aea1fd01786bc26f35ac0f;\\n    bytes32 internal constant KERNEL_APP_ADDR_NAMESPACE = 0xd6f028ca0e8edb4a8c9757ca4fdccab25fa1e0317da1188108f7d2dee14902fb;\\n}\\n\",\"keccak256\":\"0x95e46be2becfb4c8952880909cd32adf5dcfa8c2e0fdf4ae054bbf83ef7f53cd\"},\"@aragon/os/contracts/lib/math/SafeMath.sol\":{\"content\":\"// See https://github.com/OpenZeppelin/openzeppelin-solidity/blob/d51e38758e1d985661534534d5c61e27bece5042/contracts/math/SafeMath.sol\\n// Adapted to use pragma ^0.4.24 and satisfy our linter rules\\n\\npragma solidity ^0.4.24;\\n\\n\\n/**\\n * @title SafeMath\\n * @dev Math operations with safety checks that revert on error\\n */\\nlibrary SafeMath {\\n    string private constant ERROR_ADD_OVERFLOW = \\\"MATH_ADD_OVERFLOW\\\";\\n    string private constant ERROR_SUB_UNDERFLOW = \\\"MATH_SUB_UNDERFLOW\\\";\\n    string private constant ERROR_MUL_OVERFLOW = \\\"MATH_MUL_OVERFLOW\\\";\\n    string private constant ERROR_DIV_ZERO = \\\"MATH_DIV_ZERO\\\";\\n\\n    /**\\n    * @dev Multiplies two numbers, reverts on overflow.\\n    */\\n    function mul(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\\n        if (_a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = _a * _b;\\n        require(c / _a == _b, ERROR_MUL_OVERFLOW);\\n\\n        return c;\\n    }\\n\\n    /**\\n    * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\\n    */\\n    function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n        require(_b > 0, ERROR_DIV_ZERO); // Solidity only automatically asserts when dividing by 0\\n        uint256 c = _a / _b;\\n        // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n    * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\\n    */\\n    function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n        require(_b <= _a, ERROR_SUB_UNDERFLOW);\\n        uint256 c = _a - _b;\\n\\n        return c;\\n    }\\n\\n    /**\\n    * @dev Adds two numbers, reverts on overflow.\\n    */\\n    function add(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n        uint256 c = _a + _b;\\n        require(c >= _a, ERROR_ADD_OVERFLOW);\\n\\n        return c;\\n    }\\n\\n    /**\\n    * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\\n    * reverts when dividing by zero.\\n    */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b != 0, ERROR_DIV_ZERO);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x2e11c8dcead82c452ef452f4dbced40e20ae105fa4145d920dac6e077b31d846\"},\"@aragon/os/contracts/lib/math/SafeMath64.sol\":{\"content\":\"// See https://github.com/OpenZeppelin/openzeppelin-solidity/blob/d51e38758e1d985661534534d5c61e27bece5042/contracts/math/SafeMath.sol\\n// Adapted for uint64, pragma ^0.4.24, and satisfying our linter rules\\n// Also optimized the mul() implementation, see https://github.com/aragon/aragonOS/pull/417\\n\\npragma solidity ^0.4.24;\\n\\n\\n/**\\n * @title SafeMath64\\n * @dev Math operations for uint64 with safety checks that revert on error\\n */\\nlibrary SafeMath64 {\\n    string private constant ERROR_ADD_OVERFLOW = \\\"MATH64_ADD_OVERFLOW\\\";\\n    string private constant ERROR_SUB_UNDERFLOW = \\\"MATH64_SUB_UNDERFLOW\\\";\\n    string private constant ERROR_MUL_OVERFLOW = \\\"MATH64_MUL_OVERFLOW\\\";\\n    string private constant ERROR_DIV_ZERO = \\\"MATH64_DIV_ZERO\\\";\\n\\n    /**\\n    * @dev Multiplies two numbers, reverts on overflow.\\n    */\\n    function mul(uint64 _a, uint64 _b) internal pure returns (uint64) {\\n        uint256 c = uint256(_a) * uint256(_b);\\n        require(c < 0x010000000000000000, ERROR_MUL_OVERFLOW); // 2**64 (less gas this way)\\n\\n        return uint64(c);\\n    }\\n\\n    /**\\n    * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\\n    */\\n    function div(uint64 _a, uint64 _b) internal pure returns (uint64) {\\n        require(_b > 0, ERROR_DIV_ZERO); // Solidity only automatically asserts when dividing by 0\\n        uint64 c = _a / _b;\\n        // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n    * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\\n    */\\n    function sub(uint64 _a, uint64 _b) internal pure returns (uint64) {\\n        require(_b <= _a, ERROR_SUB_UNDERFLOW);\\n        uint64 c = _a - _b;\\n\\n        return c;\\n    }\\n\\n    /**\\n    * @dev Adds two numbers, reverts on overflow.\\n    */\\n    function add(uint64 _a, uint64 _b) internal pure returns (uint64) {\\n        uint64 c = _a + _b;\\n        require(c >= _a, ERROR_ADD_OVERFLOW);\\n\\n        return c;\\n    }\\n\\n    /**\\n    * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\\n    * reverts when dividing by zero.\\n    */\\n    function mod(uint64 a, uint64 b) internal pure returns (uint64) {\\n        require(b != 0, ERROR_DIV_ZERO);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x34f18573e7b2180645c67faaff60ebc713ab22c697606d3b3ce4fe0e745955f4\"},\"@aragon/os/contracts/lib/token/ERC20.sol\":{\"content\":\"// See https://github.com/OpenZeppelin/openzeppelin-solidity/blob/a9f910d34f0ab33a1ae5e714f69f9596a02b4d91/contracts/token/ERC20/ERC20.sol\\n\\npragma solidity ^0.4.24;\\n\\n\\n/**\\n * @title ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ncontract ERC20 {\\n    function totalSupply() public view returns (uint256);\\n\\n    function balanceOf(address _who) public view returns (uint256);\\n\\n    function allowance(address _owner, address _spender)\\n        public view returns (uint256);\\n\\n    function transfer(address _to, uint256 _value) public returns (bool);\\n\\n    function approve(address _spender, uint256 _value)\\n        public returns (bool);\\n\\n    function transferFrom(address _from, address _to, uint256 _value)\\n        public returns (bool);\\n\\n    event Transfer(\\n        address indexed from,\\n        address indexed to,\\n        uint256 value\\n    );\\n\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n}\\n\",\"keccak256\":\"0xa2e319fde92f9e70912f09bf6e99bbf8b9b798961d54ffcba59d347d37bde1b7\"},\"contracts/BalanceRedirectPresale.sol\":{\"content\":\"pragma solidity ^0.4.24;\\n\\nimport \\\"@aragon/os/contracts/apps/AragonApp.sol\\\";\\nimport \\\"@aragon/os/contracts/common/IsContract.sol\\\";\\nimport \\\"@aragon/os/contracts/common/SafeERC20.sol\\\";\\nimport \\\"@aragon/os/contracts/lib/math/SafeMath.sol\\\";\\nimport \\\"@aragon/os/contracts/lib/math/SafeMath64.sol\\\";\\nimport \\\"@aragon/os/contracts/lib/token/ERC20.sol\\\";\\nimport \\\"@aragon/apps-token-manager/contracts/TokenManager.sol\\\";\\nimport \\\"@ablack/fundraising-shared-interfaces/contracts/IAragonFundraisingController.sol\\\";\\n\\nimport \\\"@ablack/fundraising-shared-interfaces/contracts/IPresale.sol\\\";\\n\\nimport \\\"./lib/IMarketMaker.sol\\\";\\n\\n\\ncontract BalanceRedirectPresale is IsContract, AragonApp, IPresale {\\n    using SafeERC20  for ERC20;\\n    using SafeMath   for uint256;\\n    using SafeMath64 for uint64;\\n\\n    /**\\n    Hardcoded constants to save gas\\n    bytes32 public constant OPEN_ROLE                   = keccak256(\\\"OPEN_ROLE\\\");\\n    bytes32 public constant REDUCE_BENEFICIARY_PCT_ROLE = keccak256(\\\"REDUCE_BENEFICIARY_PCT_ROLE\\\");\\n    bytes32 public constant CONTRIBUTE_ROLE             = keccak256(\\\"CONTRIBUTE_ROLE\\\");\\n    */\\n    bytes32 public constant OPEN_ROLE                   = 0xefa06053e2ca99a43c97c4a4f3d8a394ee3323a8ff237e625fba09fe30ceb0a4;\\n    bytes32 public constant REDUCE_BENEFICIARY_PCT_ROLE = 0x2738f3f227143b7fbb9720e93e2e5b36d7a15966e130b49f1582c6432d949aa9;\\n    bytes32 public constant CONTRIBUTE_ROLE             = 0x9ccaca4edf2127f20c425fdd86af1ba178b9e5bee280cd70d88ac5f6874c4f07;\\n\\n    uint256 public constant PPM = 1000000; // 0% = 0 * 10 ** 4; 1% = 1 * 10 ** 4; 100% = 100 * 10 ** 4\\n\\n    string private constant ERROR_CONTRACT_IS_EOA          = \\\"PRESALE_CONTRACT_IS_EOA\\\";\\n    string private constant ERROR_INVALID_BENEFICIARY      = \\\"PRESALE_INVALID_BENEFICIARY\\\";\\n    string private constant ERROR_INVALID_CONTRIBUTE_TOKEN = \\\"PRESALE_INVALID_CONTRIBUTE_TOKEN\\\";\\n    string private constant ERROR_INVALID_EXCHANGE_RATE    = \\\"PRESALE_INVALID_EXCHANGE_RATE\\\";\\n    string private constant ERROR_INVALID_OPEN_DATE        = \\\"PRESALE_INVALID_OPEN_DATE\\\";\\n    string private constant ERROR_TIME_PERIOD_ZERO         = \\\"PRESALE_TIME_PERIOD_ZERO\\\";\\n    string private constant ERROR_INVALID_TIME_PERIOD      = \\\"PRESALE_INVALID_TIME_PERIOD\\\";\\n    string private constant ERROR_INVALID_PCT              = \\\"PRESALE_INVALID_PCT\\\";\\n    string private constant ERROR_INVALID_STATE            = \\\"PRESALE_INVALID_STATE\\\";\\n    string private constant ERROR_INVALID_CONTRIBUTE_VALUE = \\\"PRESALE_INVALID_CONTRIBUTE_VALUE\\\";\\n    string private constant ERROR_INSUFFICIENT_BALANCE     = \\\"PRESALE_INSUFFICIENT_BALANCE\\\";\\n    string private constant ERROR_INSUFFICIENT_ALLOWANCE   = \\\"PRESALE_INSUFFICIENT_ALLOWANCE\\\";\\n    string private constant ERROR_TOKEN_TRANSFER_REVERTED  = \\\"PRESALE_TOKEN_TRANSFER_REVERTED\\\";\\n    string private constant ERROR_NO_REFUNDS               = \\\"PRESALE_NO_REFUNDS\\\";\\n\\n    enum State {\\n        Pending,     // presale is idle and pending to be started\\n        Funding,     // presale has started and contributors can purchase tokens\\n        Finished,    // presale period is over, but it hasn't been closed yet\\n        Closed       // presale has been closed and trading has been open\\n    }\\n\\n    IAragonFundraisingController                  public   controller;\\n    IMarketMaker                                  public   marketMaker;\\n    TokenManager                                  public   tokenManager;\\n    address                                       public   reserve;\\n    address                                       public   beneficiary;\\n    ERC20                                         internal erc20ContribToken;\\n\\n    uint64                                        public   period;\\n    uint256                                       public   exchangeRate;\\n    uint256                                       public   mintingForBeneficiaryPct;\\n    uint64                                        public   openDate;\\n\\n    bool                                          public   isClosed;\\n    uint256                                       public   totalRaised;\\n    uint256                                       public   totalSold;\\n\\n    event SetOpenDate          (uint64 date);\\n    event ReduceBeneficiatyPct (uint256 pct);\\n    event Close                ();\\n    event Contribute           (address indexed contributor, uint256 value, uint256 amount);\\n\\n    /***** external function *****/\\n\\n    /**\\n     * @notice Initialize presale\\n     * @param _controller               The address of the controller contract\\n     * @param _marketMaker              The address of the market maker contract\\n     * @param _tokenManager             The address of the [bonded] token manager contract\\n     * @param _reserve                  The address of the reserve [pool] contract\\n     * @param _beneficiary              The address of the beneficiary [to whom a percentage of the raised funds is be to be sent]\\n     * @param _erc20ContribToken        The address of the token to be used to contribute\\n     * @param _period                   The period within which to accept contribution for that presale\\n     * @param _exchangeRate             The exchangeRate [= 1/price] at which [bonded] tokens are to be purchased for that presale [in PPM]\\n     * @param _openDate                 The date upon which that presale is to be open [ignored if 0]\\n    */\\n    function initialize(\\n        IAragonFundraisingController _controller,\\n        IMarketMaker                 _marketMaker,\\n        TokenManager                 _tokenManager,\\n        address                      _reserve,\\n        address                      _beneficiary,\\n        ERC20                        _erc20ContribToken,\\n        uint64                       _period,\\n        uint256                      _exchangeRate,\\n        uint256                      _mintingForBeneficiaryPct,\\n        uint64                       _openDate\\n    )\\n        external\\n        onlyInit\\n    {\\n        require(isContract(_controller),                                            ERROR_CONTRACT_IS_EOA);\\n        require(isContract(_marketMaker),                                           ERROR_CONTRACT_IS_EOA);\\n        require(isContract(_tokenManager),                                          ERROR_CONTRACT_IS_EOA);\\n        require(isContract(_reserve),                                               ERROR_CONTRACT_IS_EOA);\\n        require(_beneficiary != address(0),                                         ERROR_INVALID_BENEFICIARY);\\n        require(isContract(_erc20ContribToken),                                     ERROR_INVALID_CONTRIBUTE_TOKEN);\\n        require(_exchangeRate > 0,                                                  ERROR_INVALID_EXCHANGE_RATE);\\n        require(_mintingForBeneficiaryPct < PPM, ERROR_INVALID_PCT);\\n\\n        initialized();\\n\\n        controller = _controller;\\n        marketMaker = _marketMaker;\\n        tokenManager = _tokenManager;\\n        reserve = _reserve;\\n        beneficiary = _beneficiary;\\n        erc20ContribToken = _erc20ContribToken;\\n        exchangeRate = _exchangeRate;\\n        mintingForBeneficiaryPct = _mintingForBeneficiaryPct;\\n\\n        _setPeriod(_period);\\n\\n        if (_openDate != 0) {\\n            _setOpenDate(_openDate);\\n        }\\n    }\\n\\n    /**\\n     * @notice Set presale open date\\n     * @param _date New date to be set\\n    */\\n    function setOpenDate(uint64 _date) external auth(OPEN_ROLE) {\\n        _setOpenDate(_date);\\n    }\\n\\n    /**\\n     * @notice Set presale duration\\n     * @param _period New duration to be set\\n    */\\n    function setPeriod(uint64 _period) external auth(OPEN_ROLE) {\\n        _setPeriod(_period);\\n    }\\n\\n    /**\\n     * @notice Reduce pre-minting for beneficiary percentage to `_pct`\\n     * @param _pct New percentage to be set\\n    */\\n    function reduceBeneficiaryPct(uint64 _pct) external auth(REDUCE_BENEFICIARY_PCT_ROLE) {\\n        require(_pct < mintingForBeneficiaryPct, ERROR_INVALID_PCT);\\n\\n        mintingForBeneficiaryPct = _pct;\\n\\n        emit ReduceBeneficiatyPct(_pct);\\n    }\\n\\n    /**\\n     * @notice Open presale [enabling users to contribute]\\n    */\\n    function open() external auth(OPEN_ROLE) {\\n        _setOpenDate(getTimestamp64());\\n    }\\n\\n    /**\\n     * @notice Contribute to the presale up to `@tokenAmount(self.erc20ContribToken(): address, _value)`\\n     * @param _contributor The address of the contributor\\n     * @param _value       The amount of contribution token to be spent\\n    */\\n    function contribute(address _contributor, uint256 _value) external payable nonReentrant auth(CONTRIBUTE_ROLE) {\\n        require(state() == State.Funding,                                           ERROR_INVALID_STATE);\\n        require(msg.value == 0,                                                     ERROR_INVALID_CONTRIBUTE_VALUE);\\n        require(_value > 0,                                                         ERROR_INVALID_CONTRIBUTE_VALUE);\\n        require(erc20ContribToken.balanceOf(_contributor) >= _value,                ERROR_INSUFFICIENT_BALANCE);\\n        require(erc20ContribToken.allowance(_contributor, address(this)) >= _value, ERROR_INSUFFICIENT_ALLOWANCE);\\n\\n        // (contributor) ~~~> contribution tokens ~~~> (presale)\\n        _transfer(erc20ContribToken, _contributor, address(this), _value);\\n\\n        // (mint \\u2728) ~~~> project tokens ~~~> (contributor)\\n        uint256 tokensToSell = contributionToTokens(_value);\\n        totalRaised = totalRaised.add(_value);\\n        totalSold = totalSold.add(tokensToSell);\\n        tokenManager.mint(_contributor, tokensToSell);\\n\\n        emit Contribute(_contributor, _value, tokensToSell);\\n    }\\n\\n    /**\\n     * @notice Does nothing. Interface compliance.\\n    */\\n    function refund(address, uint256) external isInitialized {\\n        revert(ERROR_NO_REFUNDS);\\n    }\\n\\n    /**\\n     * @notice Close presale and open trading\\n    */\\n    function close() external nonReentrant isInitialized {\\n        require(state() == State.Finished, ERROR_INVALID_STATE);\\n\\n        isClosed = true;\\n\\n        // mint new tokens for beneficiary\\n        uint256 tokensToMint;\\n        if (mintingForBeneficiaryPct > 0) {\\n            // No need for SafeMath, already checked mintingForBeneficiaryPct < PPM\\n            tokensToMint = totalSold.mul(mintingForBeneficiaryPct) / (PPM - mintingForBeneficiaryPct);\\n            tokenManager.mint(beneficiary, tokensToMint);\\n        }\\n\\n        // (presale) ~~~> contribution tokens ~~~> (reserve)\\n        (,,, uint32 reserveRatio,) = marketMaker.getCollateralToken(address(erc20ContribToken));\\n        uint256 tokensForReserve = (totalRaised.mul(PPM) / (PPM - mintingForBeneficiaryPct)).mul(reserveRatio) / PPM;\\n        _transfer(erc20ContribToken, address(this), reserve, tokensForReserve);\\n\\n        // (presale) ~~~> contribution tokens ~~~> (beneficiary)\\n        uint256 fundsForBeneficiary = erc20ContribToken.balanceOf(address(this));\\n        if (fundsForBeneficiary > 0) {\\n            _transfer(erc20ContribToken, address(this), beneficiary, fundsForBeneficiary);\\n        }\\n\\n        // open trading\\n        controller.openTrading();\\n\\n        emit Close();\\n    }\\n\\n    function contributionToken() public view returns (address) {\\n        return address(erc20ContribToken);\\n    }\\n\\n    /***** public view functions *****/\\n\\n    /**\\n     * @notice Computes the amount of [bonded] tokens that would be purchased for `@tokenAmount(self.contributionToken(): address, _value)`\\n     * @param _value The amount of contribution tokens to be used in that computation\\n    */\\n    function contributionToTokens(uint256 _value) public view isInitialized returns (uint256) {\\n        return _value.mul(exchangeRate).div(PPM);\\n    }\\n\\n    /**\\n     * @notice Returns the current state of that presale\\n    */\\n    function state() public view isInitialized returns (State) {\\n        if (openDate == 0 || openDate > getTimestamp64()) {\\n            return State.Pending;\\n        }\\n\\n        if (isClosed) {\\n            return State.Closed;\\n        }\\n\\n        if (_timeSinceOpen() >= period) {\\n            return State.Finished;\\n        }\\n\\n        return State.Funding;\\n    }\\n\\n    /***** internal functions *****/\\n\\n    function _timeSinceOpen() internal view returns (uint64) {\\n        if (openDate == 0) {\\n            return 0;\\n        } else {\\n            return getTimestamp64().sub(openDate);\\n        }\\n    }\\n\\n    function _setOpenDate(uint64 _date) internal {\\n        require(state() == State.Pending, ERROR_INVALID_STATE);\\n        require(_date >= getTimestamp64(), ERROR_INVALID_OPEN_DATE);\\n\\n        openDate = _date;\\n\\n        emit SetOpenDate(_date);\\n    }\\n\\n    function _setPeriod(uint64 _period) internal {\\n        require(_period > 0, ERROR_TIME_PERIOD_ZERO);\\n        require(openDate == 0 || openDate.add(_period) > getTimestamp64(), ERROR_INVALID_TIME_PERIOD);\\n        period = _period;\\n    }\\n\\n    function _transfer(ERC20 _token, address _from, address _to, uint256 _amount) internal {\\n        if (_from == address(this)) {\\n            require(_token.safeTransfer(_to, _amount), ERROR_TOKEN_TRANSFER_REVERTED);\\n        } else {\\n            require(_token.safeTransferFrom(_from, _to, _amount), ERROR_TOKEN_TRANSFER_REVERTED);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe0a8d609effef78974f84d7e199718ca846049062d7c90377ebad62608f53f49\"},\"contracts/lib/IMarketMaker.sol\":{\"content\":\"pragma solidity ^0.4.24;\\n\\n\\ninterface IMarketMaker {\\n    function getCollateralToken(address _collateral) public view returns (bool, uint256, uint256, uint32, uint256);\\n}\",\"keccak256\":\"0x568f5f7124e2ddbc9438163619cd006f3f9634035ae196c9092da1823d38e2de\"}},\"version\":1}",
  "bytecode": "0x6080604052620000176401000000006200001d810204565b6200023b565b6200003064010000000062000125810204565b60408051808201909152601881527f494e49545f414c52454144595f494e495449414c495a45440000000000000000602082015290156200010c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015620000d0578181015183820152602001620000b6565b50505050905090810190601f168015620000fe5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b506200012360001964010000000062000154810204565b565b60006200014f60008051602062003602833981519152640100000000620028176200023382021704565b905090565b6200016764010000000062000125810204565b60408051808201909152601881527f494e49545f414c52454144595f494e495449414c495a454400000000000000006020820152901562000206576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252838181518152602001915080519060200190808383600083811015620000d0578181015183820152602001620000b6565b506200023060008051602062003602833981519152826401000000006200281b6200023782021704565b50565b5490565b9055565b6133b7806200024b6000396000f3006080604052600436106101be5763ffffffff60e060020a6000350416630803fac081146101c35780630d720bbc146101ec5780631f21f9af146102135780632914b9bd146102445780632a709b141461029d578063309cb5ea146102b257806332f0a3b5146102d657806338af3eed146102eb5780633ba0b9a914610300578063410085df1461031557806343d726d6146103395780634a15fd931461034e5780634bedf9a814610370578063542ba298146103855780636a928e8f1461039a5780637af2b8a0146103af5780637e7db6e1146103c457806380afdea8146103e55780638418cd99146103fa5780638b3dd749146104115780639106d7ba1461042657806396330f461461043b5780639d4941d814610453578063a1658fad14610474578063a2b96b6f146104db578063a479e508146104f0578063b086d74014610505578063c19d93fb14610527578063c226793b14610560578063c2b6b58c146105bc578063c5c4744c146105d1578063cd3293de146105e6578063d4aae0c4146105fb578063de4796ed14610610578063ec8cb28114610625578063ef78d4fd14610657578063f77c47911461066c578063fcfff16f14610681575b600080fd5b3480156101cf57600080fd5b506101d8610696565b604080519115158252519081900360200190f35b3480156101f857600080fd5b506102016106bf565b60408051918252519081900360200190f35b34801561021f57600080fd5b506102286106c6565b60408051600160a060020a039092168252519081900360200190f35b34801561025057600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526102289436949293602493928401919081908401838280828437509497506106d59650505050505050565b3480156102a957600080fd5b506102286107bb565b3480156102be57600080fd5b506102d467ffffffffffffffff600435166107ca565b005b3480156102e257600080fd5b506102286108b8565b3480156102f757600080fd5b50610228610931565b34801561030c57600080fd5b50610201610940565b34801561032157600080fd5b506102d4600160a060020a0360043516602435610946565b34801561034557600080fd5b506102d4610a40565b34801561035a57600080fd5b506102d467ffffffffffffffff60043516610f81565b34801561037c57600080fd5b5061022861102d565b34801561039157600080fd5b5061020161103c565b3480156103a657600080fd5b50610201611042565b3480156103bb57600080fd5b50610201611054565b3480156103d057600080fd5b506101d8600160a060020a0360043516611078565b3480156103f157600080fd5b5061020161107e565b6102d4600160a060020a03600435166024356110ae565b34801561041d57600080fd5b5061020161174d565b34801561043257600080fd5b50610201611778565b34801561044757600080fd5b5061020160043561177e565b34801561045f57600080fd5b506102d4600160a060020a036004351661182b565b34801561048057600080fd5b5060408051602060046044358181013583810280860185019096528085526101d8958335600160a060020a0316956024803596369695606495939492019291829185019084908082843750949750611aba9650505050505050565b3480156104e757600080fd5b50610201611c0a565b3480156104fc57600080fd5b50610228611c2e565b34801561051157600080fd5b506102d467ffffffffffffffff60043516611ce3565b34801561053357600080fd5b5061053c611e72565b6040518082600381111561054c57fe5b60ff16815260200191505060405180910390f35b34801561056c57600080fd5b506102d4600160a060020a0360043581169060243581169060443581169060643581169060843581169060a4351667ffffffffffffffff60c43581169060e4359061010435906101243516611f90565b3480156105c857600080fd5b506101d86124f9565b3480156105dd57600080fd5b5061020161250e565b3480156105f257600080fd5b50610228612514565b34801561060757600080fd5b50610228612523565b34801561061c57600080fd5b506101d861254e565b34801561063157600080fd5b5061063a612561565b6040805167ffffffffffffffff9092168252519081900360200190f35b34801561066357600080fd5b5061063a612571565b34801561067857600080fd5b50610228612599565b34801561068d57600080fd5b506102d46125a8565b6000806106a161174d565b905080158015906106b95750806106b661265e565b10155b91505090565b620f424081565b600154600160a060020a031681565b60006106df611c2e565b600160a060020a03166304bf2a7f836040518263ffffffff1660e060020a0281526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561073d578181015183820152602001610725565b50505050905090810190601f16801561076a5780820380516001836020036101000a031916815260200191505b5092505050602060405180830381600087803b15801561078957600080fd5b505af115801561079d573d6000803e3d6000fd5b505050506040513d60208110156107b357600080fd5b505192915050565b600254600160a060020a031681565b6040805160008082526020820190925260008051602061332c833981519152916107fa9133918491905b50611aba565b60408051808201909152600f81526000805160206132ec83398151915260208201529015156108aa5760405160e560020a62461bcd0281526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561086f578181015183820152602001610857565b50505050905090810190601f16801561089c5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b506108b482612662565b5050565b60006108c2612523565b600160a060020a03166332f0a3b56040518163ffffffff1660e060020a028152600401602060405180830381600087803b1580156108ff57600080fd5b505af1158015610913573d6000803e3d6000fd5b505050506040513d602081101561092957600080fd5b505190505b90565b600454600160a060020a031681565b60065481565b61094e610696565b604080518082019091526014815260008051602061336c83398151915260208201529015156109c25760405160e560020a62461bcd0281526004018080602001828103825283818151815260200191508051906020019080838360008381101561086f578181015183820152602001610857565b50604080518082018252601281527f50524553414c455f4e4f5f524546554e445300000000000000000000000000006020808301918252925160e560020a62461bcd0281526004810193845282516024820152825192939283926044909201919080838360008381101561086f578181015183820152602001610857565b6000808080610a5c60008051602061334c833981519152612817565b60408051808201909152601981527f5245454e5452414e43595f5245454e5452414e545f43414c4c0000000000000060208201529015610ae15760405160e560020a62461bcd0281526004018080602001828103825283818151815260200191508051906020019080838360008381101561086f578181015183820152602001610857565b50610b0160008051602061334c833981519152600163ffffffff61281b16565b610b09610696565b604080518082019091526014815260008051602061336c8339815191526020820152901515610b7d5760405160e560020a62461bcd0281526004018080602001828103825283818151815260200191508051906020019080838360008381101561086f578181015183820152602001610857565b506002610b88611e72565b6003811115610b9357fe5b60408051808201909152601581527f50524553414c455f494e56414c49445f5354415445000000000000000000000060208201529114610c185760405160e560020a62461bcd0281526004018080602001828103825283818151815260200191508051906020019080838360008381101561086f578181015183820152602001610857565b506008805468ff000000000000000019166801000000000000000017905560075460001015610cfc57600754620f424003610c60600754600a5461281f90919063ffffffff16565b811515610c6957fe5b60025460048054604080517f40c10f19000000000000000000000000000000000000000000000000000000008152600160a060020a0392831693810193909352949093046024820181905293519397509116916340c10f199160448082019260009290919082900301818387803b158015610ce357600080fd5b505af1158015610cf7573d6000803e3d6000fd5b505050505b600154600554604080517ff190e427000000000000000000000000000000000000000000000000000000008152600160a060020a0392831660048201529051919092169163f190e4279160248083019260a09291908290030181600087803b158015610d6757600080fd5b505af1158015610d7b573d6000803e3d6000fd5b505050506040513d60a0811015610d9157600080fd5b5060600151600754600954919450620f424091610dd79163ffffffff8088169291850391610dc191869061281f16565b811515610dca57fe5b049063ffffffff61281f16565b811515610de057fe5b600554600354929091049350610e0591600160a060020a0391821691309116856128d6565b600554604080517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529051600160a060020a03909216916370a08231916024808201926020929091908290030181600087803b158015610e6b57600080fd5b505af1158015610e7f573d6000803e3d6000fd5b505050506040513d6020811015610e9557600080fd5b505190506000811115610ec157600554600454610ec191600160a060020a0390811691309116846128d6565b60008054604080517fc9567bf90000000000000000000000000000000000000000000000000000000081529051600160a060020a039092169263c9567bf99260048084019382900301818387803b158015610f1b57600080fd5b505af1158015610f2f573d6000803e3d6000fd5b50506040517fc35789ccff76271dc0efa6bfde2f4d4a32cd48dd86278f75f8648cb068c86e3b925060009150a1610f7b60008051602061334c833981519152600063ffffffff61281b16565b50505050565b6040805160008082526020820190925260008051602061332c83398151915291610faf9133918491906107f4565b60408051808201909152600f81526000805160206132ec83398151915260208201529015156110235760405160e560020a62461bcd0281526004018080602001828103825283818151815260200191508051906020019080838360008381101561086f578181015183820152602001610857565b506108b482612a35565b600554600160a060020a031690565b60075481565b60008051602061332c83398151915281565b7f2738f3f227143b7fbb9720e93e2e5b36d7a15966e130b49f1582c6432d949aa981565b50600190565b60006110a97fd625496217aa6a3453eecb9c3489dc5a53e6c67b444329ea2b2cbc9ff547639b612817565b905090565b60006110c760008051602061334c833981519152612817565b60408051808201909152601981527f5245454e5452414e43595f5245454e5452414e545f43414c4c000000000000006020820152901561114c5760405160e560020a62461bcd0281526004018080602001828103825283818151815260200191508051906020019080838360008381101561086f578181015183820152602001610857565b5061116c60008051602061334c833981519152600163ffffffff61281b16565b604080516000808252602082019092527f9ccaca4edf2127f20c425fdd86af1ba178b9e5bee280cd70d88ac5f6874c4f07916111ac9133918491906107f4565b60408051808201909152600f81526000805160206132ec83398151915260208201529015156112205760405160e560020a62461bcd0281526004018080602001828103825283818151815260200191508051906020019080838360008381101561086f578181015183820152602001610857565b50600161122b611e72565b600381111561123657fe5b60408051808201909152601581527f50524553414c455f494e56414c49445f53544154450000000000000000000000602082015291146112bb5760405160e560020a62461bcd0281526004018080602001828103825283818151815260200191508051906020019080838360008381101561086f578181015183820152602001610857565b506040805180820190915260208082527f50524553414c455f494e56414c49445f434f4e545249425554455f56414c55459082015234156113415760405160e560020a62461bcd0281526004018080602001828103825283818151815260200191508051906020019080838360008381101561086f578181015183820152602001610857565b506040805180820190915260208082527f50524553414c455f494e56414c49445f434f4e545249425554455f56414c554590820152600084116113c95760405160e560020a62461bcd0281526004018080602001828103825283818151815260200191508051906020019080838360008381101561086f578181015183820152602001610857565b50600554604080517f70a08231000000000000000000000000000000000000000000000000000000008152600160a060020a0387811660048301529151869392909216916370a08231916024808201926020929091908290030181600087803b15801561143557600080fd5b505af1158015611449573d6000803e3d6000fd5b505050506040513d602081101561145f57600080fd5b505160408051808201909152601c81527f50524553414c455f494e53554646494349454e545f42414c414e43450000000060208201529111156114e75760405160e560020a62461bcd0281526004018080602001828103825283818151815260200191508051906020019080838360008381101561086f578181015183820152602001610857565b50600554604080517fdd62ed3e000000000000000000000000000000000000000000000000000000008152600160a060020a03878116600483015230602483015291518693929092169163dd62ed3e916044808201926020929091908290030181600087803b15801561155957600080fd5b505af115801561156d573d6000803e3d6000fd5b505050506040513d602081101561158357600080fd5b505160408051808201909152601e81527f50524553414c455f494e53554646494349454e545f414c4c4f57414e43450000602082015291111561160b5760405160e560020a62461bcd0281526004018080602001828103825283818151815260200191508051906020019080838360008381101561086f578181015183820152602001610857565b5060055461162490600160a060020a03168530866128d6565b61162d8361177e565b600954909250611643908463ffffffff612bc416565b600955600a54611659908363ffffffff612bc416565b600a55600254604080517f40c10f19000000000000000000000000000000000000000000000000000000008152600160a060020a03878116600483015260248201869052915191909216916340c10f1991604480830192600092919082900301818387803b1580156116ca57600080fd5b505af11580156116de573d6000803e3d6000fd5b505060408051868152602081018690528151600160a060020a03891694507fc9ec9df36a160cd05ae36393dca23c0128234fc68a48baec833a6d8b5967d6da93509081900390910190a25061174860008051602061334c833981519152600063ffffffff61281b16565b505050565b60006110a97febb05b386a8d34882b8711d156f463690983dc47815980fb82aeeff1aa43579e612817565b600a5481565b6000611788610696565b604080518082019091526014815260008051602061336c83398151915260208201529015156117fc5760405160e560020a62461bcd0281526004018080602001828103825283818151815260200191508051906020019080838360008381101561086f578181015183820152602001610857565b50611825620f42406118196006548561281f90919063ffffffff16565b9063ffffffff612c5616565b92915050565b600080600061183984611078565b60408051808201909152601281527f5245434f5645525f444953414c4c4f574544000000000000000000000000000060208201529015156118bf5760405160e560020a62461bcd0281526004018080602001828103825283818151815260200191508051906020019080838360008381101561086f578181015183820152602001610857565b506118c86108b8565b92506118d383612cf6565b60408051808201909152601a81527f5245434f5645525f5641554c545f4e4f545f434f4e545241435400000000000060208201529015156119595760405160e560020a62461bcd0281526004018080602001828103825283818151815260200191508051906020019080838360008381101561086f578181015183820152602001610857565b50600160a060020a03841615156119aa5760405130319250600160a060020a0384169083156108fc029084906000818181858888f193505050501580156119a4573d6000803e3d6000fd5b50611a69565b50826119c5600160a060020a0382163063ffffffff612d2316565b91506119e1600160a060020a038216848463ffffffff612e3816565b60408051808201909152601d81527f5245434f5645525f544f4b454e5f5452414e534645525f4641494c45440000006020820152901515611a675760405160e560020a62461bcd0281526004018080602001828103825283818151815260200191508051906020019080838360008381101561086f578181015183820152602001610857565b505b83600160a060020a031683600160a060020a03167f596caf56044b55fb8c4ca640089bbc2b63cae3e978b851f5745cbb7c5b288e02846040518082815260200191505060405180910390a350505050565b600080611ac5610696565b1515611ad45760009150611c02565b611adc612523565b9050600160a060020a0381161515611af75760009150611c02565b80600160a060020a031663fdef9106863087611b1288612ec3565b60405160e060020a63ffffffff8716028152600160a060020a03808616600483019081529085166024830152604482018490526080606483019081528351608484015283519192909160a490910190602085019080838360005b83811015611b84578181015183820152602001611b6c565b50505050905090810190601f168015611bb15780820380516001836020036101000a031916815260200191505b5095505050505050602060405180830381600087803b158015611bd357600080fd5b505af1158015611be7573d6000803e3d6000fd5b505050506040513d6020811015611bfd57600080fd5b505191505b509392505050565b7f9ccaca4edf2127f20c425fdd86af1ba178b9e5bee280cd70d88ac5f6874c4f0781565b600080611c39612523565b604080517fbe00bbd80000000000000000000000000000000000000000000000000000000081527fd6f028ca0e8edb4a8c9757ca4fdccab25fa1e0317da1188108f7d2dee14902fb60048201527fddbcfd564f642ab5627cf68b9b7d374fb4f8a36e941a75d89c87998cef03bd6160248201529051600160a060020a03929092169163be00bbd8916044808201926020929091908290030181600087803b15801561078957600080fd5b604080516000808252602082019092527f2738f3f227143b7fbb9720e93e2e5b36d7a15966e130b49f1582c6432d949aa991611d239133918491906107f4565b60408051808201909152600f81526000805160206132ec8339815191526020820152901515611d975760405160e560020a62461bcd0281526004018080602001828103825283818151815260200191508051906020019080838360008381101561086f578181015183820152602001610857565b5060075460408051808201909152601381527f50524553414c455f494e56414c49445f5043540000000000000000000000000060208201529067ffffffffffffffff841610611e2b5760405160e560020a62461bcd0281526004018080602001828103825283818151815260200191508051906020019080838360008381101561086f578181015183820152602001610857565b5067ffffffffffffffff8216600781905560408051918252517fa50304e35b9add7e0d49e0d23f05a2a2935cfa28fdc3abe3636318af4bed22459181900360200190a15050565b6000611e7c610696565b604080518082019091526014815260008051602061336c8339815191526020820152901515611ef05760405160e560020a62461bcd0281526004018080602001828103825283818151815260200191508051906020019080838360008381101561086f578181015183820152602001610857565b5060085467ffffffffffffffff161580611f205750611f0d612ecd565b60085467ffffffffffffffff9182169116115b15611f2d5750600061092e565b60085468010000000000000000900460ff1615611f4c5750600361092e565b60055474010000000000000000000000000000000000000000900467ffffffffffffffff16611f79612edf565b67ffffffffffffffff16106110785750600261092e565b611f9861174d565b60408051808201909152601881527f494e49545f414c52454144595f494e495449414c495a454400000000000000006020820152901561201d5760405160e560020a62461bcd0281526004018080602001828103825283818151815260200191508051906020019080838360008381101561086f578181015183820152602001610857565b506120278a612cf6565b604080518082019091526017815260008051602061330c833981519152602082015290151561209b5760405160e560020a62461bcd0281526004018080602001828103825283818151815260200191508051906020019080838360008381101561086f578181015183820152602001610857565b506120a589612cf6565b604080518082019091526017815260008051602061330c83398151915260208201529015156121195760405160e560020a62461bcd0281526004018080602001828103825283818151815260200191508051906020019080838360008381101561086f578181015183820152602001610857565b5061212388612cf6565b604080518082019091526017815260008051602061330c83398151915260208201529015156121975760405160e560020a62461bcd0281526004018080602001828103825283818151815260200191508051906020019080838360008381101561086f578181015183820152602001610857565b506121a187612cf6565b604080518082019091526017815260008051602061330c83398151915260208201529015156122155760405160e560020a62461bcd0281526004018080602001828103825283818151815260200191508051906020019080838360008381101561086f578181015183820152602001610857565b5060408051808201909152601b81527f50524553414c455f494e56414c49445f42454e454649434941525900000000006020820152600160a060020a03871615156122a55760405160e560020a62461bcd0281526004018080602001828103825283818151815260200191508051906020019080838360008381101561086f578181015183820152602001610857565b506122af85612cf6565b6040805190810160405280602081526020017f50524553414c455f494e56414c49445f434f4e545249425554455f544f4b454e8152509015156123375760405160e560020a62461bcd0281526004018080602001828103825283818151815260200191508051906020019080838360008381101561086f578181015183820152602001610857565b5060408051808201909152601d81527f50524553414c455f494e56414c49445f45584348414e47455f524154450000006020820152600084116123bf5760405160e560020a62461bcd0281526004018080602001828103825283818151815260200191508051906020019080838360008381101561086f578181015183820152602001610857565b5060408051808201909152601381527f50524553414c455f494e56414c49445f504354000000000000000000000000006020820152620f424083106124495760405160e560020a62461bcd0281526004018080602001828103825283818151815260200191508051906020019080838360008381101561086f578181015183820152602001610857565b50612452612f33565b6000805473ffffffffffffffffffffffffffffffffffffffff19908116600160a060020a038d8116919091179092556001805482168c84161790556002805482168b84161790556003805482168a841617905560048054821689841617905560058054909116918716919091179055600683905560078290556124d484612662565b67ffffffffffffffff8116156124ed576124ed81612a35565b50505050505050505050565b60085468010000000000000000900460ff1681565b60095481565b600354600160a060020a031681565b60006110a97f4172f0f7d2289153072b0a6ca36959e0cbe2efc3afe50fc81636caa96338137b612817565b600060001961255b61174d565b14905090565b60085467ffffffffffffffff1681565b60055474010000000000000000000000000000000000000000900467ffffffffffffffff1681565b600054600160a060020a031681565b6040805160008082526020820190925260008051602061332c833981519152916125d69133918491906107f4565b60408051808201909152600f81526000805160206132ec833981519152602082015290151561264a5760405160e560020a62461bcd0281526004018080602001828103825283818151815260200191508051906020019080838360008381101561086f578181015183820152602001610857565b5061265b612656612ecd565b612a35565b50565b4390565b60408051808201909152601881527f50524553414c455f54494d455f504552494f445f5a45524f00000000000000006020820152600067ffffffffffffffff8316116126f35760405160e560020a62461bcd0281526004018080602001828103825283818151815260200191508051906020019080838360008381101561086f578181015183820152602001610857565b5060085467ffffffffffffffff16158061273d5750612710612ecd565b60085467ffffffffffffffff9182169161273191168363ffffffff612ffb16565b67ffffffffffffffff16115b60408051808201909152601b81527f50524553414c455f494e56414c49445f54494d455f504552494f44000000000060208201529015156127c35760405160e560020a62461bcd0281526004018080602001828103825283818151815260200191508051906020019080838360008381101561086f578181015183820152602001610857565b506005805467ffffffffffffffff90921674010000000000000000000000000000000000000000027fffffffff0000000000000000ffffffffffffffffffffffffffffffffffffffff909216919091179055565b5490565b9055565b60008083151561283257600091506128cf565b5082820282848281151561284257fe5b60408051808201909152601181527f4d4154485f4d554c5f4f564552464c4f57000000000000000000000000000000602082015292919004146128ca5760405160e560020a62461bcd0281526004018080602001828103825283818151815260200191508051906020019080838360008381101561086f578181015183820152602001610857565b508091505b5092915050565b600160a060020a03831630141561298d57612901600160a060020a038516838363ffffffff612e3816565b60408051808201909152601f81527f50524553414c455f544f4b454e5f5452414e534645525f52455645525445440060208201529015156129875760405160e560020a62461bcd0281526004018080602001828103825283818151815260200191508051906020019080838360008381101561086f578181015183820152602001610857565b50610f7b565b6129a8600160a060020a03851684848463ffffffff61309616565b60408051808201909152601f81527f50524553414c455f544f4b454e5f5452414e534645525f5245564552544544006020820152901515612a2e5760405160e560020a62461bcd0281526004018080602001828103825283818151815260200191508051906020019080838360008381101561086f578181015183820152602001610857565b5050505050565b6000612a3f611e72565b6003811115612a4a57fe5b60408051808201909152601581527f50524553414c455f494e56414c49445f5354415445000000000000000000000060208201529114612acf5760405160e560020a62461bcd0281526004018080602001828103825283818151815260200191508051906020019080838360008381101561086f578181015183820152602001610857565b50612ad8612ecd565b60408051808201909152601981527f50524553414c455f494e56414c49445f4f50454e5f444154450000000000000060208201529067ffffffffffffffff9081169083161015612b6d5760405160e560020a62461bcd0281526004018080602001828103825283818151815260200191508051906020019080838360008381101561086f578181015183820152602001610857565b506008805467ffffffffffffffff831667ffffffffffffffff19909116811790915560408051918252517fab2aeaceefdbd207caa02bf58306335f7c37fd3b434a6cc547733be5e33a86779181900360200190a150565b60408051808201909152601181527f4d4154485f4144445f4f564552464c4f57000000000000000000000000000000602082015260009083830190848210156128ca5760405160e560020a62461bcd0281526004018080602001828103825283818151815260200191508051906020019080838360008381101561086f578181015183820152602001610857565b5490565b60408051808201909152600d81527f4d4154485f4449565f5a45524f0000000000000000000000000000000000000060208201526000908190818411612ce15760405160e560020a62461bcd0281526004018080602001828103825283818151815260200191508051906020019080838360008381101561086f578181015183820152602001610857565b508284811515612ced57fe5b04949350505050565b600080600160a060020a0383161515612d125760009150612d1d565b823b90506000811191505b50919050565b60408051600160a060020a0383166024808301919091528251808303909101815260449091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f70a08231000000000000000000000000000000000000000000000000000000001790526000908180612da3868461312a565b60408051808201909152601c81527f534146455f4552435f32305f42414c414e43455f52455645525445440000000060208201529193509150821515612e2e5760405160e560020a62461bcd0281526004018080602001828103825283818151815260200191508051906020019080838360008381101561086f578181015183820152602001610857565b5095945050505050565b60408051600160a060020a038416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb00000000000000000000000000000000000000000000000000000000179052600090612eba858261315b565b95945050505050565b8051602002815290565b60006110a9612eda6131a9565b6131ad565b60085460009067ffffffffffffffff161515612efd5750600061092e565b600854612f2c9067ffffffffffffffff16612f16612ecd565b67ffffffffffffffff169063ffffffff61324616565b905061092e565b612f3b61174d565b60408051808201909152601881527f494e49545f414c52454144595f494e495449414c495a4544000000000000000060208201529015612fc05760405160e560020a62461bcd0281526004018080602001828103825283818151815260200191508051906020019080838360008381101561086f578181015183820152602001610857565b50612ff9612fcc61265e565b7febb05b386a8d34882b8711d156f463690983dc47815980fb82aeeff1aa43579e9063ffffffff61281b16565b565b60408051808201909152601381527f4d41544836345f4144445f4f564552464c4f570000000000000000000000000060208201526000908383019067ffffffffffffffff80861690831610156128ca5760405160e560020a62461bcd0281526004018080602001828103825283818151815260200191508051906020019080838360008381101561086f578181015183820152602001610857565b60408051600160a060020a0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd00000000000000000000000000000000000000000000000000000000179052600090613120868261315b565b9695505050505050565b6000806000806040516020818751602089018a5afa9250600083111561314f57805191505b50909590945092505050565b6000806040516020818551602087016000895af1600081111561319f573d801561318c57602081146131955761319d565b6001935061319d565b600183511493505b505b5090949350505050565b4290565b60408051808201909152601581527f55494e5436345f4e554d4245525f544f4f5f4249470000000000000000000000602082015260009067ffffffffffffffff83111561323f5760405160e560020a62461bcd0281526004018080602001828103825283818151815260200191508051906020019080838360008381101561086f578181015183820152602001610857565b5090919050565b60408051808201909152601481527f4d41544836345f5355425f554e444552464c4f570000000000000000000000006020820152600090819067ffffffffffffffff80861690851611156132df5760405160e560020a62461bcd0281526004018080602001828103825283818151815260200191508051906020019080838360008381101561086f578181015183820152602001610857565b505050900390565b905556004150505f415554485f4641494c4544000000000000000000000000000000000050524553414c455f434f4e54524143545f49535f454f41000000000000000000efa06053e2ca99a43c97c4a4f3d8a394ee3323a8ff237e625fba09fe30ceb0a4e855346402235fdd185c890e68d2c4ecad599b88587635ee285bce2fda58dacb494e49545f4e4f545f494e495449414c495a4544000000000000000000000000a165627a7a723058202eada31ef4f55302653ce6bc8c2fee8c6ed798f010fb6a95767a093af4b9272a0029ebb05b386a8d34882b8711d156f463690983dc47815980fb82aeeff1aa43579e",
  "deployedBytecode": "0x6080604052600436106101be5763ffffffff60e060020a6000350416630803fac081146101c35780630d720bbc146101ec5780631f21f9af146102135780632914b9bd146102445780632a709b141461029d578063309cb5ea146102b257806332f0a3b5146102d657806338af3eed146102eb5780633ba0b9a914610300578063410085df1461031557806343d726d6146103395780634a15fd931461034e5780634bedf9a814610370578063542ba298146103855780636a928e8f1461039a5780637af2b8a0146103af5780637e7db6e1146103c457806380afdea8146103e55780638418cd99146103fa5780638b3dd749146104115780639106d7ba1461042657806396330f461461043b5780639d4941d814610453578063a1658fad14610474578063a2b96b6f146104db578063a479e508146104f0578063b086d74014610505578063c19d93fb14610527578063c226793b14610560578063c2b6b58c146105bc578063c5c4744c146105d1578063cd3293de146105e6578063d4aae0c4146105fb578063de4796ed14610610578063ec8cb28114610625578063ef78d4fd14610657578063f77c47911461066c578063fcfff16f14610681575b600080fd5b3480156101cf57600080fd5b506101d8610696565b604080519115158252519081900360200190f35b3480156101f857600080fd5b506102016106bf565b60408051918252519081900360200190f35b34801561021f57600080fd5b506102286106c6565b60408051600160a060020a039092168252519081900360200190f35b34801561025057600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526102289436949293602493928401919081908401838280828437509497506106d59650505050505050565b3480156102a957600080fd5b506102286107bb565b3480156102be57600080fd5b506102d467ffffffffffffffff600435166107ca565b005b3480156102e257600080fd5b506102286108b8565b3480156102f757600080fd5b50610228610931565b34801561030c57600080fd5b50610201610940565b34801561032157600080fd5b506102d4600160a060020a0360043516602435610946565b34801561034557600080fd5b506102d4610a40565b34801561035a57600080fd5b506102d467ffffffffffffffff60043516610f81565b34801561037c57600080fd5b5061022861102d565b34801561039157600080fd5b5061020161103c565b3480156103a657600080fd5b50610201611042565b3480156103bb57600080fd5b50610201611054565b3480156103d057600080fd5b506101d8600160a060020a0360043516611078565b3480156103f157600080fd5b5061020161107e565b6102d4600160a060020a03600435166024356110ae565b34801561041d57600080fd5b5061020161174d565b34801561043257600080fd5b50610201611778565b34801561044757600080fd5b5061020160043561177e565b34801561045f57600080fd5b506102d4600160a060020a036004351661182b565b34801561048057600080fd5b5060408051602060046044358181013583810280860185019096528085526101d8958335600160a060020a0316956024803596369695606495939492019291829185019084908082843750949750611aba9650505050505050565b3480156104e757600080fd5b50610201611c0a565b3480156104fc57600080fd5b50610228611c2e565b34801561051157600080fd5b506102d467ffffffffffffffff60043516611ce3565b34801561053357600080fd5b5061053c611e72565b6040518082600381111561054c57fe5b60ff16815260200191505060405180910390f35b34801561056c57600080fd5b506102d4600160a060020a0360043581169060243581169060443581169060643581169060843581169060a4351667ffffffffffffffff60c43581169060e4359061010435906101243516611f90565b3480156105c857600080fd5b506101d86124f9565b3480156105dd57600080fd5b5061020161250e565b3480156105f257600080fd5b50610228612514565b34801561060757600080fd5b50610228612523565b34801561061c57600080fd5b506101d861254e565b34801561063157600080fd5b5061063a612561565b6040805167ffffffffffffffff9092168252519081900360200190f35b34801561066357600080fd5b5061063a612571565b34801561067857600080fd5b50610228612599565b34801561068d57600080fd5b506102d46125a8565b6000806106a161174d565b905080158015906106b95750806106b661265e565b10155b91505090565b620f424081565b600154600160a060020a031681565b60006106df611c2e565b600160a060020a03166304bf2a7f836040518263ffffffff1660e060020a0281526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561073d578181015183820152602001610725565b50505050905090810190601f16801561076a5780820380516001836020036101000a031916815260200191505b5092505050602060405180830381600087803b15801561078957600080fd5b505af115801561079d573d6000803e3d6000fd5b505050506040513d60208110156107b357600080fd5b505192915050565b600254600160a060020a031681565b6040805160008082526020820190925260008051602061332c833981519152916107fa9133918491905b50611aba565b60408051808201909152600f81526000805160206132ec83398151915260208201529015156108aa5760405160e560020a62461bcd0281526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561086f578181015183820152602001610857565b50505050905090810190601f16801561089c5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b506108b482612662565b5050565b60006108c2612523565b600160a060020a03166332f0a3b56040518163ffffffff1660e060020a028152600401602060405180830381600087803b1580156108ff57600080fd5b505af1158015610913573d6000803e3d6000fd5b505050506040513d602081101561092957600080fd5b505190505b90565b600454600160a060020a031681565b60065481565b61094e610696565b604080518082019091526014815260008051602061336c83398151915260208201529015156109c25760405160e560020a62461bcd0281526004018080602001828103825283818151815260200191508051906020019080838360008381101561086f578181015183820152602001610857565b50604080518082018252601281527f50524553414c455f4e4f5f524546554e445300000000000000000000000000006020808301918252925160e560020a62461bcd0281526004810193845282516024820152825192939283926044909201919080838360008381101561086f578181015183820152602001610857565b6000808080610a5c60008051602061334c833981519152612817565b60408051808201909152601981527f5245454e5452414e43595f5245454e5452414e545f43414c4c0000000000000060208201529015610ae15760405160e560020a62461bcd0281526004018080602001828103825283818151815260200191508051906020019080838360008381101561086f578181015183820152602001610857565b50610b0160008051602061334c833981519152600163ffffffff61281b16565b610b09610696565b604080518082019091526014815260008051602061336c8339815191526020820152901515610b7d5760405160e560020a62461bcd0281526004018080602001828103825283818151815260200191508051906020019080838360008381101561086f578181015183820152602001610857565b506002610b88611e72565b6003811115610b9357fe5b60408051808201909152601581527f50524553414c455f494e56414c49445f5354415445000000000000000000000060208201529114610c185760405160e560020a62461bcd0281526004018080602001828103825283818151815260200191508051906020019080838360008381101561086f578181015183820152602001610857565b506008805468ff000000000000000019166801000000000000000017905560075460001015610cfc57600754620f424003610c60600754600a5461281f90919063ffffffff16565b811515610c6957fe5b60025460048054604080517f40c10f19000000000000000000000000000000000000000000000000000000008152600160a060020a0392831693810193909352949093046024820181905293519397509116916340c10f199160448082019260009290919082900301818387803b158015610ce357600080fd5b505af1158015610cf7573d6000803e3d6000fd5b505050505b600154600554604080517ff190e427000000000000000000000000000000000000000000000000000000008152600160a060020a0392831660048201529051919092169163f190e4279160248083019260a09291908290030181600087803b158015610d6757600080fd5b505af1158015610d7b573d6000803e3d6000fd5b505050506040513d60a0811015610d9157600080fd5b5060600151600754600954919450620f424091610dd79163ffffffff8088169291850391610dc191869061281f16565b811515610dca57fe5b049063ffffffff61281f16565b811515610de057fe5b600554600354929091049350610e0591600160a060020a0391821691309116856128d6565b600554604080517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529051600160a060020a03909216916370a08231916024808201926020929091908290030181600087803b158015610e6b57600080fd5b505af1158015610e7f573d6000803e3d6000fd5b505050506040513d6020811015610e9557600080fd5b505190506000811115610ec157600554600454610ec191600160a060020a0390811691309116846128d6565b60008054604080517fc9567bf90000000000000000000000000000000000000000000000000000000081529051600160a060020a039092169263c9567bf99260048084019382900301818387803b158015610f1b57600080fd5b505af1158015610f2f573d6000803e3d6000fd5b50506040517fc35789ccff76271dc0efa6bfde2f4d4a32cd48dd86278f75f8648cb068c86e3b925060009150a1610f7b60008051602061334c833981519152600063ffffffff61281b16565b50505050565b6040805160008082526020820190925260008051602061332c83398151915291610faf9133918491906107f4565b60408051808201909152600f81526000805160206132ec83398151915260208201529015156110235760405160e560020a62461bcd0281526004018080602001828103825283818151815260200191508051906020019080838360008381101561086f578181015183820152602001610857565b506108b482612a35565b600554600160a060020a031690565b60075481565b60008051602061332c83398151915281565b7f2738f3f227143b7fbb9720e93e2e5b36d7a15966e130b49f1582c6432d949aa981565b50600190565b60006110a97fd625496217aa6a3453eecb9c3489dc5a53e6c67b444329ea2b2cbc9ff547639b612817565b905090565b60006110c760008051602061334c833981519152612817565b60408051808201909152601981527f5245454e5452414e43595f5245454e5452414e545f43414c4c000000000000006020820152901561114c5760405160e560020a62461bcd0281526004018080602001828103825283818151815260200191508051906020019080838360008381101561086f578181015183820152602001610857565b5061116c60008051602061334c833981519152600163ffffffff61281b16565b604080516000808252602082019092527f9ccaca4edf2127f20c425fdd86af1ba178b9e5bee280cd70d88ac5f6874c4f07916111ac9133918491906107f4565b60408051808201909152600f81526000805160206132ec83398151915260208201529015156112205760405160e560020a62461bcd0281526004018080602001828103825283818151815260200191508051906020019080838360008381101561086f578181015183820152602001610857565b50600161122b611e72565b600381111561123657fe5b60408051808201909152601581527f50524553414c455f494e56414c49445f53544154450000000000000000000000602082015291146112bb5760405160e560020a62461bcd0281526004018080602001828103825283818151815260200191508051906020019080838360008381101561086f578181015183820152602001610857565b506040805180820190915260208082527f50524553414c455f494e56414c49445f434f4e545249425554455f56414c55459082015234156113415760405160e560020a62461bcd0281526004018080602001828103825283818151815260200191508051906020019080838360008381101561086f578181015183820152602001610857565b506040805180820190915260208082527f50524553414c455f494e56414c49445f434f4e545249425554455f56414c554590820152600084116113c95760405160e560020a62461bcd0281526004018080602001828103825283818151815260200191508051906020019080838360008381101561086f578181015183820152602001610857565b50600554604080517f70a08231000000000000000000000000000000000000000000000000000000008152600160a060020a0387811660048301529151869392909216916370a08231916024808201926020929091908290030181600087803b15801561143557600080fd5b505af1158015611449573d6000803e3d6000fd5b505050506040513d602081101561145f57600080fd5b505160408051808201909152601c81527f50524553414c455f494e53554646494349454e545f42414c414e43450000000060208201529111156114e75760405160e560020a62461bcd0281526004018080602001828103825283818151815260200191508051906020019080838360008381101561086f578181015183820152602001610857565b50600554604080517fdd62ed3e000000000000000000000000000000000000000000000000000000008152600160a060020a03878116600483015230602483015291518693929092169163dd62ed3e916044808201926020929091908290030181600087803b15801561155957600080fd5b505af115801561156d573d6000803e3d6000fd5b505050506040513d602081101561158357600080fd5b505160408051808201909152601e81527f50524553414c455f494e53554646494349454e545f414c4c4f57414e43450000602082015291111561160b5760405160e560020a62461bcd0281526004018080602001828103825283818151815260200191508051906020019080838360008381101561086f578181015183820152602001610857565b5060055461162490600160a060020a03168530866128d6565b61162d8361177e565b600954909250611643908463ffffffff612bc416565b600955600a54611659908363ffffffff612bc416565b600a55600254604080517f40c10f19000000000000000000000000000000000000000000000000000000008152600160a060020a03878116600483015260248201869052915191909216916340c10f1991604480830192600092919082900301818387803b1580156116ca57600080fd5b505af11580156116de573d6000803e3d6000fd5b505060408051868152602081018690528151600160a060020a03891694507fc9ec9df36a160cd05ae36393dca23c0128234fc68a48baec833a6d8b5967d6da93509081900390910190a25061174860008051602061334c833981519152600063ffffffff61281b16565b505050565b60006110a97febb05b386a8d34882b8711d156f463690983dc47815980fb82aeeff1aa43579e612817565b600a5481565b6000611788610696565b604080518082019091526014815260008051602061336c83398151915260208201529015156117fc5760405160e560020a62461bcd0281526004018080602001828103825283818151815260200191508051906020019080838360008381101561086f578181015183820152602001610857565b50611825620f42406118196006548561281f90919063ffffffff16565b9063ffffffff612c5616565b92915050565b600080600061183984611078565b60408051808201909152601281527f5245434f5645525f444953414c4c4f574544000000000000000000000000000060208201529015156118bf5760405160e560020a62461bcd0281526004018080602001828103825283818151815260200191508051906020019080838360008381101561086f578181015183820152602001610857565b506118c86108b8565b92506118d383612cf6565b60408051808201909152601a81527f5245434f5645525f5641554c545f4e4f545f434f4e545241435400000000000060208201529015156119595760405160e560020a62461bcd0281526004018080602001828103825283818151815260200191508051906020019080838360008381101561086f578181015183820152602001610857565b50600160a060020a03841615156119aa5760405130319250600160a060020a0384169083156108fc029084906000818181858888f193505050501580156119a4573d6000803e3d6000fd5b50611a69565b50826119c5600160a060020a0382163063ffffffff612d2316565b91506119e1600160a060020a038216848463ffffffff612e3816565b60408051808201909152601d81527f5245434f5645525f544f4b454e5f5452414e534645525f4641494c45440000006020820152901515611a675760405160e560020a62461bcd0281526004018080602001828103825283818151815260200191508051906020019080838360008381101561086f578181015183820152602001610857565b505b83600160a060020a031683600160a060020a03167f596caf56044b55fb8c4ca640089bbc2b63cae3e978b851f5745cbb7c5b288e02846040518082815260200191505060405180910390a350505050565b600080611ac5610696565b1515611ad45760009150611c02565b611adc612523565b9050600160a060020a0381161515611af75760009150611c02565b80600160a060020a031663fdef9106863087611b1288612ec3565b60405160e060020a63ffffffff8716028152600160a060020a03808616600483019081529085166024830152604482018490526080606483019081528351608484015283519192909160a490910190602085019080838360005b83811015611b84578181015183820152602001611b6c565b50505050905090810190601f168015611bb15780820380516001836020036101000a031916815260200191505b5095505050505050602060405180830381600087803b158015611bd357600080fd5b505af1158015611be7573d6000803e3d6000fd5b505050506040513d6020811015611bfd57600080fd5b505191505b509392505050565b7f9ccaca4edf2127f20c425fdd86af1ba178b9e5bee280cd70d88ac5f6874c4f0781565b600080611c39612523565b604080517fbe00bbd80000000000000000000000000000000000000000000000000000000081527fd6f028ca0e8edb4a8c9757ca4fdccab25fa1e0317da1188108f7d2dee14902fb60048201527fddbcfd564f642ab5627cf68b9b7d374fb4f8a36e941a75d89c87998cef03bd6160248201529051600160a060020a03929092169163be00bbd8916044808201926020929091908290030181600087803b15801561078957600080fd5b604080516000808252602082019092527f2738f3f227143b7fbb9720e93e2e5b36d7a15966e130b49f1582c6432d949aa991611d239133918491906107f4565b60408051808201909152600f81526000805160206132ec8339815191526020820152901515611d975760405160e560020a62461bcd0281526004018080602001828103825283818151815260200191508051906020019080838360008381101561086f578181015183820152602001610857565b5060075460408051808201909152601381527f50524553414c455f494e56414c49445f5043540000000000000000000000000060208201529067ffffffffffffffff841610611e2b5760405160e560020a62461bcd0281526004018080602001828103825283818151815260200191508051906020019080838360008381101561086f578181015183820152602001610857565b5067ffffffffffffffff8216600781905560408051918252517fa50304e35b9add7e0d49e0d23f05a2a2935cfa28fdc3abe3636318af4bed22459181900360200190a15050565b6000611e7c610696565b604080518082019091526014815260008051602061336c8339815191526020820152901515611ef05760405160e560020a62461bcd0281526004018080602001828103825283818151815260200191508051906020019080838360008381101561086f578181015183820152602001610857565b5060085467ffffffffffffffff161580611f205750611f0d612ecd565b60085467ffffffffffffffff9182169116115b15611f2d5750600061092e565b60085468010000000000000000900460ff1615611f4c5750600361092e565b60055474010000000000000000000000000000000000000000900467ffffffffffffffff16611f79612edf565b67ffffffffffffffff16106110785750600261092e565b611f9861174d565b60408051808201909152601881527f494e49545f414c52454144595f494e495449414c495a454400000000000000006020820152901561201d5760405160e560020a62461bcd0281526004018080602001828103825283818151815260200191508051906020019080838360008381101561086f578181015183820152602001610857565b506120278a612cf6565b604080518082019091526017815260008051602061330c833981519152602082015290151561209b5760405160e560020a62461bcd0281526004018080602001828103825283818151815260200191508051906020019080838360008381101561086f578181015183820152602001610857565b506120a589612cf6565b604080518082019091526017815260008051602061330c83398151915260208201529015156121195760405160e560020a62461bcd0281526004018080602001828103825283818151815260200191508051906020019080838360008381101561086f578181015183820152602001610857565b5061212388612cf6565b604080518082019091526017815260008051602061330c83398151915260208201529015156121975760405160e560020a62461bcd0281526004018080602001828103825283818151815260200191508051906020019080838360008381101561086f578181015183820152602001610857565b506121a187612cf6565b604080518082019091526017815260008051602061330c83398151915260208201529015156122155760405160e560020a62461bcd0281526004018080602001828103825283818151815260200191508051906020019080838360008381101561086f578181015183820152602001610857565b5060408051808201909152601b81527f50524553414c455f494e56414c49445f42454e454649434941525900000000006020820152600160a060020a03871615156122a55760405160e560020a62461bcd0281526004018080602001828103825283818151815260200191508051906020019080838360008381101561086f578181015183820152602001610857565b506122af85612cf6565b6040805190810160405280602081526020017f50524553414c455f494e56414c49445f434f4e545249425554455f544f4b454e8152509015156123375760405160e560020a62461bcd0281526004018080602001828103825283818151815260200191508051906020019080838360008381101561086f578181015183820152602001610857565b5060408051808201909152601d81527f50524553414c455f494e56414c49445f45584348414e47455f524154450000006020820152600084116123bf5760405160e560020a62461bcd0281526004018080602001828103825283818151815260200191508051906020019080838360008381101561086f578181015183820152602001610857565b5060408051808201909152601381527f50524553414c455f494e56414c49445f504354000000000000000000000000006020820152620f424083106124495760405160e560020a62461bcd0281526004018080602001828103825283818151815260200191508051906020019080838360008381101561086f578181015183820152602001610857565b50612452612f33565b6000805473ffffffffffffffffffffffffffffffffffffffff19908116600160a060020a038d8116919091179092556001805482168c84161790556002805482168b84161790556003805482168a841617905560048054821689841617905560058054909116918716919091179055600683905560078290556124d484612662565b67ffffffffffffffff8116156124ed576124ed81612a35565b50505050505050505050565b60085468010000000000000000900460ff1681565b60095481565b600354600160a060020a031681565b60006110a97f4172f0f7d2289153072b0a6ca36959e0cbe2efc3afe50fc81636caa96338137b612817565b600060001961255b61174d565b14905090565b60085467ffffffffffffffff1681565b60055474010000000000000000000000000000000000000000900467ffffffffffffffff1681565b600054600160a060020a031681565b6040805160008082526020820190925260008051602061332c833981519152916125d69133918491906107f4565b60408051808201909152600f81526000805160206132ec833981519152602082015290151561264a5760405160e560020a62461bcd0281526004018080602001828103825283818151815260200191508051906020019080838360008381101561086f578181015183820152602001610857565b5061265b612656612ecd565b612a35565b50565b4390565b60408051808201909152601881527f50524553414c455f54494d455f504552494f445f5a45524f00000000000000006020820152600067ffffffffffffffff8316116126f35760405160e560020a62461bcd0281526004018080602001828103825283818151815260200191508051906020019080838360008381101561086f578181015183820152602001610857565b5060085467ffffffffffffffff16158061273d5750612710612ecd565b60085467ffffffffffffffff9182169161273191168363ffffffff612ffb16565b67ffffffffffffffff16115b60408051808201909152601b81527f50524553414c455f494e56414c49445f54494d455f504552494f44000000000060208201529015156127c35760405160e560020a62461bcd0281526004018080602001828103825283818151815260200191508051906020019080838360008381101561086f578181015183820152602001610857565b506005805467ffffffffffffffff90921674010000000000000000000000000000000000000000027fffffffff0000000000000000ffffffffffffffffffffffffffffffffffffffff909216919091179055565b5490565b9055565b60008083151561283257600091506128cf565b5082820282848281151561284257fe5b60408051808201909152601181527f4d4154485f4d554c5f4f564552464c4f57000000000000000000000000000000602082015292919004146128ca5760405160e560020a62461bcd0281526004018080602001828103825283818151815260200191508051906020019080838360008381101561086f578181015183820152602001610857565b508091505b5092915050565b600160a060020a03831630141561298d57612901600160a060020a038516838363ffffffff612e3816565b60408051808201909152601f81527f50524553414c455f544f4b454e5f5452414e534645525f52455645525445440060208201529015156129875760405160e560020a62461bcd0281526004018080602001828103825283818151815260200191508051906020019080838360008381101561086f578181015183820152602001610857565b50610f7b565b6129a8600160a060020a03851684848463ffffffff61309616565b60408051808201909152601f81527f50524553414c455f544f4b454e5f5452414e534645525f5245564552544544006020820152901515612a2e5760405160e560020a62461bcd0281526004018080602001828103825283818151815260200191508051906020019080838360008381101561086f578181015183820152602001610857565b5050505050565b6000612a3f611e72565b6003811115612a4a57fe5b60408051808201909152601581527f50524553414c455f494e56414c49445f5354415445000000000000000000000060208201529114612acf5760405160e560020a62461bcd0281526004018080602001828103825283818151815260200191508051906020019080838360008381101561086f578181015183820152602001610857565b50612ad8612ecd565b60408051808201909152601981527f50524553414c455f494e56414c49445f4f50454e5f444154450000000000000060208201529067ffffffffffffffff9081169083161015612b6d5760405160e560020a62461bcd0281526004018080602001828103825283818151815260200191508051906020019080838360008381101561086f578181015183820152602001610857565b506008805467ffffffffffffffff831667ffffffffffffffff19909116811790915560408051918252517fab2aeaceefdbd207caa02bf58306335f7c37fd3b434a6cc547733be5e33a86779181900360200190a150565b60408051808201909152601181527f4d4154485f4144445f4f564552464c4f57000000000000000000000000000000602082015260009083830190848210156128ca5760405160e560020a62461bcd0281526004018080602001828103825283818151815260200191508051906020019080838360008381101561086f578181015183820152602001610857565b5490565b60408051808201909152600d81527f4d4154485f4449565f5a45524f0000000000000000000000000000000000000060208201526000908190818411612ce15760405160e560020a62461bcd0281526004018080602001828103825283818151815260200191508051906020019080838360008381101561086f578181015183820152602001610857565b508284811515612ced57fe5b04949350505050565b600080600160a060020a0383161515612d125760009150612d1d565b823b90506000811191505b50919050565b60408051600160a060020a0383166024808301919091528251808303909101815260449091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f70a08231000000000000000000000000000000000000000000000000000000001790526000908180612da3868461312a565b60408051808201909152601c81527f534146455f4552435f32305f42414c414e43455f52455645525445440000000060208201529193509150821515612e2e5760405160e560020a62461bcd0281526004018080602001828103825283818151815260200191508051906020019080838360008381101561086f578181015183820152602001610857565b5095945050505050565b60408051600160a060020a038416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb00000000000000000000000000000000000000000000000000000000179052600090612eba858261315b565b95945050505050565b8051602002815290565b60006110a9612eda6131a9565b6131ad565b60085460009067ffffffffffffffff161515612efd5750600061092e565b600854612f2c9067ffffffffffffffff16612f16612ecd565b67ffffffffffffffff169063ffffffff61324616565b905061092e565b612f3b61174d565b60408051808201909152601881527f494e49545f414c52454144595f494e495449414c495a4544000000000000000060208201529015612fc05760405160e560020a62461bcd0281526004018080602001828103825283818151815260200191508051906020019080838360008381101561086f578181015183820152602001610857565b50612ff9612fcc61265e565b7febb05b386a8d34882b8711d156f463690983dc47815980fb82aeeff1aa43579e9063ffffffff61281b16565b565b60408051808201909152601381527f4d41544836345f4144445f4f564552464c4f570000000000000000000000000060208201526000908383019067ffffffffffffffff80861690831610156128ca5760405160e560020a62461bcd0281526004018080602001828103825283818151815260200191508051906020019080838360008381101561086f578181015183820152602001610857565b60408051600160a060020a0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd00000000000000000000000000000000000000000000000000000000179052600090613120868261315b565b9695505050505050565b6000806000806040516020818751602089018a5afa9250600083111561314f57805191505b50909590945092505050565b6000806040516020818551602087016000895af1600081111561319f573d801561318c57602081146131955761319d565b6001935061319d565b600183511493505b505b5090949350505050565b4290565b60408051808201909152601581527f55494e5436345f4e554d4245525f544f4f5f4249470000000000000000000000602082015260009067ffffffffffffffff83111561323f5760405160e560020a62461bcd0281526004018080602001828103825283818151815260200191508051906020019080838360008381101561086f578181015183820152602001610857565b5090919050565b60408051808201909152601481527f4d41544836345f5355425f554e444552464c4f570000000000000000000000006020820152600090819067ffffffffffffffff80861690851611156132df5760405160e560020a62461bcd0281526004018080602001828103825283818151815260200191508051906020019080838360008381101561086f578181015183820152602001610857565b505050900390565b905556004150505f415554485f4641494c4544000000000000000000000000000000000050524553414c455f434f4e54524143545f49535f454f41000000000000000000efa06053e2ca99a43c97c4a4f3d8a394ee3323a8ff237e625fba09fe30ceb0a4e855346402235fdd185c890e68d2c4ecad599b88587635ee285bce2fda58dacb494e49545f4e4f545f494e495449414c495a4544000000000000000000000000a165627a7a723058202eada31ef4f55302653ce6bc8c2fee8c6ed798f010fb6a95767a093af4b9272a0029",
  "devdoc": {
    "methods": {
      "allowRecoverability(address)": {
        "details": "By default deriving from AragonApp makes it recoverable",
        "params": {
          "token": "Token address that would be recovered"
        },
        "return": "bool whether the app allows the recovery"
      },
      "canPerform(address,bytes32,uint256[])": {
        "details": "Check whether an action can be performed by a sender for a particular role on this app",
        "params": {
          "_params": "Permission params for the role",
          "_role": "Role on this app",
          "_sender": "Sender of the call"
        },
        "return": "Boolean indicating whether the sender has the permissions to perform the action.        Always returns false if the app hasn't been initialized yet."
      },
      "contribute(address,uint256)": {
        "params": {
          "_contributor": "The address of the contributor",
          "_value": "The amount of contribution token to be spent"
        }
      },
      "contributionToTokens(uint256)": {
        "params": {
          "_value": "The amount of contribution tokens to be used in that computation"
        }
      },
      "getInitializationBlock()": {
        "return": "Block number in which the contract was initialized"
      },
      "getRecoveryVault()": {
        "details": "Get the recovery vault for the app",
        "return": "Recovery vault address for the app"
      },
      "hasInitialized()": {
        "return": "Whether the contract has been initialized by the time of the current block"
      },
      "initialize(address,address,address,address,address,address,uint64,uint256,uint256,uint64)": {
        "params": {
          "_beneficiary": "The address of the beneficiary [to whom a percentage of the raised funds is be to be sent]",
          "_controller": "The address of the controller contract",
          "_erc20ContribToken": "The address of the token to be used to contribute",
          "_exchangeRate": "The exchangeRate [= 1/price] at which [bonded] tokens are to be purchased for that presale [in PPM]",
          "_marketMaker": "The address of the market maker contract",
          "_openDate": "The date upon which that presale is to be open [ignored if 0]",
          "_period": "The period within which to accept contribution for that presale",
          "_reserve": "The address of the reserve [pool] contract",
          "_tokenManager": "The address of the [bonded] token manager contract"
        }
      },
      "reduceBeneficiaryPct(uint64)": {
        "params": {
          "_pct": "New percentage to be set"
        }
      },
      "setOpenDate(uint64)": {
        "params": {
          "_date": "New date to be set"
        }
      },
      "setPeriod(uint64)": {
        "params": {
          "_period": "New duration to be set"
        }
      },
      "transferToVault(address)": {
        "params": {
          "_token": "Token balance to be sent to recovery vault."
        }
      }
    }
  },
  "userdoc": {
    "methods": {
      "close()": {
        "notice": "Close presale and open trading"
      },
      "contribute(address,uint256)": {
        "notice": "Contribute to the presale up to `@tokenAmount(self.erc20ContribToken(): address, _value)`"
      },
      "contributionToTokens(uint256)": {
        "notice": "Computes the amount of [bonded] tokens that would be purchased for `@tokenAmount(self.contributionToken(): address, _value)`"
      },
      "initialize(address,address,address,address,address,address,uint64,uint256,uint256,uint64)": {
        "notice": "Initialize presale"
      },
      "open()": {
        "notice": "Open presale [enabling users to contribute]"
      },
      "reduceBeneficiaryPct(uint64)": {
        "notice": "Reduce pre-minting for beneficiary percentage to `_pct`"
      },
      "refund(address,uint256)": {
        "notice": "Does nothing. Interface compliance."
      },
      "setOpenDate(uint64)": {
        "notice": "Set presale open date"
      },
      "setPeriod(uint64)": {
        "notice": "Set presale duration"
      },
      "state()": {
        "notice": "Returns the current state of that presale"
      },
      "transferToVault(address)": {
        "notice": "Send funds to recovery Vault. This contract should never receive funds,        but in case it does, this function allows one to recover them."
      }
    }
  }
}
