{
  "language": "Solidity",
  "sources": {
    "contracts/FixedRateConverter.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface IMynt {\n    function burn(address _account, uint256 _amount) external;\n}\n\n/**\n * @title FixedRateConverter\n * @dev Standalone contract for sunsetting (by converting the MYNT to SOV at a fixed rate)\n */\ncontract FixedRateConverter {\n    address public admin;\n    address public immutable myntContractAddress;\n    address public immutable sovContractAddress;\n    uint256 public immutable conversionFixedRate;\n\n    event SetAdmin(address indexed sender, address indexed oldAdmin, address indexed newAdmin);\n    event SovWithdrawn(address indexed recipient, uint256 amountWithdrawn);\n    event Convert(address indexed sender, uint256 myntSent, uint256 sovReceived);\n\n    /// @dev TODO: Check for restrictions in this contract.\n    modifier onlyAdmin() {\n        require(msg.sender == admin, \"unauthorized\");\n        _;\n    }\n\n    constructor(\n        address _myntContractAddress,\n        address _sovContractAddress,\n        uint256 _conversionFixedRate\n    ) {\n        _setAdmin(msg.sender);\n\n        myntContractAddress = _myntContractAddress;\n        sovContractAddress = _sovContractAddress;\n        conversionFixedRate = _conversionFixedRate;\n    }\n\n    /**\n     * @notice Public function to set admin account.\n     *\n     * @param _newAdmin new admin address.\n     * only admin can perform this action.\n     */\n    function setAdmin(address _newAdmin) public onlyAdmin {\n        _setAdmin(_newAdmin);\n    }\n\n    /**\n     * @dev function to convert MYNT to SOV\n     *\n     * @param _myntAmount MYNT amount that will be converted.\n     */\n    function convert(uint256 _myntAmount) external {\n        require(_myntAmount > 0, \"Error: amount must be > 0\");\n\n        uint256 senderMyntBalance = IERC20(myntContractAddress).balanceOf(msg.sender);\n        require(senderMyntBalance >= _myntAmount, \"Error: amount exceeds MYNT balance\");\n\n        uint256 totalConvertedSov = convertAmount(_myntAmount);\n\n        bool success = IERC20(myntContractAddress).transferFrom(msg.sender, address(this), _myntAmount);\n        require(success, \"MYNT Token transfer was not successful\");\n        \n        success = IERC20(sovContractAddress).transfer(msg.sender, totalConvertedSov);\n        require(success, \"SOV Token transfer was not successful\");\n\n        IMynt(myntContractAddress).burn(address(this), _myntAmount);\n\n        emit Convert(msg.sender, _myntAmount, totalConvertedSov);\n    }\n\n    /**\n     * @dev external function to calculate how many SOV will be converted with the given MYNT amount\n     *\n     * @param _myntAmount total MYNT to be converted to SOV.\n     * @return converted SOV amount.\n     */\n    function convertAmount(uint256 _myntAmount) public view returns (uint256) {\n        return (_myntAmount * conversionFixedRate) / 1e18;\n    }\n\n    /**\n     * @dev external function to calculate how many MYNT that can be converted based on the current contract's SOV Balance\n     *\n     * @return max amount of MYNT that can be converted.\n     */\n    function convertMax() external view returns (uint256) {\n        uint256 sovBalance = IERC20(sovContractAddress).balanceOf(address(this));\n        return (sovBalance * 1e18) / conversionFixedRate;\n    }\n\n    /**\n     * @dev withdraw the whole SOV balance of this contract\n     * The whole SOV will be withdrawn to the admin account.\n     * only admin can perform this action.\n     *\n     */\n    function withdrawSov() external onlyAdmin {\n        uint256 sovBalance = IERC20(sovContractAddress).balanceOf(address(this));\n        address recipient = msg.sender;\n        bool success = IERC20(sovContractAddress).transfer(recipient, sovBalance);\n        require(success, \"SOV Token transfer was not successful\");\n\n        emit SovWithdrawn(recipient, sovBalance);\n    }\n\n    function _setAdmin(address _newAdmin) internal {\n        require(_newAdmin != address(0), \"Invalid address\");\n        address oldAdmin = admin;\n        admin = _newAdmin;\n        emit SetAdmin(msg.sender, oldAdmin, admin);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates",
          "devdoc",
          "userdoc"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    },
    "libraries": {
      "": {
        "__CACHE_BREAKER__": "0x00000000d41867734bbee4c6863d9255b2b06ac1"
      }
    }
  }
}