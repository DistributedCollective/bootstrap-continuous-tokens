/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface KernelInterface extends ethers.utils.Interface {
  functions: {
    "hasInitialized()": FunctionFragment;
    "KERNEL_APP_ID()": FunctionFragment;
    "APP_ADDR_NAMESPACE()": FunctionFragment;
    "getRecoveryVault()": FunctionFragment;
    "newAppInstance(bytes32,address,bytes,bool)": FunctionFragment;
    "apps(bytes32,bytes32)": FunctionFragment;
    "initialize(address,address)": FunctionFragment;
    "CORE_NAMESPACE()": FunctionFragment;
    "allowRecoverability(address)": FunctionFragment;
    "recoveryVaultAppId()": FunctionFragment;
    "getInitializationBlock()": FunctionFragment;
    "setRecoveryVaultAppId(bytes32)": FunctionFragment;
    "APP_MANAGER_ROLE()": FunctionFragment;
    "newPinnedAppInstance(bytes32,address)": FunctionFragment;
    "transferToVault(address)": FunctionFragment;
    "setApp(bytes32,bytes32,address)": FunctionFragment;
    "getApp(bytes32,bytes32)": FunctionFragment;
    "newAppProxyPinned(address,bytes32,bytes)": FunctionFragment;
    "APP_BASES_NAMESPACE()": FunctionFragment;
    "acl()": FunctionFragment;
    "isPetrified()": FunctionFragment;
    "newAppProxy(address,bytes32)": FunctionFragment;
    "DEFAULT_ACL_APP_ID()": FunctionFragment;
    "hasPermission(address,address,bytes32,bytes)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "hasInitialized",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "KERNEL_APP_ID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "APP_ADDR_NAMESPACE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRecoveryVault",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "newAppInstance",
    values: [BytesLike, string, BytesLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "apps",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "CORE_NAMESPACE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allowRecoverability",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "recoveryVaultAppId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getInitializationBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setRecoveryVaultAppId",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "APP_MANAGER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "newPinnedAppInstance",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferToVault",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setApp",
    values: [BytesLike, BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getApp",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "newAppProxyPinned",
    values: [string, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "APP_BASES_NAMESPACE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "acl", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isPetrified",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "newAppProxy",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ACL_APP_ID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "hasPermission",
    values: [string, string, BytesLike, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "hasInitialized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "KERNEL_APP_ID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "APP_ADDR_NAMESPACE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRecoveryVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "newAppInstance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "apps", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "CORE_NAMESPACE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allowRecoverability",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recoveryVaultAppId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInitializationBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRecoveryVaultAppId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "APP_MANAGER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "newPinnedAppInstance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferToVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setApp", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getApp", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "newAppProxyPinned",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "APP_BASES_NAMESPACE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "acl", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isPetrified",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "newAppProxy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ACL_APP_ID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasPermission",
    data: BytesLike
  ): Result;

  events: {
    "NewAppProxy(address,bool,bytes32)": EventFragment;
    "RecoverToVault(address,address,uint256)": EventFragment;
    "SetApp(bytes32,bytes32,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "NewAppProxy"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RecoverToVault"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetApp"): EventFragment;
}

export class Kernel extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: KernelInterface;

  functions: {
    hasInitialized(overrides?: CallOverrides): Promise<[boolean]>;

    KERNEL_APP_ID(overrides?: CallOverrides): Promise<[string]>;

    APP_ADDR_NAMESPACE(overrides?: CallOverrides): Promise<[string]>;

    getRecoveryVault(overrides?: CallOverrides): Promise<[string]>;

    "newAppInstance(bytes32,address,bytes,bool)"(
      _appId: BytesLike,
      _appBase: string,
      _initializePayload: BytesLike,
      _setDefault: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "newAppInstance(bytes32,address)"(
      _appId: BytesLike,
      _appBase: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    apps(
      arg0: BytesLike,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    initialize(
      _baseAcl: string,
      _permissionsCreator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    CORE_NAMESPACE(overrides?: CallOverrides): Promise<[string]>;

    allowRecoverability(
      token: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    recoveryVaultAppId(overrides?: CallOverrides): Promise<[string]>;

    getInitializationBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    setRecoveryVaultAppId(
      _recoveryVaultAppId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    APP_MANAGER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    "newPinnedAppInstance(bytes32,address)"(
      _appId: BytesLike,
      _appBase: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "newPinnedAppInstance(bytes32,address,bytes,bool)"(
      _appId: BytesLike,
      _appBase: string,
      _initializePayload: BytesLike,
      _setDefault: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferToVault(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setApp(
      _namespace: BytesLike,
      _appId: BytesLike,
      _app: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getApp(
      _namespace: BytesLike,
      _appId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "newAppProxyPinned(address,bytes32,bytes)"(
      _kernel: string,
      _appId: BytesLike,
      _initializePayload: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "newAppProxyPinned(address,bytes32)"(
      _kernel: string,
      _appId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    APP_BASES_NAMESPACE(overrides?: CallOverrides): Promise<[string]>;

    acl(overrides?: CallOverrides): Promise<[string]>;

    isPetrified(overrides?: CallOverrides): Promise<[boolean]>;

    "newAppProxy(address,bytes32)"(
      _kernel: string,
      _appId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "newAppProxy(address,bytes32,bytes)"(
      _kernel: string,
      _appId: BytesLike,
      _initializePayload: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    DEFAULT_ACL_APP_ID(overrides?: CallOverrides): Promise<[string]>;

    hasPermission(
      _who: string,
      _where: string,
      _what: BytesLike,
      _how: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  hasInitialized(overrides?: CallOverrides): Promise<boolean>;

  KERNEL_APP_ID(overrides?: CallOverrides): Promise<string>;

  APP_ADDR_NAMESPACE(overrides?: CallOverrides): Promise<string>;

  getRecoveryVault(overrides?: CallOverrides): Promise<string>;

  "newAppInstance(bytes32,address,bytes,bool)"(
    _appId: BytesLike,
    _appBase: string,
    _initializePayload: BytesLike,
    _setDefault: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "newAppInstance(bytes32,address)"(
    _appId: BytesLike,
    _appBase: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  apps(
    arg0: BytesLike,
    arg1: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  initialize(
    _baseAcl: string,
    _permissionsCreator: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  CORE_NAMESPACE(overrides?: CallOverrides): Promise<string>;

  allowRecoverability(
    token: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  recoveryVaultAppId(overrides?: CallOverrides): Promise<string>;

  getInitializationBlock(overrides?: CallOverrides): Promise<BigNumber>;

  setRecoveryVaultAppId(
    _recoveryVaultAppId: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  APP_MANAGER_ROLE(overrides?: CallOverrides): Promise<string>;

  "newPinnedAppInstance(bytes32,address)"(
    _appId: BytesLike,
    _appBase: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "newPinnedAppInstance(bytes32,address,bytes,bool)"(
    _appId: BytesLike,
    _appBase: string,
    _initializePayload: BytesLike,
    _setDefault: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferToVault(
    _token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setApp(
    _namespace: BytesLike,
    _appId: BytesLike,
    _app: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getApp(
    _namespace: BytesLike,
    _appId: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  "newAppProxyPinned(address,bytes32,bytes)"(
    _kernel: string,
    _appId: BytesLike,
    _initializePayload: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "newAppProxyPinned(address,bytes32)"(
    _kernel: string,
    _appId: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  APP_BASES_NAMESPACE(overrides?: CallOverrides): Promise<string>;

  acl(overrides?: CallOverrides): Promise<string>;

  isPetrified(overrides?: CallOverrides): Promise<boolean>;

  "newAppProxy(address,bytes32)"(
    _kernel: string,
    _appId: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "newAppProxy(address,bytes32,bytes)"(
    _kernel: string,
    _appId: BytesLike,
    _initializePayload: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  DEFAULT_ACL_APP_ID(overrides?: CallOverrides): Promise<string>;

  hasPermission(
    _who: string,
    _where: string,
    _what: BytesLike,
    _how: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    hasInitialized(overrides?: CallOverrides): Promise<boolean>;

    KERNEL_APP_ID(overrides?: CallOverrides): Promise<string>;

    APP_ADDR_NAMESPACE(overrides?: CallOverrides): Promise<string>;

    getRecoveryVault(overrides?: CallOverrides): Promise<string>;

    "newAppInstance(bytes32,address,bytes,bool)"(
      _appId: BytesLike,
      _appBase: string,
      _initializePayload: BytesLike,
      _setDefault: boolean,
      overrides?: CallOverrides
    ): Promise<string>;

    "newAppInstance(bytes32,address)"(
      _appId: BytesLike,
      _appBase: string,
      overrides?: CallOverrides
    ): Promise<string>;

    apps(
      arg0: BytesLike,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    initialize(
      _baseAcl: string,
      _permissionsCreator: string,
      overrides?: CallOverrides
    ): Promise<void>;

    CORE_NAMESPACE(overrides?: CallOverrides): Promise<string>;

    allowRecoverability(
      token: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    recoveryVaultAppId(overrides?: CallOverrides): Promise<string>;

    getInitializationBlock(overrides?: CallOverrides): Promise<BigNumber>;

    setRecoveryVaultAppId(
      _recoveryVaultAppId: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    APP_MANAGER_ROLE(overrides?: CallOverrides): Promise<string>;

    "newPinnedAppInstance(bytes32,address)"(
      _appId: BytesLike,
      _appBase: string,
      overrides?: CallOverrides
    ): Promise<string>;

    "newPinnedAppInstance(bytes32,address,bytes,bool)"(
      _appId: BytesLike,
      _appBase: string,
      _initializePayload: BytesLike,
      _setDefault: boolean,
      overrides?: CallOverrides
    ): Promise<string>;

    transferToVault(_token: string, overrides?: CallOverrides): Promise<void>;

    setApp(
      _namespace: BytesLike,
      _appId: BytesLike,
      _app: string,
      overrides?: CallOverrides
    ): Promise<void>;

    getApp(
      _namespace: BytesLike,
      _appId: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "newAppProxyPinned(address,bytes32,bytes)"(
      _kernel: string,
      _appId: BytesLike,
      _initializePayload: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "newAppProxyPinned(address,bytes32)"(
      _kernel: string,
      _appId: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    APP_BASES_NAMESPACE(overrides?: CallOverrides): Promise<string>;

    acl(overrides?: CallOverrides): Promise<string>;

    isPetrified(overrides?: CallOverrides): Promise<boolean>;

    "newAppProxy(address,bytes32)"(
      _kernel: string,
      _appId: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "newAppProxy(address,bytes32,bytes)"(
      _kernel: string,
      _appId: BytesLike,
      _initializePayload: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    DEFAULT_ACL_APP_ID(overrides?: CallOverrides): Promise<string>;

    hasPermission(
      _who: string,
      _where: string,
      _what: BytesLike,
      _how: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    NewAppProxy(
      proxy?: null,
      isUpgradeable?: null,
      appId?: null
    ): TypedEventFilter<
      [string, boolean, string],
      { proxy: string; isUpgradeable: boolean; appId: string }
    >;

    RecoverToVault(
      vault?: string | null,
      token?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { vault: string; token: string; amount: BigNumber }
    >;

    SetApp(
      namespace?: BytesLike | null,
      appId?: BytesLike | null,
      app?: null
    ): TypedEventFilter<
      [string, string, string],
      { namespace: string; appId: string; app: string }
    >;
  };

  estimateGas: {
    hasInitialized(overrides?: CallOverrides): Promise<BigNumber>;

    KERNEL_APP_ID(overrides?: CallOverrides): Promise<BigNumber>;

    APP_ADDR_NAMESPACE(overrides?: CallOverrides): Promise<BigNumber>;

    getRecoveryVault(overrides?: CallOverrides): Promise<BigNumber>;

    "newAppInstance(bytes32,address,bytes,bool)"(
      _appId: BytesLike,
      _appBase: string,
      _initializePayload: BytesLike,
      _setDefault: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "newAppInstance(bytes32,address)"(
      _appId: BytesLike,
      _appBase: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    apps(
      arg0: BytesLike,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _baseAcl: string,
      _permissionsCreator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    CORE_NAMESPACE(overrides?: CallOverrides): Promise<BigNumber>;

    allowRecoverability(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    recoveryVaultAppId(overrides?: CallOverrides): Promise<BigNumber>;

    getInitializationBlock(overrides?: CallOverrides): Promise<BigNumber>;

    setRecoveryVaultAppId(
      _recoveryVaultAppId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    APP_MANAGER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    "newPinnedAppInstance(bytes32,address)"(
      _appId: BytesLike,
      _appBase: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "newPinnedAppInstance(bytes32,address,bytes,bool)"(
      _appId: BytesLike,
      _appBase: string,
      _initializePayload: BytesLike,
      _setDefault: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferToVault(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setApp(
      _namespace: BytesLike,
      _appId: BytesLike,
      _app: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getApp(
      _namespace: BytesLike,
      _appId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "newAppProxyPinned(address,bytes32,bytes)"(
      _kernel: string,
      _appId: BytesLike,
      _initializePayload: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "newAppProxyPinned(address,bytes32)"(
      _kernel: string,
      _appId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    APP_BASES_NAMESPACE(overrides?: CallOverrides): Promise<BigNumber>;

    acl(overrides?: CallOverrides): Promise<BigNumber>;

    isPetrified(overrides?: CallOverrides): Promise<BigNumber>;

    "newAppProxy(address,bytes32)"(
      _kernel: string,
      _appId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "newAppProxy(address,bytes32,bytes)"(
      _kernel: string,
      _appId: BytesLike,
      _initializePayload: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    DEFAULT_ACL_APP_ID(overrides?: CallOverrides): Promise<BigNumber>;

    hasPermission(
      _who: string,
      _where: string,
      _what: BytesLike,
      _how: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    hasInitialized(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    KERNEL_APP_ID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    APP_ADDR_NAMESPACE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRecoveryVault(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "newAppInstance(bytes32,address,bytes,bool)"(
      _appId: BytesLike,
      _appBase: string,
      _initializePayload: BytesLike,
      _setDefault: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "newAppInstance(bytes32,address)"(
      _appId: BytesLike,
      _appBase: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    apps(
      arg0: BytesLike,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _baseAcl: string,
      _permissionsCreator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    CORE_NAMESPACE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    allowRecoverability(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    recoveryVaultAppId(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getInitializationBlock(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setRecoveryVaultAppId(
      _recoveryVaultAppId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    APP_MANAGER_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "newPinnedAppInstance(bytes32,address)"(
      _appId: BytesLike,
      _appBase: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "newPinnedAppInstance(bytes32,address,bytes,bool)"(
      _appId: BytesLike,
      _appBase: string,
      _initializePayload: BytesLike,
      _setDefault: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferToVault(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setApp(
      _namespace: BytesLike,
      _appId: BytesLike,
      _app: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getApp(
      _namespace: BytesLike,
      _appId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "newAppProxyPinned(address,bytes32,bytes)"(
      _kernel: string,
      _appId: BytesLike,
      _initializePayload: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "newAppProxyPinned(address,bytes32)"(
      _kernel: string,
      _appId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    APP_BASES_NAMESPACE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    acl(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isPetrified(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "newAppProxy(address,bytes32)"(
      _kernel: string,
      _appId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "newAppProxy(address,bytes32,bytes)"(
      _kernel: string,
      _appId: BytesLike,
      _initializePayload: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    DEFAULT_ACL_APP_ID(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasPermission(
      _who: string,
      _where: string,
      _what: BytesLike,
      _how: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
