/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { IKernelEvents, IKernelEventsInterface } from "../IKernelEvents";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        name: "namespace",
        type: "bytes32",
      },
      {
        indexed: true,
        name: "appId",
        type: "bytes32",
      },
      {
        indexed: false,
        name: "app",
        type: "address",
      },
    ],
    name: "SetApp",
    type: "event",
  },
];

const _bytecode =
  "0x6080604052348015600f57600080fd5b50603580601d6000396000f3006080604052600080fd00a165627a7a72305820095e9c58a7a52cbd4037adfdd5fe7bcec87a1eec272b6d9b12682c1e0ef7398f0029";

export class IKernelEvents__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<IKernelEvents> {
    return super.deploy(overrides || {}) as Promise<IKernelEvents>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): IKernelEvents {
    return super.attach(address) as IKernelEvents;
  }
  connect(signer: Signer): IKernelEvents__factory {
    return super.connect(signer) as IKernelEvents__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): IKernelEventsInterface {
    return new utils.Interface(_abi) as IKernelEventsInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IKernelEvents {
    return new Contract(address, _abi, signerOrProvider) as IKernelEvents;
  }
}
