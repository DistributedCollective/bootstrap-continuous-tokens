/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Signer,
  utils,
  BigNumberish,
  Contract,
  ContractFactory,
  Overrides,
} from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  MockedContinuousToken,
  MockedContinuousTokenInterface,
} from "../MockedContinuousToken";

const _abi = [
  {
    constant: true,
    inputs: [],
    name: "name",
    outputs: [
      {
        name: "",
        type: "string",
      },
    ],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: false,
    inputs: [
      {
        name: "_spender",
        type: "address",
      },
      {
        name: "_value",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        name: "",
        type: "bool",
      },
    ],
    payable: false,
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    constant: true,
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        name: "",
        type: "uint256",
      },
    ],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: false,
    inputs: [
      {
        name: "_from",
        type: "address",
      },
      {
        name: "_to",
        type: "address",
      },
      {
        name: "_value",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        name: "",
        type: "bool",
      },
    ],
    payable: false,
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    constant: true,
    inputs: [],
    name: "decimals",
    outputs: [
      {
        name: "",
        type: "uint8",
      },
    ],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: false,
    inputs: [
      {
        name: "_to",
        type: "address",
      },
      {
        name: "_value",
        type: "uint256",
      },
    ],
    name: "mint",
    outputs: [],
    payable: false,
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    constant: true,
    inputs: [
      {
        name: "_owner",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        name: "",
        type: "uint256",
      },
    ],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: true,
    inputs: [],
    name: "symbol",
    outputs: [
      {
        name: "",
        type: "string",
      },
    ],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    constant: false,
    inputs: [
      {
        name: "_who",
        type: "address",
      },
      {
        name: "_value",
        type: "uint256",
      },
    ],
    name: "burn",
    outputs: [],
    payable: false,
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    constant: false,
    inputs: [
      {
        name: "_to",
        type: "address",
      },
      {
        name: "_value",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        name: "",
        type: "bool",
      },
    ],
    payable: false,
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    constant: true,
    inputs: [
      {
        name: "_owner",
        type: "address",
      },
      {
        name: "_spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        name: "",
        type: "uint256",
      },
    ],
    payable: false,
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        name: "_name",
        type: "string",
      },
      {
        name: "_symbol",
        type: "string",
      },
      {
        name: "_decimals",
        type: "uint8",
      },
      {
        name: "_initialAmount",
        type: "uint256",
      },
    ],
    payable: false,
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        name: "minter",
        type: "address",
      },
      {
        indexed: false,
        name: "value",
        type: "uint256",
      },
    ],
    name: "Mint",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        name: "burner",
        type: "address",
      },
      {
        indexed: false,
        name: "value",
        type: "uint256",
      },
    ],
    name: "Burn",
    type: "event",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b5060405162000f3938038062000f3983398101604090815281516020808401519284015160608501519285018051909594909401939092916200005a91600091870190620002f5565b50825162000070906001906020860190620002f5565b506002805460ff191660ff841617905580156200009c576200009c3382640100000000620000a6810204565b505050506200039a565b600160a060020a03821615156200011e57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f6e6f206d696e7420616c6c6f7765640000000000000000000000000000000000604482015290519081900360640190fd5b6005546200013b908264010000000062000aad6200020882021704565b600555600160a060020a03821660009081526003602052604090205462000171908264010000000062000aad6200020882021704565b600160a060020a038316600081815260036020908152604091829020939093558051848152905191927f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d412139688592918290030190a2604080518281529051600160a060020a038416916000917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a35050565b60408051808201909152601181527f4d4154485f4144445f4f564552464c4f5700000000000000000000000000000060208201526000908383019084821015620002ed576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015620002b157818101518382015260200162000297565b50505050905090810190601f168015620002df5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b509392505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200033857805160ff191683800117855562000368565b8280016001018555821562000368579182015b82811115620003685782518255916020019190600101906200034b565b50620003769291506200037a565b5090565b6200039791905b8082111562000376576000815560010162000381565b90565b610b8f80620003aa6000396000f3006080604052600436106100ae5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100b3578063095ea7b31461013d57806318160ddd1461017557806323b872dd1461019c578063313ce567146101c657806340c10f19146101f157806370a082311461021757806395d89b41146102385780639dc29fac1461024d578063a9059cbb14610271578063dd62ed3e14610295575b600080fd5b3480156100bf57600080fd5b506100c86102bc565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101025781810151838201526020016100ea565b50505050905090810190601f16801561012f5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561014957600080fd5b50610161600160a060020a036004351660243561034a565b604080519115158252519081900360200190f35b34801561018157600080fd5b5061018a6103b0565b60408051918252519081900360200190f35b3480156101a857600080fd5b50610161600160a060020a03600435811690602435166044356103b6565b3480156101d257600080fd5b506101db61055b565b6040805160ff9092168252519081900360200190f35b3480156101fd57600080fd5b50610215600160a060020a0360043516602435610564565b005b34801561022357600080fd5b5061018a600160a060020a0360043516610688565b34801561024457600080fd5b506100c86106a3565b34801561025957600080fd5b50610215600160a060020a03600435166024356106fd565b34801561027d57600080fd5b50610161600160a060020a0360043516602435610897565b3480156102a157600080fd5b5061018a600160a060020a03600435811690602435166109b2565b6000805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156103425780601f1061031757610100808354040283529160200191610342565b820191906000526020600020905b81548152906001019060200180831161032557829003601f168201915b505050505081565b336000818152600460209081526040808320600160a060020a038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a350600192915050565b60055490565b600160a060020a0383166000818152600460209081526040808320338452825280832054938352600390915281205490919083118015906103f75750808311155b801561040b5750600160a060020a03841615155b1515610461576040805160e560020a62461bcd02815260206004820152601060248201527f696e76616c6964207472616e7366657200000000000000000000000000000000604482015290519081900360640190fd5b600160a060020a03851660009081526003602052604090205461048a908463ffffffff6109dd16565b600160a060020a0380871660009081526003602052604080822093909355908616815220546104bf908463ffffffff610aad16565b600160a060020a038516600090815260036020526040902055600019811015610517576104f2818463ffffffff6109dd16565b600160a060020a03861660009081526004602090815260408083203384529091529020555b83600160a060020a031685600160a060020a0316600080516020610b44833981519152856040518082815260200191505060405180910390a3506001949350505050565b60025460ff1681565b600160a060020a03821615156105c4576040805160e560020a62461bcd02815260206004820152600f60248201527f6e6f206d696e7420616c6c6f7765640000000000000000000000000000000000604482015290519081900360640190fd5b6005546105d7908263ffffffff610aad16565b600555600160a060020a038216600090815260036020526040902054610603908263ffffffff610aad16565b600160a060020a038316600081815260036020908152604091829020939093558051848152905191927f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d412139688592918290030190a2604080518281529051600160a060020a03841691600091600080516020610b448339815191529181900360200190a35050565b600160a060020a031660009081526003602052604090205490565b60018054604080516020600284861615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156103425780601f1061031757610100808354040283529160200191610342565b600160a060020a038216151561075d576040805160e560020a62461bcd02815260206004820152600f60248201527f6e6f206275726e20616c6c6f7765640000000000000000000000000000000000604482015290519081900360640190fd5b600160a060020a0382166000908152600360205260409020548111156107cd576040805160e560020a62461bcd02815260206004820152600f60248201527f62616c616e636520746f6f206c6f770000000000000000000000000000000000604482015290519081900360640190fd5b600160a060020a0382166000908152600360205260409020546107f6908263ffffffff6109dd16565b600160a060020a038316600090815260036020526040902055600554610822908263ffffffff6109dd16565b600555604080518281529051600160a060020a038416917fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5919081900360200190a2604080518281529051600091600160a060020a03851691600080516020610b448339815191529181900360200190a35050565b3360009081526003602052604081205482118015906108be5750600160a060020a03831615155b1515610914576040805160e560020a62461bcd02815260206004820152601060248201527f696e76616c6964207472616e7366657200000000000000000000000000000000604482015290519081900360640190fd5b33600090815260036020526040902054610934908363ffffffff6109dd16565b3360009081526003602052604080822092909255600160a060020a03851681522054610966908363ffffffff610aad16565b600160a060020a038416600081815260036020908152604091829020939093558051858152905191923392600080516020610b448339815191529281900390910190a350600192915050565b600160a060020a03918216600090815260046020908152604080832093909416825291909152205490565b60408051808201909152601281527f4d4154485f5355425f554e444552464c4f5700000000000000000000000000006020820152600090819084841115610aa55760405160e560020a62461bcd0281526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610a6a578181015183820152602001610a52565b50505050905090810190601f168015610a975780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b60408051808201909152601181527f4d4154485f4144445f4f564552464c4f5700000000000000000000000000000060208201526000908383019084821015610b3b5760405160e560020a62461bcd02815260040180806020018281038252838181518152602001915080519060200190808383600083811015610a6a578181015183820152602001610a52565b5093925050505600ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa165627a7a72305820a2d9c587ca867c19c2d7f2d0510f1448a96e5bc29ff529120237cce2c4c047090029";

export class MockedContinuousToken__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    _name: string,
    _symbol: string,
    _decimals: BigNumberish,
    _initialAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MockedContinuousToken> {
    return super.deploy(
      _name,
      _symbol,
      _decimals,
      _initialAmount,
      overrides || {}
    ) as Promise<MockedContinuousToken>;
  }
  getDeployTransaction(
    _name: string,
    _symbol: string,
    _decimals: BigNumberish,
    _initialAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _name,
      _symbol,
      _decimals,
      _initialAmount,
      overrides || {}
    );
  }
  attach(address: string): MockedContinuousToken {
    return super.attach(address) as MockedContinuousToken;
  }
  connect(signer: Signer): MockedContinuousToken__factory {
    return super.connect(signer) as MockedContinuousToken__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockedContinuousTokenInterface {
    return new utils.Interface(_abi) as MockedContinuousTokenInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockedContinuousToken {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as MockedContinuousToken;
  }
}
