/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface FixedRateConverterInterface extends ethers.utils.Interface {
  functions: {
    "admin()": FunctionFragment;
    "conversionFixedRate()": FunctionFragment;
    "convert(uint256)": FunctionFragment;
    "convertAmount(uint256)": FunctionFragment;
    "convertMax()": FunctionFragment;
    "myntContractAddress()": FunctionFragment;
    "setAdmin(address)": FunctionFragment;
    "setMyntContractAddress(address)": FunctionFragment;
    "sovContractAddress()": FunctionFragment;
    "withdrawSov()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "conversionFixedRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "convert",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "convertAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "convertMax",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "myntContractAddress",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "setAdmin", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setMyntContractAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "sovContractAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawSov",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "conversionFixedRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "convert", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "convertAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "convertMax", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "myntContractAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setAdmin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setMyntContractAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sovContractAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawSov",
    data: BytesLike
  ): Result;

  events: {
    "Convert(address,uint256,uint256)": EventFragment;
    "SetAdmin(address,address,address)": EventFragment;
    "SetMyntContractAddress(address,address,address)": EventFragment;
    "SovWithdrawn(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Convert"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetAdmin"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetMyntContractAddress"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SovWithdrawn"): EventFragment;
}

export class FixedRateConverter extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: FixedRateConverterInterface;

  functions: {
    admin(overrides?: CallOverrides): Promise<[string]>;

    conversionFixedRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    convert(
      _myntAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    convertAmount(
      _myntAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    convertMax(overrides?: CallOverrides): Promise<[BigNumber]>;

    myntContractAddress(overrides?: CallOverrides): Promise<[string]>;

    setAdmin(
      _newAdmin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMyntContractAddress(
      _newMyntContractAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sovContractAddress(overrides?: CallOverrides): Promise<[string]>;

    withdrawSov(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  admin(overrides?: CallOverrides): Promise<string>;

  conversionFixedRate(overrides?: CallOverrides): Promise<BigNumber>;

  convert(
    _myntAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  convertAmount(
    _myntAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  convertMax(overrides?: CallOverrides): Promise<BigNumber>;

  myntContractAddress(overrides?: CallOverrides): Promise<string>;

  setAdmin(
    _newAdmin: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMyntContractAddress(
    _newMyntContractAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sovContractAddress(overrides?: CallOverrides): Promise<string>;

  withdrawSov(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    admin(overrides?: CallOverrides): Promise<string>;

    conversionFixedRate(overrides?: CallOverrides): Promise<BigNumber>;

    convert(
      _myntAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    convertAmount(
      _myntAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    convertMax(overrides?: CallOverrides): Promise<BigNumber>;

    myntContractAddress(overrides?: CallOverrides): Promise<string>;

    setAdmin(_newAdmin: string, overrides?: CallOverrides): Promise<void>;

    setMyntContractAddress(
      _newMyntContractAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    sovContractAddress(overrides?: CallOverrides): Promise<string>;

    withdrawSov(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    Convert(
      sender?: string | null,
      myntSent?: null,
      sovReceived?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { sender: string; myntSent: BigNumber; sovReceived: BigNumber }
    >;

    SetAdmin(
      sender?: string | null,
      oldAdmin?: string | null,
      newAdmin?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { sender: string; oldAdmin: string; newAdmin: string }
    >;

    SetMyntContractAddress(
      sender?: string | null,
      oldMyntContractAddress?: string | null,
      newMyntContractAddreess?: string | null
    ): TypedEventFilter<
      [string, string, string],
      {
        sender: string;
        oldMyntContractAddress: string;
        newMyntContractAddreess: string;
      }
    >;

    SovWithdrawn(
      recipient?: string | null,
      amountWithdrawn?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { recipient: string; amountWithdrawn: BigNumber }
    >;
  };

  estimateGas: {
    admin(overrides?: CallOverrides): Promise<BigNumber>;

    conversionFixedRate(overrides?: CallOverrides): Promise<BigNumber>;

    convert(
      _myntAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    convertAmount(
      _myntAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    convertMax(overrides?: CallOverrides): Promise<BigNumber>;

    myntContractAddress(overrides?: CallOverrides): Promise<BigNumber>;

    setAdmin(
      _newAdmin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMyntContractAddress(
      _newMyntContractAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sovContractAddress(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawSov(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    admin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    conversionFixedRate(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    convert(
      _myntAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    convertAmount(
      _myntAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    convertMax(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    myntContractAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setAdmin(
      _newAdmin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMyntContractAddress(
      _newMyntContractAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sovContractAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdrawSov(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
