/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface OLDACLInterface extends ethers.utils.Interface {
  functions: {
    "hasInitialized()": FunctionFragment;
    "createBurnedPermission(address,bytes32)": FunctionFragment;
    "burnPermissionManager(address,bytes32)": FunctionFragment;
    "grantPermission(address,address,bytes32)": FunctionFragment;
    "getPermissionParamsLength(address,address,bytes32)": FunctionFragment;
    "evalParams(bytes32,address,address,bytes32,uint256[])": FunctionFragment;
    "NO_PERMISSION()": FunctionFragment;
    "getEVMScriptExecutor(bytes)": FunctionFragment;
    "getRecoveryVault()": FunctionFragment;
    "CREATE_PERMISSIONS_ROLE()": FunctionFragment;
    "grantPermissionP(address,address,bytes32,uint256[])": FunctionFragment;
    "hasPermission(address,address,bytes32)": FunctionFragment;
    "allowRecoverability(address)": FunctionFragment;
    "appId()": FunctionFragment;
    "getInitializationBlock()": FunctionFragment;
    "revokePermission(address,address,bytes32)": FunctionFragment;
    "transferToVault(address)": FunctionFragment;
    "getPermissionParam(address,address,bytes32,uint256)": FunctionFragment;
    "canPerform(address,bytes32,uint256[])": FunctionFragment;
    "getEVMScriptRegistry()": FunctionFragment;
    "ANY_ENTITY()": FunctionFragment;
    "removePermissionManager(address,bytes32)": FunctionFragment;
    "setPermissionManager(address,address,bytes32)": FunctionFragment;
    "getPermissionManager(address,bytes32)": FunctionFragment;
    "createPermission(address,address,bytes32,address)": FunctionFragment;
    "initialize(address)": FunctionFragment;
    "EMPTY_PARAM_HASH()": FunctionFragment;
    "kernel()": FunctionFragment;
    "isPetrified()": FunctionFragment;
    "BURN_ENTITY()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "hasInitialized",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createBurnedPermission",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "burnPermissionManager",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantPermission",
    values: [string, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPermissionParamsLength",
    values: [string, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "evalParams",
    values: [BytesLike, string, string, BytesLike, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "NO_PERMISSION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getEVMScriptExecutor",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRecoveryVault",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CREATE_PERMISSIONS_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "grantPermissionP",
    values: [string, string, BytesLike, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "hasPermission",
    values: [string, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "allowRecoverability",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "appId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getInitializationBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "revokePermission",
    values: [string, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferToVault",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getPermissionParam",
    values: [string, string, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "canPerform",
    values: [string, BytesLike, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getEVMScriptRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ANY_ENTITY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removePermissionManager",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setPermissionManager",
    values: [string, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPermissionManager",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createPermission",
    values: [string, string, BytesLike, string]
  ): string;
  encodeFunctionData(functionFragment: "initialize", values: [string]): string;
  encodeFunctionData(
    functionFragment: "EMPTY_PARAM_HASH",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "kernel", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isPetrified",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "BURN_ENTITY",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "hasInitialized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createBurnedPermission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "burnPermissionManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "grantPermission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPermissionParamsLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "evalParams", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "NO_PERMISSION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEVMScriptExecutor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRecoveryVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CREATE_PERMISSIONS_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "grantPermissionP",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasPermission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allowRecoverability",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "appId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getInitializationBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokePermission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferToVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPermissionParam",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "canPerform", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getEVMScriptRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ANY_ENTITY", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removePermissionManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPermissionManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPermissionManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createPermission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "EMPTY_PARAM_HASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "kernel", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isPetrified",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "BURN_ENTITY",
    data: BytesLike
  ): Result;

  events: {
    "SetPermission(address,address,bytes32,bool)": EventFragment;
    "SetPermissionParams(address,address,bytes32,bytes32)": EventFragment;
    "ChangePermissionManager(address,bytes32,address)": EventFragment;
    "ScriptResult(address,bytes,bytes,bytes)": EventFragment;
    "RecoverToVault(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "SetPermission"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetPermissionParams"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChangePermissionManager"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ScriptResult"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RecoverToVault"): EventFragment;
}

export class OLDACL extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: OLDACLInterface;

  functions: {
    hasInitialized(overrides?: CallOverrides): Promise<[boolean]>;

    createBurnedPermission(
      _app: string,
      _role: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    burnPermissionManager(
      _app: string,
      _role: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    grantPermission(
      _entity: string,
      _app: string,
      _role: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getPermissionParamsLength(
      _entity: string,
      _app: string,
      _role: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    evalParams(
      _paramsHash: BytesLike,
      _who: string,
      _where: string,
      _what: BytesLike,
      _how: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    NO_PERMISSION(overrides?: CallOverrides): Promise<[string]>;

    getEVMScriptExecutor(
      _script: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getRecoveryVault(overrides?: CallOverrides): Promise<[string]>;

    CREATE_PERMISSIONS_ROLE(overrides?: CallOverrides): Promise<[string]>;

    grantPermissionP(
      _entity: string,
      _app: string,
      _role: BytesLike,
      _params: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "hasPermission(address,address,bytes32)"(
      _who: string,
      _where: string,
      _what: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "hasPermission(address,address,bytes32,uint256[])"(
      _who: string,
      _where: string,
      _what: BytesLike,
      _how: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "hasPermission(address,address,bytes32,bytes)"(
      _who: string,
      _where: string,
      _what: BytesLike,
      _how: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    allowRecoverability(
      token: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    appId(overrides?: CallOverrides): Promise<[string]>;

    getInitializationBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    revokePermission(
      _entity: string,
      _app: string,
      _role: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferToVault(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getPermissionParam(
      _entity: string,
      _app: string,
      _role: BytesLike,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number, number, BigNumber]>;

    canPerform(
      _sender: string,
      _role: BytesLike,
      _params: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getEVMScriptRegistry(overrides?: CallOverrides): Promise<[string]>;

    ANY_ENTITY(overrides?: CallOverrides): Promise<[string]>;

    removePermissionManager(
      _app: string,
      _role: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPermissionManager(
      _newManager: string,
      _app: string,
      _role: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getPermissionManager(
      _app: string,
      _role: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    createPermission(
      _entity: string,
      _app: string,
      _role: BytesLike,
      _manager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initialize(
      _permissionsCreator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    EMPTY_PARAM_HASH(overrides?: CallOverrides): Promise<[string]>;

    kernel(overrides?: CallOverrides): Promise<[string]>;

    isPetrified(overrides?: CallOverrides): Promise<[boolean]>;

    BURN_ENTITY(overrides?: CallOverrides): Promise<[string]>;
  };

  hasInitialized(overrides?: CallOverrides): Promise<boolean>;

  createBurnedPermission(
    _app: string,
    _role: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  burnPermissionManager(
    _app: string,
    _role: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  grantPermission(
    _entity: string,
    _app: string,
    _role: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getPermissionParamsLength(
    _entity: string,
    _app: string,
    _role: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  evalParams(
    _paramsHash: BytesLike,
    _who: string,
    _where: string,
    _what: BytesLike,
    _how: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<boolean>;

  NO_PERMISSION(overrides?: CallOverrides): Promise<string>;

  getEVMScriptExecutor(
    _script: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  getRecoveryVault(overrides?: CallOverrides): Promise<string>;

  CREATE_PERMISSIONS_ROLE(overrides?: CallOverrides): Promise<string>;

  grantPermissionP(
    _entity: string,
    _app: string,
    _role: BytesLike,
    _params: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "hasPermission(address,address,bytes32)"(
    _who: string,
    _where: string,
    _what: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "hasPermission(address,address,bytes32,uint256[])"(
    _who: string,
    _where: string,
    _what: BytesLike,
    _how: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<boolean>;

  "hasPermission(address,address,bytes32,bytes)"(
    _who: string,
    _where: string,
    _what: BytesLike,
    _how: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  allowRecoverability(
    token: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  appId(overrides?: CallOverrides): Promise<string>;

  getInitializationBlock(overrides?: CallOverrides): Promise<BigNumber>;

  revokePermission(
    _entity: string,
    _app: string,
    _role: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferToVault(
    _token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getPermissionParam(
    _entity: string,
    _app: string,
    _role: BytesLike,
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[number, number, BigNumber]>;

  canPerform(
    _sender: string,
    _role: BytesLike,
    _params: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<boolean>;

  getEVMScriptRegistry(overrides?: CallOverrides): Promise<string>;

  ANY_ENTITY(overrides?: CallOverrides): Promise<string>;

  removePermissionManager(
    _app: string,
    _role: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPermissionManager(
    _newManager: string,
    _app: string,
    _role: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getPermissionManager(
    _app: string,
    _role: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  createPermission(
    _entity: string,
    _app: string,
    _role: BytesLike,
    _manager: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initialize(
    _permissionsCreator: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  EMPTY_PARAM_HASH(overrides?: CallOverrides): Promise<string>;

  kernel(overrides?: CallOverrides): Promise<string>;

  isPetrified(overrides?: CallOverrides): Promise<boolean>;

  BURN_ENTITY(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    hasInitialized(overrides?: CallOverrides): Promise<boolean>;

    createBurnedPermission(
      _app: string,
      _role: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    burnPermissionManager(
      _app: string,
      _role: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    grantPermission(
      _entity: string,
      _app: string,
      _role: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    getPermissionParamsLength(
      _entity: string,
      _app: string,
      _role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    evalParams(
      _paramsHash: BytesLike,
      _who: string,
      _where: string,
      _what: BytesLike,
      _how: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    NO_PERMISSION(overrides?: CallOverrides): Promise<string>;

    getEVMScriptExecutor(
      _script: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    getRecoveryVault(overrides?: CallOverrides): Promise<string>;

    CREATE_PERMISSIONS_ROLE(overrides?: CallOverrides): Promise<string>;

    grantPermissionP(
      _entity: string,
      _app: string,
      _role: BytesLike,
      _params: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    "hasPermission(address,address,bytes32)"(
      _who: string,
      _where: string,
      _what: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "hasPermission(address,address,bytes32,uint256[])"(
      _who: string,
      _where: string,
      _what: BytesLike,
      _how: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    "hasPermission(address,address,bytes32,bytes)"(
      _who: string,
      _where: string,
      _what: BytesLike,
      _how: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    allowRecoverability(
      token: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    appId(overrides?: CallOverrides): Promise<string>;

    getInitializationBlock(overrides?: CallOverrides): Promise<BigNumber>;

    revokePermission(
      _entity: string,
      _app: string,
      _role: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    transferToVault(_token: string, overrides?: CallOverrides): Promise<void>;

    getPermissionParam(
      _entity: string,
      _app: string,
      _role: BytesLike,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number, number, BigNumber]>;

    canPerform(
      _sender: string,
      _role: BytesLike,
      _params: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    getEVMScriptRegistry(overrides?: CallOverrides): Promise<string>;

    ANY_ENTITY(overrides?: CallOverrides): Promise<string>;

    removePermissionManager(
      _app: string,
      _role: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setPermissionManager(
      _newManager: string,
      _app: string,
      _role: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    getPermissionManager(
      _app: string,
      _role: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    createPermission(
      _entity: string,
      _app: string,
      _role: BytesLike,
      _manager: string,
      overrides?: CallOverrides
    ): Promise<void>;

    initialize(
      _permissionsCreator: string,
      overrides?: CallOverrides
    ): Promise<void>;

    EMPTY_PARAM_HASH(overrides?: CallOverrides): Promise<string>;

    kernel(overrides?: CallOverrides): Promise<string>;

    isPetrified(overrides?: CallOverrides): Promise<boolean>;

    BURN_ENTITY(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    SetPermission(
      entity?: string | null,
      app?: string | null,
      role?: BytesLike | null,
      allowed?: null
    ): TypedEventFilter<
      [string, string, string, boolean],
      { entity: string; app: string; role: string; allowed: boolean }
    >;

    SetPermissionParams(
      entity?: string | null,
      app?: string | null,
      role?: BytesLike | null,
      paramsHash?: null
    ): TypedEventFilter<
      [string, string, string, string],
      { entity: string; app: string; role: string; paramsHash: string }
    >;

    ChangePermissionManager(
      app?: string | null,
      role?: BytesLike | null,
      manager?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { app: string; role: string; manager: string }
    >;

    ScriptResult(
      executor?: string | null,
      script?: null,
      input?: null,
      returnData?: null
    ): TypedEventFilter<
      [string, string, string, string],
      { executor: string; script: string; input: string; returnData: string }
    >;

    RecoverToVault(
      vault?: string | null,
      token?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { vault: string; token: string; amount: BigNumber }
    >;
  };

  estimateGas: {
    hasInitialized(overrides?: CallOverrides): Promise<BigNumber>;

    createBurnedPermission(
      _app: string,
      _role: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    burnPermissionManager(
      _app: string,
      _role: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    grantPermission(
      _entity: string,
      _app: string,
      _role: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getPermissionParamsLength(
      _entity: string,
      _app: string,
      _role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    evalParams(
      _paramsHash: BytesLike,
      _who: string,
      _where: string,
      _what: BytesLike,
      _how: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    NO_PERMISSION(overrides?: CallOverrides): Promise<BigNumber>;

    getEVMScriptExecutor(
      _script: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRecoveryVault(overrides?: CallOverrides): Promise<BigNumber>;

    CREATE_PERMISSIONS_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    grantPermissionP(
      _entity: string,
      _app: string,
      _role: BytesLike,
      _params: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "hasPermission(address,address,bytes32)"(
      _who: string,
      _where: string,
      _what: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "hasPermission(address,address,bytes32,uint256[])"(
      _who: string,
      _where: string,
      _what: BytesLike,
      _how: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "hasPermission(address,address,bytes32,bytes)"(
      _who: string,
      _where: string,
      _what: BytesLike,
      _how: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    allowRecoverability(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    appId(overrides?: CallOverrides): Promise<BigNumber>;

    getInitializationBlock(overrides?: CallOverrides): Promise<BigNumber>;

    revokePermission(
      _entity: string,
      _app: string,
      _role: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferToVault(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getPermissionParam(
      _entity: string,
      _app: string,
      _role: BytesLike,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    canPerform(
      _sender: string,
      _role: BytesLike,
      _params: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEVMScriptRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    ANY_ENTITY(overrides?: CallOverrides): Promise<BigNumber>;

    removePermissionManager(
      _app: string,
      _role: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPermissionManager(
      _newManager: string,
      _app: string,
      _role: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getPermissionManager(
      _app: string,
      _role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createPermission(
      _entity: string,
      _app: string,
      _role: BytesLike,
      _manager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initialize(
      _permissionsCreator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    EMPTY_PARAM_HASH(overrides?: CallOverrides): Promise<BigNumber>;

    kernel(overrides?: CallOverrides): Promise<BigNumber>;

    isPetrified(overrides?: CallOverrides): Promise<BigNumber>;

    BURN_ENTITY(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    hasInitialized(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    createBurnedPermission(
      _app: string,
      _role: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    burnPermissionManager(
      _app: string,
      _role: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    grantPermission(
      _entity: string,
      _app: string,
      _role: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getPermissionParamsLength(
      _entity: string,
      _app: string,
      _role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    evalParams(
      _paramsHash: BytesLike,
      _who: string,
      _where: string,
      _what: BytesLike,
      _how: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    NO_PERMISSION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getEVMScriptExecutor(
      _script: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRecoveryVault(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    CREATE_PERMISSIONS_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantPermissionP(
      _entity: string,
      _app: string,
      _role: BytesLike,
      _params: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "hasPermission(address,address,bytes32)"(
      _who: string,
      _where: string,
      _what: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "hasPermission(address,address,bytes32,uint256[])"(
      _who: string,
      _where: string,
      _what: BytesLike,
      _how: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "hasPermission(address,address,bytes32,bytes)"(
      _who: string,
      _where: string,
      _what: BytesLike,
      _how: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allowRecoverability(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    appId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getInitializationBlock(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    revokePermission(
      _entity: string,
      _app: string,
      _role: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferToVault(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getPermissionParam(
      _entity: string,
      _app: string,
      _role: BytesLike,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    canPerform(
      _sender: string,
      _role: BytesLike,
      _params: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEVMScriptRegistry(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ANY_ENTITY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removePermissionManager(
      _app: string,
      _role: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPermissionManager(
      _newManager: string,
      _app: string,
      _role: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getPermissionManager(
      _app: string,
      _role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createPermission(
      _entity: string,
      _app: string,
      _role: BytesLike,
      _manager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initialize(
      _permissionsCreator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    EMPTY_PARAM_HASH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    kernel(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isPetrified(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    BURN_ENTITY(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
