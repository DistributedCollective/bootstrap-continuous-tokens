/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface BalanceRedirectPresaleInterface extends ethers.utils.Interface {
  functions: {
    "hasInitialized()": FunctionFragment;
    "PPM()": FunctionFragment;
    "initialize(address,address,address,address,address,address,address,uint64,uint256,uint256,uint64)": FunctionFragment;
    "marketMaker()": FunctionFragment;
    "contributors(address)": FunctionFragment;
    "getEVMScriptExecutor(bytes)": FunctionFragment;
    "setPeriod(uint64)": FunctionFragment;
    "getRecoveryVault()": FunctionFragment;
    "beneficiary()": FunctionFragment;
    "exchangeRate()": FunctionFragment;
    "refund(address,uint256)": FunctionFragment;
    "close()": FunctionFragment;
    "setOpenDate(uint64)": FunctionFragment;
    "contributionToken()": FunctionFragment;
    "mintingForBeneficiaryPct()": FunctionFragment;
    "OPEN_ROLE()": FunctionFragment;
    "contributorsCounter()": FunctionFragment;
    "REDUCE_BENEFICIARY_PCT_ROLE()": FunctionFragment;
    "allowRecoverability(address)": FunctionFragment;
    "appId()": FunctionFragment;
    "contribute(address,uint256)": FunctionFragment;
    "getInitializationBlock()": FunctionFragment;
    "totalSold()": FunctionFragment;
    "contributionToTokens(uint256)": FunctionFragment;
    "transferToVault(address)": FunctionFragment;
    "canPerform(address,bytes32,uint256[])": FunctionFragment;
    "CONTRIBUTE_ROLE()": FunctionFragment;
    "getEVMScriptRegistry()": FunctionFragment;
    "reduceBeneficiaryPct(uint64)": FunctionFragment;
    "state()": FunctionFragment;
    "isClosed()": FunctionFragment;
    "totalRaised()": FunctionFragment;
    "reserve()": FunctionFragment;
    "kernel()": FunctionFragment;
    "isPetrified()": FunctionFragment;
    "bondedToken()": FunctionFragment;
    "openDate()": FunctionFragment;
    "period()": FunctionFragment;
    "controller()": FunctionFragment;
    "open()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "hasInitialized",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "PPM", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      string,
      string,
      string,
      string,
      string,
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "marketMaker",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "contributors",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getEVMScriptExecutor",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setPeriod",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRecoveryVault",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "beneficiary",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "exchangeRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "refund",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "close", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setOpenDate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "contributionToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mintingForBeneficiaryPct",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "OPEN_ROLE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "contributorsCounter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "REDUCE_BENEFICIARY_PCT_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allowRecoverability",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "appId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "contribute",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getInitializationBlock",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "totalSold", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "contributionToTokens",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferToVault",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "canPerform",
    values: [string, BytesLike, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "CONTRIBUTE_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getEVMScriptRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "reduceBeneficiaryPct",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "state", values?: undefined): string;
  encodeFunctionData(functionFragment: "isClosed", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalRaised",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "reserve", values?: undefined): string;
  encodeFunctionData(functionFragment: "kernel", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isPetrified",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "bondedToken",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "openDate", values?: undefined): string;
  encodeFunctionData(functionFragment: "period", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "controller",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "open", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "hasInitialized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "PPM", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "marketMaker",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contributors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEVMScriptExecutor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setPeriod", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRecoveryVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "beneficiary",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exchangeRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "refund", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "close", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setOpenDate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contributionToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintingForBeneficiaryPct",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "OPEN_ROLE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "contributorsCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "REDUCE_BENEFICIARY_PCT_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allowRecoverability",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "appId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "contribute", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getInitializationBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "totalSold", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "contributionToTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferToVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "canPerform", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "CONTRIBUTE_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEVMScriptRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reduceBeneficiaryPct",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "state", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isClosed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalRaised",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "reserve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "kernel", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isPetrified",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bondedToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "openDate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "period", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "controller", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "open", data: BytesLike): Result;

  events: {
    "SetOpenDate(uint64)": EventFragment;
    "ReduceBeneficiatyPct(uint256)": EventFragment;
    "Close()": EventFragment;
    "Contribute(address,uint256,uint256)": EventFragment;
    "ScriptResult(address,bytes,bytes,bytes)": EventFragment;
    "RecoverToVault(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "SetOpenDate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReduceBeneficiatyPct"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Close"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Contribute"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ScriptResult"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RecoverToVault"): EventFragment;
}

export class BalanceRedirectPresale extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: BalanceRedirectPresaleInterface;

  functions: {
    hasInitialized(overrides?: CallOverrides): Promise<[boolean]>;

    PPM(overrides?: CallOverrides): Promise<[BigNumber]>;

    initialize(
      _kernel: string,
      _controller: string,
      _marketMaker: string,
      _bondedToken: string,
      _reserve: string,
      _beneficiary: string,
      _erc20ContribToken: string,
      _period: BigNumberish,
      _exchangeRate: BigNumberish,
      _mintingForBeneficiaryPct: BigNumberish,
      _openDate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    marketMaker(overrides?: CallOverrides): Promise<[string]>;

    contributors(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    getEVMScriptExecutor(
      _script: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    setPeriod(
      _period: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getRecoveryVault(overrides?: CallOverrides): Promise<[string]>;

    beneficiary(overrides?: CallOverrides): Promise<[string]>;

    exchangeRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    refund(
      arg0: string,
      arg1: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    close(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setOpenDate(
      _date: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    contributionToken(overrides?: CallOverrides): Promise<[string]>;

    mintingForBeneficiaryPct(overrides?: CallOverrides): Promise<[BigNumber]>;

    OPEN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    contributorsCounter(overrides?: CallOverrides): Promise<[BigNumber]>;

    REDUCE_BENEFICIARY_PCT_ROLE(overrides?: CallOverrides): Promise<[string]>;

    allowRecoverability(
      token: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    appId(overrides?: CallOverrides): Promise<[string]>;

    contribute(
      _contributor: string,
      _value: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getInitializationBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalSold(overrides?: CallOverrides): Promise<[BigNumber]>;

    contributionToTokens(
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    transferToVault(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    canPerform(
      _sender: string,
      _role: BytesLike,
      _params: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    CONTRIBUTE_ROLE(overrides?: CallOverrides): Promise<[string]>;

    getEVMScriptRegistry(overrides?: CallOverrides): Promise<[string]>;

    reduceBeneficiaryPct(
      _pct: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    state(overrides?: CallOverrides): Promise<[number]>;

    isClosed(overrides?: CallOverrides): Promise<[boolean]>;

    totalRaised(overrides?: CallOverrides): Promise<[BigNumber]>;

    reserve(overrides?: CallOverrides): Promise<[string]>;

    kernel(overrides?: CallOverrides): Promise<[string]>;

    isPetrified(overrides?: CallOverrides): Promise<[boolean]>;

    bondedToken(overrides?: CallOverrides): Promise<[string]>;

    openDate(overrides?: CallOverrides): Promise<[BigNumber]>;

    period(overrides?: CallOverrides): Promise<[BigNumber]>;

    controller(overrides?: CallOverrides): Promise<[string]>;

    open(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  hasInitialized(overrides?: CallOverrides): Promise<boolean>;

  PPM(overrides?: CallOverrides): Promise<BigNumber>;

  initialize(
    _kernel: string,
    _controller: string,
    _marketMaker: string,
    _bondedToken: string,
    _reserve: string,
    _beneficiary: string,
    _erc20ContribToken: string,
    _period: BigNumberish,
    _exchangeRate: BigNumberish,
    _mintingForBeneficiaryPct: BigNumberish,
    _openDate: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  marketMaker(overrides?: CallOverrides): Promise<string>;

  contributors(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  getEVMScriptExecutor(
    _script: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  setPeriod(
    _period: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getRecoveryVault(overrides?: CallOverrides): Promise<string>;

  beneficiary(overrides?: CallOverrides): Promise<string>;

  exchangeRate(overrides?: CallOverrides): Promise<BigNumber>;

  refund(
    arg0: string,
    arg1: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  close(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setOpenDate(
    _date: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  contributionToken(overrides?: CallOverrides): Promise<string>;

  mintingForBeneficiaryPct(overrides?: CallOverrides): Promise<BigNumber>;

  OPEN_ROLE(overrides?: CallOverrides): Promise<string>;

  contributorsCounter(overrides?: CallOverrides): Promise<BigNumber>;

  REDUCE_BENEFICIARY_PCT_ROLE(overrides?: CallOverrides): Promise<string>;

  allowRecoverability(
    token: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  appId(overrides?: CallOverrides): Promise<string>;

  contribute(
    _contributor: string,
    _value: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getInitializationBlock(overrides?: CallOverrides): Promise<BigNumber>;

  totalSold(overrides?: CallOverrides): Promise<BigNumber>;

  contributionToTokens(
    _value: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  transferToVault(
    _token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  canPerform(
    _sender: string,
    _role: BytesLike,
    _params: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<boolean>;

  CONTRIBUTE_ROLE(overrides?: CallOverrides): Promise<string>;

  getEVMScriptRegistry(overrides?: CallOverrides): Promise<string>;

  reduceBeneficiaryPct(
    _pct: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  state(overrides?: CallOverrides): Promise<number>;

  isClosed(overrides?: CallOverrides): Promise<boolean>;

  totalRaised(overrides?: CallOverrides): Promise<BigNumber>;

  reserve(overrides?: CallOverrides): Promise<string>;

  kernel(overrides?: CallOverrides): Promise<string>;

  isPetrified(overrides?: CallOverrides): Promise<boolean>;

  bondedToken(overrides?: CallOverrides): Promise<string>;

  openDate(overrides?: CallOverrides): Promise<BigNumber>;

  period(overrides?: CallOverrides): Promise<BigNumber>;

  controller(overrides?: CallOverrides): Promise<string>;

  open(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    hasInitialized(overrides?: CallOverrides): Promise<boolean>;

    PPM(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _kernel: string,
      _controller: string,
      _marketMaker: string,
      _bondedToken: string,
      _reserve: string,
      _beneficiary: string,
      _erc20ContribToken: string,
      _period: BigNumberish,
      _exchangeRate: BigNumberish,
      _mintingForBeneficiaryPct: BigNumberish,
      _openDate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    marketMaker(overrides?: CallOverrides): Promise<string>;

    contributors(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    getEVMScriptExecutor(
      _script: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    setPeriod(_period: BigNumberish, overrides?: CallOverrides): Promise<void>;

    getRecoveryVault(overrides?: CallOverrides): Promise<string>;

    beneficiary(overrides?: CallOverrides): Promise<string>;

    exchangeRate(overrides?: CallOverrides): Promise<BigNumber>;

    refund(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    close(overrides?: CallOverrides): Promise<void>;

    setOpenDate(_date: BigNumberish, overrides?: CallOverrides): Promise<void>;

    contributionToken(overrides?: CallOverrides): Promise<string>;

    mintingForBeneficiaryPct(overrides?: CallOverrides): Promise<BigNumber>;

    OPEN_ROLE(overrides?: CallOverrides): Promise<string>;

    contributorsCounter(overrides?: CallOverrides): Promise<BigNumber>;

    REDUCE_BENEFICIARY_PCT_ROLE(overrides?: CallOverrides): Promise<string>;

    allowRecoverability(
      token: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    appId(overrides?: CallOverrides): Promise<string>;

    contribute(
      _contributor: string,
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getInitializationBlock(overrides?: CallOverrides): Promise<BigNumber>;

    totalSold(overrides?: CallOverrides): Promise<BigNumber>;

    contributionToTokens(
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferToVault(_token: string, overrides?: CallOverrides): Promise<void>;

    canPerform(
      _sender: string,
      _role: BytesLike,
      _params: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    CONTRIBUTE_ROLE(overrides?: CallOverrides): Promise<string>;

    getEVMScriptRegistry(overrides?: CallOverrides): Promise<string>;

    reduceBeneficiaryPct(
      _pct: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    state(overrides?: CallOverrides): Promise<number>;

    isClosed(overrides?: CallOverrides): Promise<boolean>;

    totalRaised(overrides?: CallOverrides): Promise<BigNumber>;

    reserve(overrides?: CallOverrides): Promise<string>;

    kernel(overrides?: CallOverrides): Promise<string>;

    isPetrified(overrides?: CallOverrides): Promise<boolean>;

    bondedToken(overrides?: CallOverrides): Promise<string>;

    openDate(overrides?: CallOverrides): Promise<BigNumber>;

    period(overrides?: CallOverrides): Promise<BigNumber>;

    controller(overrides?: CallOverrides): Promise<string>;

    open(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    SetOpenDate(
      date?: null
    ): TypedEventFilter<[BigNumber], { date: BigNumber }>;

    ReduceBeneficiatyPct(
      pct?: null
    ): TypedEventFilter<[BigNumber], { pct: BigNumber }>;

    Close(): TypedEventFilter<[], {}>;

    Contribute(
      contributor?: string | null,
      value?: null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { contributor: string; value: BigNumber; amount: BigNumber }
    >;

    ScriptResult(
      executor?: string | null,
      script?: null,
      input?: null,
      returnData?: null
    ): TypedEventFilter<
      [string, string, string, string],
      { executor: string; script: string; input: string; returnData: string }
    >;

    RecoverToVault(
      vault?: string | null,
      token?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { vault: string; token: string; amount: BigNumber }
    >;
  };

  estimateGas: {
    hasInitialized(overrides?: CallOverrides): Promise<BigNumber>;

    PPM(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _kernel: string,
      _controller: string,
      _marketMaker: string,
      _bondedToken: string,
      _reserve: string,
      _beneficiary: string,
      _erc20ContribToken: string,
      _period: BigNumberish,
      _exchangeRate: BigNumberish,
      _mintingForBeneficiaryPct: BigNumberish,
      _openDate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    marketMaker(overrides?: CallOverrides): Promise<BigNumber>;

    contributors(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    getEVMScriptExecutor(
      _script: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setPeriod(
      _period: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getRecoveryVault(overrides?: CallOverrides): Promise<BigNumber>;

    beneficiary(overrides?: CallOverrides): Promise<BigNumber>;

    exchangeRate(overrides?: CallOverrides): Promise<BigNumber>;

    refund(
      arg0: string,
      arg1: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    close(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setOpenDate(
      _date: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    contributionToken(overrides?: CallOverrides): Promise<BigNumber>;

    mintingForBeneficiaryPct(overrides?: CallOverrides): Promise<BigNumber>;

    OPEN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    contributorsCounter(overrides?: CallOverrides): Promise<BigNumber>;

    REDUCE_BENEFICIARY_PCT_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    allowRecoverability(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    appId(overrides?: CallOverrides): Promise<BigNumber>;

    contribute(
      _contributor: string,
      _value: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getInitializationBlock(overrides?: CallOverrides): Promise<BigNumber>;

    totalSold(overrides?: CallOverrides): Promise<BigNumber>;

    contributionToTokens(
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferToVault(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    canPerform(
      _sender: string,
      _role: BytesLike,
      _params: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    CONTRIBUTE_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    getEVMScriptRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    reduceBeneficiaryPct(
      _pct: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    state(overrides?: CallOverrides): Promise<BigNumber>;

    isClosed(overrides?: CallOverrides): Promise<BigNumber>;

    totalRaised(overrides?: CallOverrides): Promise<BigNumber>;

    reserve(overrides?: CallOverrides): Promise<BigNumber>;

    kernel(overrides?: CallOverrides): Promise<BigNumber>;

    isPetrified(overrides?: CallOverrides): Promise<BigNumber>;

    bondedToken(overrides?: CallOverrides): Promise<BigNumber>;

    openDate(overrides?: CallOverrides): Promise<BigNumber>;

    period(overrides?: CallOverrides): Promise<BigNumber>;

    controller(overrides?: CallOverrides): Promise<BigNumber>;

    open(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    hasInitialized(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PPM(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      _kernel: string,
      _controller: string,
      _marketMaker: string,
      _bondedToken: string,
      _reserve: string,
      _beneficiary: string,
      _erc20ContribToken: string,
      _period: BigNumberish,
      _exchangeRate: BigNumberish,
      _mintingForBeneficiaryPct: BigNumberish,
      _openDate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    marketMaker(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    contributors(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEVMScriptExecutor(
      _script: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setPeriod(
      _period: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getRecoveryVault(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    beneficiary(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    exchangeRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    refund(
      arg0: string,
      arg1: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    close(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setOpenDate(
      _date: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    contributionToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mintingForBeneficiaryPct(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    OPEN_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    contributorsCounter(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    REDUCE_BENEFICIARY_PCT_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allowRecoverability(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    appId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    contribute(
      _contributor: string,
      _value: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getInitializationBlock(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalSold(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    contributionToTokens(
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferToVault(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    canPerform(
      _sender: string,
      _role: BytesLike,
      _params: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    CONTRIBUTE_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getEVMScriptRegistry(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    reduceBeneficiaryPct(
      _pct: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    state(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isClosed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalRaised(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    reserve(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    kernel(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isPetrified(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bondedToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    openDate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    period(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    controller(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    open(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
