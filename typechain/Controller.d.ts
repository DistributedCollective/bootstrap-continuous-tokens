/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface ControllerInterface extends ethers.utils.Interface {
  functions: {
    "updateMaximumTapRateIncreasePct(uint256)": FunctionFragment;
    "hasInitialized()": FunctionFragment;
    "updateBeneficiary(address)": FunctionFragment;
    "TO_RESET_CAP()": FunctionFragment;
    "OPEN_TRADING_ROLE()": FunctionFragment;
    "OPEN_PRESALE_ROLE()": FunctionFragment;
    "marketMaker()": FunctionFragment;
    "getEVMScriptExecutor(bytes)": FunctionFragment;
    "OPEN_BUY_ORDER_ROLE()": FunctionFragment;
    "UPDATE_COLLATERAL_TOKEN_ROLE()": FunctionFragment;
    "getRecoveryVault()": FunctionFragment;
    "addTokenTap(address,uint256,uint256)": FunctionFragment;
    "refund(address,uint256)": FunctionFragment;
    "UPDATE_BENEFICIARY_ROLE()": FunctionFragment;
    "collateralsToBeClaimed(address)": FunctionFragment;
    "contributionToken()": FunctionFragment;
    "withdraw(address)": FunctionFragment;
    "claimSellOrder(address,uint256,address)": FunctionFragment;
    "ADD_COLLATERAL_TOKEN_ROLE()": FunctionFragment;
    "UPDATE_FEES_ROLE()": FunctionFragment;
    "reAddCollateralToken(address,uint256,uint256,uint32,uint256)": FunctionFragment;
    "closePresale()": FunctionFragment;
    "updateFees(uint256,uint256)": FunctionFragment;
    "claimBuyOrder(address,uint256,address)": FunctionFragment;
    "openSellOrder(address,uint256)": FunctionFragment;
    "allowRecoverability(address)": FunctionFragment;
    "appId()": FunctionFragment;
    "updateTappedAmount(address)": FunctionFragment;
    "updateCollateralToken(address,uint256,uint256,uint32,uint256)": FunctionFragment;
    "getInitializationBlock()": FunctionFragment;
    "ADD_TOKEN_TAP_ROLE()": FunctionFragment;
    "openPresale()": FunctionFragment;
    "removeCollateralToken(address)": FunctionFragment;
    "addCollateralToken(address,uint256,uint256,uint32,uint256,uint256,uint256)": FunctionFragment;
    "transferToVault(address)": FunctionFragment;
    "canPerform(address,bytes32,uint256[])": FunctionFragment;
    "CONTRIBUTE_ROLE()": FunctionFragment;
    "getEVMScriptRegistry()": FunctionFragment;
    "UPDATE_TOKEN_TAP_ROLE()": FunctionFragment;
    "initialize(address,address,address,address,address,address[])": FunctionFragment;
    "REMOVE_COLLATERAL_TOKEN_ROLE()": FunctionFragment;
    "updateTokenTap(address,uint256,uint256)": FunctionFragment;
    "UPDATE_MAXIMUM_TAP_RATE_INCREASE_PCT_ROLE()": FunctionFragment;
    "contribute(uint256)": FunctionFragment;
    "openTrading()": FunctionFragment;
    "UPDATE_MAXIMUM_TAP_FLOOR_DECREASE_PCT_ROLE()": FunctionFragment;
    "reserve()": FunctionFragment;
    "toReset(uint256)": FunctionFragment;
    "OPEN_SELL_ORDER_ROLE()": FunctionFragment;
    "updateMaximumTapFloorDecreasePct(uint256)": FunctionFragment;
    "openBuyOrder(address,uint256)": FunctionFragment;
    "kernel()": FunctionFragment;
    "isPetrified()": FunctionFragment;
    "WITHDRAW_ROLE()": FunctionFragment;
    "getMaximumWithdrawal(address)": FunctionFragment;
    "balanceOf(address,address)": FunctionFragment;
    "token()": FunctionFragment;
    "tap()": FunctionFragment;
    "presale()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "updateMaximumTapRateIncreasePct",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "hasInitialized",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateBeneficiary",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "TO_RESET_CAP",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "OPEN_TRADING_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "OPEN_PRESALE_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "marketMaker",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getEVMScriptExecutor",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "OPEN_BUY_ORDER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "UPDATE_COLLATERAL_TOKEN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRecoveryVault",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addTokenTap",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "refund",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "UPDATE_BENEFICIARY_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "collateralsToBeClaimed",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "contributionToken",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "withdraw", values: [string]): string;
  encodeFunctionData(
    functionFragment: "claimSellOrder",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "ADD_COLLATERAL_TOKEN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "UPDATE_FEES_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "reAddCollateralToken",
    values: [string, BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "closePresale",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateFees",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimBuyOrder",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "openSellOrder",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "allowRecoverability",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "appId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateTappedAmount",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateCollateralToken",
    values: [string, BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getInitializationBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ADD_TOKEN_TAP_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "openPresale",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeCollateralToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "addCollateralToken",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferToVault",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "canPerform",
    values: [string, BytesLike, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "CONTRIBUTE_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getEVMScriptRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "UPDATE_TOKEN_TAP_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, string, string, string, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "REMOVE_COLLATERAL_TOKEN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateTokenTap",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "UPDATE_MAXIMUM_TAP_RATE_INCREASE_PCT_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "contribute",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "openTrading",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "UPDATE_MAXIMUM_TAP_FLOOR_DECREASE_PCT_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "reserve", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "toReset",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "OPEN_SELL_ORDER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateMaximumTapFloorDecreasePct",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "openBuyOrder",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "kernel", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isPetrified",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "WITHDRAW_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMaximumWithdrawal",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(functionFragment: "tap", values?: undefined): string;
  encodeFunctionData(functionFragment: "presale", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "updateMaximumTapRateIncreasePct",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasInitialized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateBeneficiary",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TO_RESET_CAP",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "OPEN_TRADING_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "OPEN_PRESALE_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "marketMaker",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEVMScriptExecutor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "OPEN_BUY_ORDER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "UPDATE_COLLATERAL_TOKEN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRecoveryVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addTokenTap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "refund", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "UPDATE_BENEFICIARY_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collateralsToBeClaimed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contributionToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimSellOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ADD_COLLATERAL_TOKEN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "UPDATE_FEES_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reAddCollateralToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "closePresale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "updateFees", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimBuyOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "openSellOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allowRecoverability",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "appId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateTappedAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateCollateralToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInitializationBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ADD_TOKEN_TAP_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "openPresale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeCollateralToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addCollateralToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferToVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "canPerform", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "CONTRIBUTE_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEVMScriptRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "UPDATE_TOKEN_TAP_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "REMOVE_COLLATERAL_TOKEN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateTokenTap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "UPDATE_MAXIMUM_TAP_RATE_INCREASE_PCT_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "contribute", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "openTrading",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "UPDATE_MAXIMUM_TAP_FLOOR_DECREASE_PCT_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "reserve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "toReset", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "OPEN_SELL_ORDER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMaximumTapFloorDecreasePct",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "openBuyOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "kernel", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isPetrified",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "WITHDRAW_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMaximumWithdrawal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tap", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "presale", data: BytesLike): Result;

  events: {
    "ScriptResult(address,bytes,bytes,bytes)": EventFragment;
    "RecoverToVault(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ScriptResult"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RecoverToVault"): EventFragment;
}

export class Controller extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ControllerInterface;

  functions: {
    updateMaximumTapRateIncreasePct(
      _maximumTapRateIncreasePct: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    hasInitialized(overrides?: CallOverrides): Promise<[boolean]>;

    updateBeneficiary(
      _beneficiary: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    TO_RESET_CAP(overrides?: CallOverrides): Promise<[BigNumber]>;

    OPEN_TRADING_ROLE(overrides?: CallOverrides): Promise<[string]>;

    OPEN_PRESALE_ROLE(overrides?: CallOverrides): Promise<[string]>;

    marketMaker(overrides?: CallOverrides): Promise<[string]>;

    getEVMScriptExecutor(
      _script: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    OPEN_BUY_ORDER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    UPDATE_COLLATERAL_TOKEN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    getRecoveryVault(overrides?: CallOverrides): Promise<[string]>;

    addTokenTap(
      _token: string,
      _rate: BigNumberish,
      _floor: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    refund(
      _contributor: string,
      _vestedPurchaseId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    UPDATE_BENEFICIARY_ROLE(overrides?: CallOverrides): Promise<[string]>;

    collateralsToBeClaimed(
      _collateral: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    contributionToken(overrides?: CallOverrides): Promise<[string]>;

    withdraw(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimSellOrder(
      _seller: string,
      _batchId: BigNumberish,
      _collateral: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    ADD_COLLATERAL_TOKEN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    UPDATE_FEES_ROLE(overrides?: CallOverrides): Promise<[string]>;

    reAddCollateralToken(
      _collateral: string,
      _virtualSupply: BigNumberish,
      _virtualBalance: BigNumberish,
      _reserveRatio: BigNumberish,
      _slippage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    closePresale(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateFees(
      _buyFeePct: BigNumberish,
      _sellFeePct: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimBuyOrder(
      _buyer: string,
      _batchId: BigNumberish,
      _collateral: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    openSellOrder(
      _collateral: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    allowRecoverability(
      token: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    appId(overrides?: CallOverrides): Promise<[string]>;

    updateTappedAmount(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateCollateralToken(
      _collateral: string,
      _virtualSupply: BigNumberish,
      _virtualBalance: BigNumberish,
      _reserveRatio: BigNumberish,
      _slippage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getInitializationBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    ADD_TOKEN_TAP_ROLE(overrides?: CallOverrides): Promise<[string]>;

    openPresale(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeCollateralToken(
      _collateral: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addCollateralToken(
      _collateral: string,
      _virtualSupply: BigNumberish,
      _virtualBalance: BigNumberish,
      _reserveRatio: BigNumberish,
      _slippage: BigNumberish,
      _rate: BigNumberish,
      _floor: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferToVault(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    canPerform(
      _sender: string,
      _role: BytesLike,
      _params: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    CONTRIBUTE_ROLE(overrides?: CallOverrides): Promise<[string]>;

    getEVMScriptRegistry(overrides?: CallOverrides): Promise<[string]>;

    UPDATE_TOKEN_TAP_ROLE(overrides?: CallOverrides): Promise<[string]>;

    initialize(
      _kernel: string,
      _presale: string,
      _marketMaker: string,
      _reserve: string,
      _tap: string,
      _toReset: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    REMOVE_COLLATERAL_TOKEN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    updateTokenTap(
      _token: string,
      _rate: BigNumberish,
      _floor: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    UPDATE_MAXIMUM_TAP_RATE_INCREASE_PCT_ROLE(
      overrides?: CallOverrides
    ): Promise<[string]>;

    contribute(
      _value: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    openTrading(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    UPDATE_MAXIMUM_TAP_FLOOR_DECREASE_PCT_ROLE(
      overrides?: CallOverrides
    ): Promise<[string]>;

    reserve(overrides?: CallOverrides): Promise<[string]>;

    toReset(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    OPEN_SELL_ORDER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    updateMaximumTapFloorDecreasePct(
      _maximumTapFloorDecreasePct: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    openBuyOrder(
      _collateral: string,
      _value: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    kernel(overrides?: CallOverrides): Promise<[string]>;

    isPetrified(overrides?: CallOverrides): Promise<[boolean]>;

    WITHDRAW_ROLE(overrides?: CallOverrides): Promise<[string]>;

    getMaximumWithdrawal(
      _token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    balanceOf(
      _who: string,
      _token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    token(overrides?: CallOverrides): Promise<[string]>;

    tap(overrides?: CallOverrides): Promise<[string]>;

    presale(overrides?: CallOverrides): Promise<[string]>;
  };

  updateMaximumTapRateIncreasePct(
    _maximumTapRateIncreasePct: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  hasInitialized(overrides?: CallOverrides): Promise<boolean>;

  updateBeneficiary(
    _beneficiary: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  TO_RESET_CAP(overrides?: CallOverrides): Promise<BigNumber>;

  OPEN_TRADING_ROLE(overrides?: CallOverrides): Promise<string>;

  OPEN_PRESALE_ROLE(overrides?: CallOverrides): Promise<string>;

  marketMaker(overrides?: CallOverrides): Promise<string>;

  getEVMScriptExecutor(
    _script: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  OPEN_BUY_ORDER_ROLE(overrides?: CallOverrides): Promise<string>;

  UPDATE_COLLATERAL_TOKEN_ROLE(overrides?: CallOverrides): Promise<string>;

  getRecoveryVault(overrides?: CallOverrides): Promise<string>;

  addTokenTap(
    _token: string,
    _rate: BigNumberish,
    _floor: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  refund(
    _contributor: string,
    _vestedPurchaseId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  UPDATE_BENEFICIARY_ROLE(overrides?: CallOverrides): Promise<string>;

  collateralsToBeClaimed(
    _collateral: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  contributionToken(overrides?: CallOverrides): Promise<string>;

  withdraw(
    _token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimSellOrder(
    _seller: string,
    _batchId: BigNumberish,
    _collateral: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  ADD_COLLATERAL_TOKEN_ROLE(overrides?: CallOverrides): Promise<string>;

  UPDATE_FEES_ROLE(overrides?: CallOverrides): Promise<string>;

  reAddCollateralToken(
    _collateral: string,
    _virtualSupply: BigNumberish,
    _virtualBalance: BigNumberish,
    _reserveRatio: BigNumberish,
    _slippage: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  closePresale(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateFees(
    _buyFeePct: BigNumberish,
    _sellFeePct: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimBuyOrder(
    _buyer: string,
    _batchId: BigNumberish,
    _collateral: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  openSellOrder(
    _collateral: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  allowRecoverability(
    token: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  appId(overrides?: CallOverrides): Promise<string>;

  updateTappedAmount(
    _token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateCollateralToken(
    _collateral: string,
    _virtualSupply: BigNumberish,
    _virtualBalance: BigNumberish,
    _reserveRatio: BigNumberish,
    _slippage: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getInitializationBlock(overrides?: CallOverrides): Promise<BigNumber>;

  ADD_TOKEN_TAP_ROLE(overrides?: CallOverrides): Promise<string>;

  openPresale(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeCollateralToken(
    _collateral: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addCollateralToken(
    _collateral: string,
    _virtualSupply: BigNumberish,
    _virtualBalance: BigNumberish,
    _reserveRatio: BigNumberish,
    _slippage: BigNumberish,
    _rate: BigNumberish,
    _floor: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferToVault(
    _token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  canPerform(
    _sender: string,
    _role: BytesLike,
    _params: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<boolean>;

  CONTRIBUTE_ROLE(overrides?: CallOverrides): Promise<string>;

  getEVMScriptRegistry(overrides?: CallOverrides): Promise<string>;

  UPDATE_TOKEN_TAP_ROLE(overrides?: CallOverrides): Promise<string>;

  initialize(
    _kernel: string,
    _presale: string,
    _marketMaker: string,
    _reserve: string,
    _tap: string,
    _toReset: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  REMOVE_COLLATERAL_TOKEN_ROLE(overrides?: CallOverrides): Promise<string>;

  updateTokenTap(
    _token: string,
    _rate: BigNumberish,
    _floor: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  UPDATE_MAXIMUM_TAP_RATE_INCREASE_PCT_ROLE(
    overrides?: CallOverrides
  ): Promise<string>;

  contribute(
    _value: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  openTrading(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  UPDATE_MAXIMUM_TAP_FLOOR_DECREASE_PCT_ROLE(
    overrides?: CallOverrides
  ): Promise<string>;

  reserve(overrides?: CallOverrides): Promise<string>;

  toReset(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  OPEN_SELL_ORDER_ROLE(overrides?: CallOverrides): Promise<string>;

  updateMaximumTapFloorDecreasePct(
    _maximumTapFloorDecreasePct: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  openBuyOrder(
    _collateral: string,
    _value: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  kernel(overrides?: CallOverrides): Promise<string>;

  isPetrified(overrides?: CallOverrides): Promise<boolean>;

  WITHDRAW_ROLE(overrides?: CallOverrides): Promise<string>;

  getMaximumWithdrawal(
    _token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  balanceOf(
    _who: string,
    _token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  token(overrides?: CallOverrides): Promise<string>;

  tap(overrides?: CallOverrides): Promise<string>;

  presale(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    updateMaximumTapRateIncreasePct(
      _maximumTapRateIncreasePct: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    hasInitialized(overrides?: CallOverrides): Promise<boolean>;

    updateBeneficiary(
      _beneficiary: string,
      overrides?: CallOverrides
    ): Promise<void>;

    TO_RESET_CAP(overrides?: CallOverrides): Promise<BigNumber>;

    OPEN_TRADING_ROLE(overrides?: CallOverrides): Promise<string>;

    OPEN_PRESALE_ROLE(overrides?: CallOverrides): Promise<string>;

    marketMaker(overrides?: CallOverrides): Promise<string>;

    getEVMScriptExecutor(
      _script: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    OPEN_BUY_ORDER_ROLE(overrides?: CallOverrides): Promise<string>;

    UPDATE_COLLATERAL_TOKEN_ROLE(overrides?: CallOverrides): Promise<string>;

    getRecoveryVault(overrides?: CallOverrides): Promise<string>;

    addTokenTap(
      _token: string,
      _rate: BigNumberish,
      _floor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    refund(
      _contributor: string,
      _vestedPurchaseId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    UPDATE_BENEFICIARY_ROLE(overrides?: CallOverrides): Promise<string>;

    collateralsToBeClaimed(
      _collateral: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    contributionToken(overrides?: CallOverrides): Promise<string>;

    withdraw(_token: string, overrides?: CallOverrides): Promise<void>;

    claimSellOrder(
      _seller: string,
      _batchId: BigNumberish,
      _collateral: string,
      overrides?: CallOverrides
    ): Promise<void>;

    ADD_COLLATERAL_TOKEN_ROLE(overrides?: CallOverrides): Promise<string>;

    UPDATE_FEES_ROLE(overrides?: CallOverrides): Promise<string>;

    reAddCollateralToken(
      _collateral: string,
      _virtualSupply: BigNumberish,
      _virtualBalance: BigNumberish,
      _reserveRatio: BigNumberish,
      _slippage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    closePresale(overrides?: CallOverrides): Promise<void>;

    updateFees(
      _buyFeePct: BigNumberish,
      _sellFeePct: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    claimBuyOrder(
      _buyer: string,
      _batchId: BigNumberish,
      _collateral: string,
      overrides?: CallOverrides
    ): Promise<void>;

    openSellOrder(
      _collateral: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    allowRecoverability(
      token: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    appId(overrides?: CallOverrides): Promise<string>;

    updateTappedAmount(
      _token: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateCollateralToken(
      _collateral: string,
      _virtualSupply: BigNumberish,
      _virtualBalance: BigNumberish,
      _reserveRatio: BigNumberish,
      _slippage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getInitializationBlock(overrides?: CallOverrides): Promise<BigNumber>;

    ADD_TOKEN_TAP_ROLE(overrides?: CallOverrides): Promise<string>;

    openPresale(overrides?: CallOverrides): Promise<void>;

    removeCollateralToken(
      _collateral: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addCollateralToken(
      _collateral: string,
      _virtualSupply: BigNumberish,
      _virtualBalance: BigNumberish,
      _reserveRatio: BigNumberish,
      _slippage: BigNumberish,
      _rate: BigNumberish,
      _floor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferToVault(_token: string, overrides?: CallOverrides): Promise<void>;

    canPerform(
      _sender: string,
      _role: BytesLike,
      _params: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    CONTRIBUTE_ROLE(overrides?: CallOverrides): Promise<string>;

    getEVMScriptRegistry(overrides?: CallOverrides): Promise<string>;

    UPDATE_TOKEN_TAP_ROLE(overrides?: CallOverrides): Promise<string>;

    initialize(
      _kernel: string,
      _presale: string,
      _marketMaker: string,
      _reserve: string,
      _tap: string,
      _toReset: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    REMOVE_COLLATERAL_TOKEN_ROLE(overrides?: CallOverrides): Promise<string>;

    updateTokenTap(
      _token: string,
      _rate: BigNumberish,
      _floor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    UPDATE_MAXIMUM_TAP_RATE_INCREASE_PCT_ROLE(
      overrides?: CallOverrides
    ): Promise<string>;

    contribute(_value: BigNumberish, overrides?: CallOverrides): Promise<void>;

    openTrading(overrides?: CallOverrides): Promise<void>;

    UPDATE_MAXIMUM_TAP_FLOOR_DECREASE_PCT_ROLE(
      overrides?: CallOverrides
    ): Promise<string>;

    reserve(overrides?: CallOverrides): Promise<string>;

    toReset(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    OPEN_SELL_ORDER_ROLE(overrides?: CallOverrides): Promise<string>;

    updateMaximumTapFloorDecreasePct(
      _maximumTapFloorDecreasePct: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    openBuyOrder(
      _collateral: string,
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    kernel(overrides?: CallOverrides): Promise<string>;

    isPetrified(overrides?: CallOverrides): Promise<boolean>;

    WITHDRAW_ROLE(overrides?: CallOverrides): Promise<string>;

    getMaximumWithdrawal(
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOf(
      _who: string,
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<string>;

    tap(overrides?: CallOverrides): Promise<string>;

    presale(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    ScriptResult(
      executor?: string | null,
      script?: null,
      input?: null,
      returnData?: null
    ): TypedEventFilter<
      [string, string, string, string],
      { executor: string; script: string; input: string; returnData: string }
    >;

    RecoverToVault(
      vault?: string | null,
      token?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { vault: string; token: string; amount: BigNumber }
    >;
  };

  estimateGas: {
    updateMaximumTapRateIncreasePct(
      _maximumTapRateIncreasePct: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    hasInitialized(overrides?: CallOverrides): Promise<BigNumber>;

    updateBeneficiary(
      _beneficiary: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    TO_RESET_CAP(overrides?: CallOverrides): Promise<BigNumber>;

    OPEN_TRADING_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    OPEN_PRESALE_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    marketMaker(overrides?: CallOverrides): Promise<BigNumber>;

    getEVMScriptExecutor(
      _script: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    OPEN_BUY_ORDER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    UPDATE_COLLATERAL_TOKEN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    getRecoveryVault(overrides?: CallOverrides): Promise<BigNumber>;

    addTokenTap(
      _token: string,
      _rate: BigNumberish,
      _floor: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    refund(
      _contributor: string,
      _vestedPurchaseId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    UPDATE_BENEFICIARY_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    collateralsToBeClaimed(
      _collateral: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    contributionToken(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimSellOrder(
      _seller: string,
      _batchId: BigNumberish,
      _collateral: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    ADD_COLLATERAL_TOKEN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    UPDATE_FEES_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    reAddCollateralToken(
      _collateral: string,
      _virtualSupply: BigNumberish,
      _virtualBalance: BigNumberish,
      _reserveRatio: BigNumberish,
      _slippage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    closePresale(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateFees(
      _buyFeePct: BigNumberish,
      _sellFeePct: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimBuyOrder(
      _buyer: string,
      _batchId: BigNumberish,
      _collateral: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    openSellOrder(
      _collateral: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    allowRecoverability(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    appId(overrides?: CallOverrides): Promise<BigNumber>;

    updateTappedAmount(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateCollateralToken(
      _collateral: string,
      _virtualSupply: BigNumberish,
      _virtualBalance: BigNumberish,
      _reserveRatio: BigNumberish,
      _slippage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getInitializationBlock(overrides?: CallOverrides): Promise<BigNumber>;

    ADD_TOKEN_TAP_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    openPresale(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeCollateralToken(
      _collateral: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addCollateralToken(
      _collateral: string,
      _virtualSupply: BigNumberish,
      _virtualBalance: BigNumberish,
      _reserveRatio: BigNumberish,
      _slippage: BigNumberish,
      _rate: BigNumberish,
      _floor: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferToVault(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    canPerform(
      _sender: string,
      _role: BytesLike,
      _params: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    CONTRIBUTE_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    getEVMScriptRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    UPDATE_TOKEN_TAP_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _kernel: string,
      _presale: string,
      _marketMaker: string,
      _reserve: string,
      _tap: string,
      _toReset: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    REMOVE_COLLATERAL_TOKEN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    updateTokenTap(
      _token: string,
      _rate: BigNumberish,
      _floor: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    UPDATE_MAXIMUM_TAP_RATE_INCREASE_PCT_ROLE(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    contribute(
      _value: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    openTrading(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    UPDATE_MAXIMUM_TAP_FLOOR_DECREASE_PCT_ROLE(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    reserve(overrides?: CallOverrides): Promise<BigNumber>;

    toReset(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    OPEN_SELL_ORDER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    updateMaximumTapFloorDecreasePct(
      _maximumTapFloorDecreasePct: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    openBuyOrder(
      _collateral: string,
      _value: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    kernel(overrides?: CallOverrides): Promise<BigNumber>;

    isPetrified(overrides?: CallOverrides): Promise<BigNumber>;

    WITHDRAW_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    getMaximumWithdrawal(
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOf(
      _who: string,
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;

    tap(overrides?: CallOverrides): Promise<BigNumber>;

    presale(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    updateMaximumTapRateIncreasePct(
      _maximumTapRateIncreasePct: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    hasInitialized(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updateBeneficiary(
      _beneficiary: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    TO_RESET_CAP(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    OPEN_TRADING_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    OPEN_PRESALE_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    marketMaker(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getEVMScriptExecutor(
      _script: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    OPEN_BUY_ORDER_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    UPDATE_COLLATERAL_TOKEN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRecoveryVault(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addTokenTap(
      _token: string,
      _rate: BigNumberish,
      _floor: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    refund(
      _contributor: string,
      _vestedPurchaseId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    UPDATE_BENEFICIARY_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    collateralsToBeClaimed(
      _collateral: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    contributionToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimSellOrder(
      _seller: string,
      _batchId: BigNumberish,
      _collateral: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    ADD_COLLATERAL_TOKEN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    UPDATE_FEES_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    reAddCollateralToken(
      _collateral: string,
      _virtualSupply: BigNumberish,
      _virtualBalance: BigNumberish,
      _reserveRatio: BigNumberish,
      _slippage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    closePresale(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateFees(
      _buyFeePct: BigNumberish,
      _sellFeePct: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimBuyOrder(
      _buyer: string,
      _batchId: BigNumberish,
      _collateral: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    openSellOrder(
      _collateral: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    allowRecoverability(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    appId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updateTappedAmount(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateCollateralToken(
      _collateral: string,
      _virtualSupply: BigNumberish,
      _virtualBalance: BigNumberish,
      _reserveRatio: BigNumberish,
      _slippage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getInitializationBlock(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ADD_TOKEN_TAP_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    openPresale(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeCollateralToken(
      _collateral: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addCollateralToken(
      _collateral: string,
      _virtualSupply: BigNumberish,
      _virtualBalance: BigNumberish,
      _reserveRatio: BigNumberish,
      _slippage: BigNumberish,
      _rate: BigNumberish,
      _floor: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferToVault(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    canPerform(
      _sender: string,
      _role: BytesLike,
      _params: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    CONTRIBUTE_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getEVMScriptRegistry(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    UPDATE_TOKEN_TAP_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _kernel: string,
      _presale: string,
      _marketMaker: string,
      _reserve: string,
      _tap: string,
      _toReset: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    REMOVE_COLLATERAL_TOKEN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updateTokenTap(
      _token: string,
      _rate: BigNumberish,
      _floor: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    UPDATE_MAXIMUM_TAP_RATE_INCREASE_PCT_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    contribute(
      _value: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    openTrading(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    UPDATE_MAXIMUM_TAP_FLOOR_DECREASE_PCT_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    reserve(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    toReset(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    OPEN_SELL_ORDER_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updateMaximumTapFloorDecreasePct(
      _maximumTapFloorDecreasePct: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    openBuyOrder(
      _collateral: string,
      _value: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    kernel(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isPetrified(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    WITHDRAW_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMaximumWithdrawal(
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOf(
      _who: string,
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tap(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    presale(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
